// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/errorcodes/errors.proto

package errorcodes

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Code int32

const (
	ErrUndefined                        Code = 0
	OK                                  Code = 1
	ErrBase                             Code = 2
	ErrUnimplemented                    Code = 3
	ErrRandomGeneratorFailed            Code = 4
	ErrUUIDGeneratorFailed              Code = 5
	ErrSerialization                    Code = 6
	ErrDeserialization                  Code = 7
	ErrPanic                            Code = 8
	ErrEnvelope                         Code = 1000
	ErrEnvelopeUntrusted                Code = 1001
	ErrEnvelopeNoDeviceFound            Code = 1002
	ErrEntity                           Code = 2000
	ErrEntityInput                      Code = 2001
	ErrEntityData                       Code = 2002
	ErrEntityExists                     Code = 2003
	ErrNet                              Code = 3000
	ErrNetAnotherClientConnected        Code = 3001
	ErrNetStream                        Code = 3002
	ErrNetQueue                         Code = 3003
	ErrNetDial                          Code = 3004
	ErrNetPing                          Code = 3005
	ErrNetP2P                           Code = 3100
	ErrNetP2PIdentity                   Code = 3101
	ErrNetP2PPublicKey                  Code = 3102
	ErrEvent                            Code = 4000
	ErrEventSender                      Code = 4001
	ErrEventData                        Code = 4002
	ErrValidation                       Code = 5000
	ErrValidationInput                  Code = 5001
	ErrValidationMyself                 Code = 5002
	ErrPagination                       Code = 6000
	ErrDb                               Code = 7000
	ErrDbCreate                         Code = 7001
	ErrDbUpdate                         Code = 7002
	ErrDbDelete                         Code = 7003
	ErrDbNothingFound                   Code = 7004
	ErrDbInternalError                  Code = 7005
	ErrCrypto                           Code = 8000
	ErrCryptoSig                        Code = 8100
	ErrCryptoSigMismatch                Code = 8101
	ErrCryptoSigFormat                  Code = 8102
	ErrCryptoEncrypt                    Code = 8200
	ErrCryptoDecrypt                    Code = 8300
	ErrCryptoKey                        Code = 8400
	ErrCryptoKeyGen                     Code = 8401
	ErrCryptoKeyDecode                  Code = 8402
	ErrCryptoSigchain                   Code = 8500
	ErrAccManager                       Code = 9000
	ErrAccManagerInitNode               Code = 9001
	ErrAccManagerDb                     Code = 9002
	ErrAccManagerDbInit                 Code = 9003
	ErrAccManagerDbDrop                 Code = 9004
	ErrAccManagerDbMig                  Code = 9005
	ErrAccManagerDbDir                  Code = 9006
	ErrAccManagerNotOpened              Code = 9007
	ErrAccManagerCfg                    Code = 9100
	ErrAccManagerCfgName                Code = 9101
	ErrAccManagerCfgPassphrase          Code = 9102
	ErrAccManagerCfgNet                 Code = 9104
	ErrAccManagerCfgGrpcSrv             Code = 9105
	ErrAccManagerBot                    Code = 9200
	ErrAccManagerBotInit                Code = 9201
	ErrAccManagerBotExited              Code = 9202
	ErrContactReq                       Code = 10000
	ErrContactReqKey                    Code = 10001
	ErrContactReqKeyMissing             Code = 10002
	ErrContactReqExisting               Code = 10003
	ErrContactReqMyself                 Code = 10004
	ErrContactLength                    Code = 10005
	ErrContactID                        Code = 10006
	ErrContactAcceptExisting            Code = 10007
	ErrContactAccepted                  Code = 10008
	ErrContactStatusMyself              Code = 10009
	ErrContactStatusIsRequested         Code = 10010
	ErrContactReqMe                     Code = 10011
	ErrContactStatusReqMe               Code = 10012
	ErrContactAcceptedMe                Code = 10013
	ErrContactSeen                      Code = 10014
	ErrContactStatusIsFriend            Code = 10015
	ErrContactStatusIsBlocked           Code = 10016
	ErrContactStatusBlockedMe           Code = 10017
	ErrCfg                              Code = 11000
	ErrCfgMissing                       Code = 11001
	ErrCfgMyself                        Code = 11002
	ErrCfgDevices                       Code = 11003
	ErrSenderAlias                      Code = 12000
	ErrSenderAliasGen                   Code = 12001
	ErrSenderAliasNoCandidates          Code = 12002
	ErrSenderAliasUpdateFailed          Code = 12003
	ErrConversation                     Code = 13000
	ErrConversationID                   Code = 13001
	ErrConversationTitle                Code = 13002
	ErrConversationTopic                Code = 13003
	ErrConversationInfos                Code = 13004
	ErrConversationKind                 Code = 13005
	ErrConversationMembers              Code = 13006
	ErrConversationMemberIsOneToOne     Code = 13201
	ErrConversationIsGroup              Code = 13202
	ErrConversationIsFull               Code = 13203
	ErrConversationIsMember             Code = 13204
	ErrConversationGetMember            Code = 13205
	ErrConversationGetOwners            Code = 13206
	ErrConversationMember               Code = 13500
	ErrConversationMemberID             Code = 13501
	ErrConversationMemberStatus         Code = 13502
	ErrConversationMemberContact        Code = 13503
	ErrConversationMemberContactID      Code = 13504
	ErrConversationMemberConversation   Code = 13505
	ErrConversationMemberConversationID Code = 13506
	ErrConversationMemberInvite         Code = 13701
	ErrConversationMemberLeave          Code = 13702
	ErrConversationMemberSetTitle       Code = 13703
	ErrConversationMemberSetTopic       Code = 13704
	ErrConversationMemberSetOwner       Code = 13705
	ErrConversationMemberBlock          Code = 13706
	ErrConversationMemberUnblock        Code = 13707
	ErrConversationMemberRead           Code = 13708
	ErrConversationMemberWrite          Code = 13709
	ErrConversationMemberSeen           Code = 13710
	ErrPush                             Code = 14000
	ErrPushUnknownProvider              Code = 14001
	ErrPushProvider                     Code = 14002
	ErrPushInvalidIdentifier            Code = 14003
	ErrPushInvalidServerConfig          Code = 14004
	ErrPushMissingBundleId              Code = 14005
	ErrPushUnknownDestination           Code = 14006
	ErrPushBroadcastIdentifier          Code = 14007
	ErrPushInvalidType                  Code = 14008
	ErrPushBroadcast                    Code = 14009
	ErrNotification                     Code = 15000
	ErrNotificationMarshalFCM           Code = 15001
	ErrNotificationMarshalAPNS          Code = 15002
	ErrNotificationMarshalMQTT          Code = 15003
	ErrNotificationUnmarshalFCM         Code = 15004
	ErrNotificationUnmarshalAPNS        Code = 15005
	ErrNotificationUnmarshalMQTT        Code = 15006
	ErrNotificationReceive              Code = 15007
	ErrNode                             Code = 16000
	ErrNodePushNotifSub                 Code = 16001
	ErrNodeHandleConversationUpdate     Code = 16701
	ErrNodeHandleConversationInvite     Code = 16702
	ErrChunk                            Code = 17000
	ErrChunkBadIndex                    Code = 17001
	ErrChunkBadData                     Code = 17002
	ErrChunkBadSliceID                  Code = 17003
	ErrChunkBadSliceLength              Code = 17004
	ErrChunkSliceNotComplete            Code = 17005
	ErrChunkBadSlice                    Code = 17006
	ErrChunkDaemonStoragePath           Code = 17007
	ErrChunkDaemonOpenDatabase          Code = 17008
	ErrChunkSlice                       Code = 17009
	ErrChunkPublish                     Code = 17010
	ErrChunkSave                        Code = 17011
	ErrChunkFindSliceByID               Code = 17012
	ErrChunkFindAllSlices               Code = 17013
)

var Code_name = map[int32]string{
	0:     "ErrUndefined",
	1:     "OK",
	2:     "ErrBase",
	3:     "ErrUnimplemented",
	4:     "ErrRandomGeneratorFailed",
	5:     "ErrUUIDGeneratorFailed",
	6:     "ErrSerialization",
	7:     "ErrDeserialization",
	8:     "ErrPanic",
	1000:  "ErrEnvelope",
	1001:  "ErrEnvelopeUntrusted",
	1002:  "ErrEnvelopeNoDeviceFound",
	2000:  "ErrEntity",
	2001:  "ErrEntityInput",
	2002:  "ErrEntityData",
	2003:  "ErrEntityExists",
	3000:  "ErrNet",
	3001:  "ErrNetAnotherClientConnected",
	3002:  "ErrNetStream",
	3003:  "ErrNetQueue",
	3004:  "ErrNetDial",
	3005:  "ErrNetPing",
	3100:  "ErrNetP2P",
	3101:  "ErrNetP2PIdentity",
	3102:  "ErrNetP2PPublicKey",
	4000:  "ErrEvent",
	4001:  "ErrEventSender",
	4002:  "ErrEventData",
	5000:  "ErrValidation",
	5001:  "ErrValidationInput",
	5002:  "ErrValidationMyself",
	6000:  "ErrPagination",
	7000:  "ErrDb",
	7001:  "ErrDbCreate",
	7002:  "ErrDbUpdate",
	7003:  "ErrDbDelete",
	7004:  "ErrDbNothingFound",
	7005:  "ErrDbInternalError",
	8000:  "ErrCrypto",
	8100:  "ErrCryptoSig",
	8101:  "ErrCryptoSigMismatch",
	8102:  "ErrCryptoSigFormat",
	8200:  "ErrCryptoEncrypt",
	8300:  "ErrCryptoDecrypt",
	8400:  "ErrCryptoKey",
	8401:  "ErrCryptoKeyGen",
	8402:  "ErrCryptoKeyDecode",
	8500:  "ErrCryptoSigchain",
	9000:  "ErrAccManager",
	9001:  "ErrAccManagerInitNode",
	9002:  "ErrAccManagerDb",
	9003:  "ErrAccManagerDbInit",
	9004:  "ErrAccManagerDbDrop",
	9005:  "ErrAccManagerDbMig",
	9006:  "ErrAccManagerDbDir",
	9007:  "ErrAccManagerNotOpened",
	9100:  "ErrAccManagerCfg",
	9101:  "ErrAccManagerCfgName",
	9102:  "ErrAccManagerCfgPassphrase",
	9104:  "ErrAccManagerCfgNet",
	9105:  "ErrAccManagerCfgGrpcSrv",
	9200:  "ErrAccManagerBot",
	9201:  "ErrAccManagerBotInit",
	9202:  "ErrAccManagerBotExited",
	10000: "ErrContactReq",
	10001: "ErrContactReqKey",
	10002: "ErrContactReqKeyMissing",
	10003: "ErrContactReqExisting",
	10004: "ErrContactReqMyself",
	10005: "ErrContactLength",
	10006: "ErrContactID",
	10007: "ErrContactAcceptExisting",
	10008: "ErrContactAccepted",
	10009: "ErrContactStatusMyself",
	10010: "ErrContactStatusIsRequested",
	10011: "ErrContactReqMe",
	10012: "ErrContactStatusReqMe",
	10013: "ErrContactAcceptedMe",
	10014: "ErrContactSeen",
	10015: "ErrContactStatusIsFriend",
	10016: "ErrContactStatusIsBlocked",
	10017: "ErrContactStatusBlockedMe",
	11000: "ErrCfg",
	11001: "ErrCfgMissing",
	11002: "ErrCfgMyself",
	11003: "ErrCfgDevices",
	12000: "ErrSenderAlias",
	12001: "ErrSenderAliasGen",
	12002: "ErrSenderAliasNoCandidates",
	12003: "ErrSenderAliasUpdateFailed",
	13000: "ErrConversation",
	13001: "ErrConversationID",
	13002: "ErrConversationTitle",
	13003: "ErrConversationTopic",
	13004: "ErrConversationInfos",
	13005: "ErrConversationKind",
	13006: "ErrConversationMembers",
	13201: "ErrConversationMemberIsOneToOne",
	13202: "ErrConversationIsGroup",
	13203: "ErrConversationIsFull",
	13204: "ErrConversationIsMember",
	13205: "ErrConversationGetMember",
	13206: "ErrConversationGetOwners",
	13500: "ErrConversationMember",
	13501: "ErrConversationMemberID",
	13502: "ErrConversationMemberStatus",
	13503: "ErrConversationMemberContact",
	13504: "ErrConversationMemberContactID",
	13505: "ErrConversationMemberConversation",
	13506: "ErrConversationMemberConversationID",
	13701: "ErrConversationMemberInvite",
	13702: "ErrConversationMemberLeave",
	13703: "ErrConversationMemberSetTitle",
	13704: "ErrConversationMemberSetTopic",
	13705: "ErrConversationMemberSetOwner",
	13706: "ErrConversationMemberBlock",
	13707: "ErrConversationMemberUnblock",
	13708: "ErrConversationMemberRead",
	13709: "ErrConversationMemberWrite",
	13710: "ErrConversationMemberSeen",
	14000: "ErrPush",
	14001: "ErrPushUnknownProvider",
	14002: "ErrPushProvider",
	14003: "ErrPushInvalidIdentifier",
	14004: "ErrPushInvalidServerConfig",
	14005: "ErrPushMissingBundleId",
	14006: "ErrPushUnknownDestination",
	14007: "ErrPushBroadcastIdentifier",
	14008: "ErrPushInvalidType",
	14009: "ErrPushBroadcast",
	15000: "ErrNotification",
	15001: "ErrNotificationMarshalFCM",
	15002: "ErrNotificationMarshalAPNS",
	15003: "ErrNotificationMarshalMQTT",
	15004: "ErrNotificationUnmarshalFCM",
	15005: "ErrNotificationUnmarshalAPNS",
	15006: "ErrNotificationUnmarshalMQTT",
	15007: "ErrNotificationReceive",
	16000: "ErrNode",
	16001: "ErrNodePushNotifSub",
	16701: "ErrNodeHandleConversationUpdate",
	16702: "ErrNodeHandleConversationInvite",
	17000: "ErrChunk",
	17001: "ErrChunkBadIndex",
	17002: "ErrChunkBadData",
	17003: "ErrChunkBadSliceID",
	17004: "ErrChunkBadSliceLength",
	17005: "ErrChunkSliceNotComplete",
	17006: "ErrChunkBadSlice",
	17007: "ErrChunkDaemonStoragePath",
	17008: "ErrChunkDaemonOpenDatabase",
	17009: "ErrChunkSlice",
	17010: "ErrChunkPublish",
	17011: "ErrChunkSave",
	17012: "ErrChunkFindSliceByID",
	17013: "ErrChunkFindAllSlices",
}

var Code_value = map[string]int32{
	"ErrUndefined":                        0,
	"OK":                                  1,
	"ErrBase":                             2,
	"ErrUnimplemented":                    3,
	"ErrRandomGeneratorFailed":            4,
	"ErrUUIDGeneratorFailed":              5,
	"ErrSerialization":                    6,
	"ErrDeserialization":                  7,
	"ErrPanic":                            8,
	"ErrEnvelope":                         1000,
	"ErrEnvelopeUntrusted":                1001,
	"ErrEnvelopeNoDeviceFound":            1002,
	"ErrEntity":                           2000,
	"ErrEntityInput":                      2001,
	"ErrEntityData":                       2002,
	"ErrEntityExists":                     2003,
	"ErrNet":                              3000,
	"ErrNetAnotherClientConnected":        3001,
	"ErrNetStream":                        3002,
	"ErrNetQueue":                         3003,
	"ErrNetDial":                          3004,
	"ErrNetPing":                          3005,
	"ErrNetP2P":                           3100,
	"ErrNetP2PIdentity":                   3101,
	"ErrNetP2PPublicKey":                  3102,
	"ErrEvent":                            4000,
	"ErrEventSender":                      4001,
	"ErrEventData":                        4002,
	"ErrValidation":                       5000,
	"ErrValidationInput":                  5001,
	"ErrValidationMyself":                 5002,
	"ErrPagination":                       6000,
	"ErrDb":                               7000,
	"ErrDbCreate":                         7001,
	"ErrDbUpdate":                         7002,
	"ErrDbDelete":                         7003,
	"ErrDbNothingFound":                   7004,
	"ErrDbInternalError":                  7005,
	"ErrCrypto":                           8000,
	"ErrCryptoSig":                        8100,
	"ErrCryptoSigMismatch":                8101,
	"ErrCryptoSigFormat":                  8102,
	"ErrCryptoEncrypt":                    8200,
	"ErrCryptoDecrypt":                    8300,
	"ErrCryptoKey":                        8400,
	"ErrCryptoKeyGen":                     8401,
	"ErrCryptoKeyDecode":                  8402,
	"ErrCryptoSigchain":                   8500,
	"ErrAccManager":                       9000,
	"ErrAccManagerInitNode":               9001,
	"ErrAccManagerDb":                     9002,
	"ErrAccManagerDbInit":                 9003,
	"ErrAccManagerDbDrop":                 9004,
	"ErrAccManagerDbMig":                  9005,
	"ErrAccManagerDbDir":                  9006,
	"ErrAccManagerNotOpened":              9007,
	"ErrAccManagerCfg":                    9100,
	"ErrAccManagerCfgName":                9101,
	"ErrAccManagerCfgPassphrase":          9102,
	"ErrAccManagerCfgNet":                 9104,
	"ErrAccManagerCfgGrpcSrv":             9105,
	"ErrAccManagerBot":                    9200,
	"ErrAccManagerBotInit":                9201,
	"ErrAccManagerBotExited":              9202,
	"ErrContactReq":                       10000,
	"ErrContactReqKey":                    10001,
	"ErrContactReqKeyMissing":             10002,
	"ErrContactReqExisting":               10003,
	"ErrContactReqMyself":                 10004,
	"ErrContactLength":                    10005,
	"ErrContactID":                        10006,
	"ErrContactAcceptExisting":            10007,
	"ErrContactAccepted":                  10008,
	"ErrContactStatusMyself":              10009,
	"ErrContactStatusIsRequested":         10010,
	"ErrContactReqMe":                     10011,
	"ErrContactStatusReqMe":               10012,
	"ErrContactAcceptedMe":                10013,
	"ErrContactSeen":                      10014,
	"ErrContactStatusIsFriend":            10015,
	"ErrContactStatusIsBlocked":           10016,
	"ErrContactStatusBlockedMe":           10017,
	"ErrCfg":                              11000,
	"ErrCfgMissing":                       11001,
	"ErrCfgMyself":                        11002,
	"ErrCfgDevices":                       11003,
	"ErrSenderAlias":                      12000,
	"ErrSenderAliasGen":                   12001,
	"ErrSenderAliasNoCandidates":          12002,
	"ErrSenderAliasUpdateFailed":          12003,
	"ErrConversation":                     13000,
	"ErrConversationID":                   13001,
	"ErrConversationTitle":                13002,
	"ErrConversationTopic":                13003,
	"ErrConversationInfos":                13004,
	"ErrConversationKind":                 13005,
	"ErrConversationMembers":              13006,
	"ErrConversationMemberIsOneToOne":     13201,
	"ErrConversationIsGroup":              13202,
	"ErrConversationIsFull":               13203,
	"ErrConversationIsMember":             13204,
	"ErrConversationGetMember":            13205,
	"ErrConversationGetOwners":            13206,
	"ErrConversationMember":               13500,
	"ErrConversationMemberID":             13501,
	"ErrConversationMemberStatus":         13502,
	"ErrConversationMemberContact":        13503,
	"ErrConversationMemberContactID":      13504,
	"ErrConversationMemberConversation":   13505,
	"ErrConversationMemberConversationID": 13506,
	"ErrConversationMemberInvite":         13701,
	"ErrConversationMemberLeave":          13702,
	"ErrConversationMemberSetTitle":       13703,
	"ErrConversationMemberSetTopic":       13704,
	"ErrConversationMemberSetOwner":       13705,
	"ErrConversationMemberBlock":          13706,
	"ErrConversationMemberUnblock":        13707,
	"ErrConversationMemberRead":           13708,
	"ErrConversationMemberWrite":          13709,
	"ErrConversationMemberSeen":           13710,
	"ErrPush":                             14000,
	"ErrPushUnknownProvider":              14001,
	"ErrPushProvider":                     14002,
	"ErrPushInvalidIdentifier":            14003,
	"ErrPushInvalidServerConfig":          14004,
	"ErrPushMissingBundleId":              14005,
	"ErrPushUnknownDestination":           14006,
	"ErrPushBroadcastIdentifier":          14007,
	"ErrPushInvalidType":                  14008,
	"ErrPushBroadcast":                    14009,
	"ErrNotification":                     15000,
	"ErrNotificationMarshalFCM":           15001,
	"ErrNotificationMarshalAPNS":          15002,
	"ErrNotificationMarshalMQTT":          15003,
	"ErrNotificationUnmarshalFCM":         15004,
	"ErrNotificationUnmarshalAPNS":        15005,
	"ErrNotificationUnmarshalMQTT":        15006,
	"ErrNotificationReceive":              15007,
	"ErrNode":                             16000,
	"ErrNodePushNotifSub":                 16001,
	"ErrNodeHandleConversationUpdate":     16701,
	"ErrNodeHandleConversationInvite":     16702,
	"ErrChunk":                            17000,
	"ErrChunkBadIndex":                    17001,
	"ErrChunkBadData":                     17002,
	"ErrChunkBadSliceID":                  17003,
	"ErrChunkBadSliceLength":              17004,
	"ErrChunkSliceNotComplete":            17005,
	"ErrChunkBadSlice":                    17006,
	"ErrChunkDaemonStoragePath":           17007,
	"ErrChunkDaemonOpenDatabase":          17008,
	"ErrChunkSlice":                       17009,
	"ErrChunkPublish":                     17010,
	"ErrChunkSave":                        17011,
	"ErrChunkFindSliceByID":               17012,
	"ErrChunkFindAllSlices":               17013,
}

func (x Code) String() string {
	return proto.EnumName(Code_name, int32(x))
}

func (Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f04d618bf87de955, []int{0}
}

// Metadata is designed to be used as grpc status detail
type Metadata struct {
	// unique enum code number to identify the error
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=berty.errorcodes.Code" json:"code,omitempty"`
	// extended code (see hierarchy.go)
	ExtendedCodes []Code `protobuf:"varint,2,rep,packed,name=extended_codes,json=extendedCodes,proto3,enum=berty.errorcodes.Code" json:"extended_codes,omitempty"`
	// used for templated errors (i18n)
	Placeholders map[string]string `protobuf:"bytes,3,rep,name=placeholders,proto3" json:"placeholders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// nested/wraped errors
	Parent *Metadata `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// this field will be a duplicate for the top-level error and then skipped,
	// but this field is particularly useful to get debugging info when looking up parent errors.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// caller is the first line of a stacktrace.
	Caller               string   `protobuf:"bytes,6,opt,name=caller,proto3" json:"caller,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04d618bf87de955, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return ErrUndefined
}

func (m *Metadata) GetExtendedCodes() []Code {
	if m != nil {
		return m.ExtendedCodes
	}
	return nil
}

func (m *Metadata) GetPlaceholders() map[string]string {
	if m != nil {
		return m.Placeholders
	}
	return nil
}

func (m *Metadata) GetParent() *Metadata {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Metadata) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Metadata) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func init() {
	proto.RegisterEnum("berty.errorcodes.Code", Code_name, Code_value)
	proto.RegisterType((*Metadata)(nil), "berty.errorcodes.Metadata")
	proto.RegisterMapType((map[string]string)(nil), "berty.errorcodes.Metadata.PlaceholdersEntry")
}

func init() { proto.RegisterFile("pkg/errorcodes/errors.proto", fileDescriptor_f04d618bf87de955) }

var fileDescriptor_f04d618bf87de955 = []byte{
	// 2036 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x58, 0x6b, 0x6c, 0x5c, 0x47,
	0x15, 0xce, 0x75, 0x12, 0x3b, 0x99, 0x3c, 0x7c, 0x32, 0x49, 0xec, 0xad, 0x93, 0xda, 0x6e, 0x0b,
	0x24, 0xaa, 0x90, 0x83, 0x82, 0x14, 0x21, 0x24, 0x48, 0x6d, 0xdf, 0xdd, 0x65, 0x95, 0xee, 0xcd,
	0xd6, 0x1b, 0x83, 0x84, 0x14, 0xa1, 0xd9, 0x7b, 0x8f, 0x77, 0x47, 0xbe, 0x3b, 0x77, 0x3b, 0x77,
	0x76, 0x1b, 0x23, 0x55, 0x82, 0x6a, 0x81, 0xb4, 0xb4, 0x55, 0xd3, 0x17, 0x69, 0x9b, 0xa4, 0x2d,
	0x2f, 0xf1, 0x7e, 0x16, 0x68, 0xa1, 0x29, 0x85, 0x5f, 0xe5, 0xa9, 0xb4, 0xfc, 0x81, 0x02, 0x52,
	0x49, 0xff, 0xb4, 0xa5, 0x94, 0xb4, 0x80, 0xc4, 0xe3, 0x0f, 0x9a, 0x7b, 0x67, 0xf7, 0xde, 0xf5,
	0xae, 0xdd, 0x5f, 0xf6, 0x7c, 0xdf, 0x99, 0x39, 0xdf, 0x39, 0x73, 0xe6, 0xcc, 0xdc, 0x25, 0xfb,
	0x1a, 0xcb, 0xd5, 0x43, 0x28, 0x65, 0x20, 0xdd, 0xc0, 0xc3, 0x30, 0xfe, 0x37, 0x9c, 0x69, 0xc8,
	0x40, 0x05, 0x14, 0x2a, 0x28, 0xd5, 0xca, 0x4c, 0x42, 0x4f, 0xec, 0xa9, 0x06, 0xd5, 0x20, 0x22,
	0x0f, 0xe9, 0xff, 0x62, 0xbb, 0x6b, 0xdf, 0x18, 0x22, 0x5b, 0x8a, 0xa8, 0x98, 0xc7, 0x14, 0xa3,
	0xd7, 0x93, 0x4d, 0xda, 0x36, 0x63, 0x4d, 0x5b, 0x07, 0x77, 0x1e, 0x1e, 0x9b, 0x59, 0xbd, 0xc6,
	0xcc, 0x7c, 0xe0, 0xe1, 0x42, 0x64, 0x43, 0x3f, 0x40, 0x76, 0xe2, 0x29, 0x85, 0xc2, 0x43, 0xef,
	0x63, 0x11, 0x99, 0x19, 0x9a, 0xde, 0xb8, 0xce, 0xac, 0x1d, 0x1d, 0x6b, 0x3d, 0x0a, 0x69, 0x89,
	0x6c, 0x6f, 0xf8, 0xcc, 0xc5, 0x5a, 0xe0, 0x7b, 0x28, 0xc3, 0xcc, 0xc6, 0xe9, 0x8d, 0x07, 0xb7,
	0x1d, 0x7e, 0x77, 0xff, 0xe4, 0x8e, 0xb8, 0x99, 0x52, 0xca, 0x3c, 0x2b, 0x94, 0x5c, 0x59, 0xe8,
	0x59, 0x81, 0x1e, 0x26, 0xc3, 0x0d, 0x26, 0x51, 0xa8, 0xcc, 0xa6, 0x69, 0xeb, 0xe0, 0xb6, 0xc3,
	0x13, 0x6b, 0xaf, 0xb5, 0x60, 0x2c, 0x69, 0x86, 0x8c, 0xd4, 0x31, 0x0c, 0x59, 0x15, 0x33, 0x9b,
	0xa7, 0xad, 0x83, 0x5b, 0x17, 0x3a, 0x43, 0x3a, 0x46, 0x86, 0x5d, 0xe6, 0xfb, 0x28, 0x33, 0xc3,
	0x11, 0x61, 0x46, 0x13, 0x47, 0xc9, 0xae, 0x3e, 0x21, 0x14, 0xc8, 0xc6, 0x65, 0x5c, 0x89, 0xd2,
	0xb6, 0x75, 0x41, 0xff, 0x4b, 0xf7, 0x90, 0xcd, 0x2d, 0xe6, 0x37, 0x31, 0x33, 0x14, 0x61, 0xf1,
	0xe0, 0xfd, 0x43, 0xef, 0xb3, 0xae, 0x7f, 0x71, 0x8a, 0x6c, 0xd2, 0x29, 0xa0, 0x40, 0xb6, 0x67,
	0xa5, 0x5c, 0x14, 0x1e, 0x2e, 0x71, 0x81, 0x1e, 0x6c, 0xa0, 0xc3, 0x64, 0xe8, 0xf8, 0x31, 0xb0,
	0xe8, 0x36, 0x32, 0x92, 0x95, 0x72, 0x8e, 0x85, 0x08, 0x43, 0x74, 0x0f, 0x81, 0xc8, 0x8c, 0xd7,
	0x1b, 0x3e, 0xd6, 0x51, 0x28, 0xf4, 0x60, 0x23, 0xdd, 0x4f, 0x32, 0x59, 0x29, 0x17, 0x98, 0xf0,
	0x82, 0x7a, 0x1e, 0x05, 0x4a, 0xa6, 0x02, 0x99, 0x63, 0xdc, 0x47, 0x0f, 0x36, 0xd1, 0x09, 0x32,
	0xa6, 0xe7, 0x2c, 0x16, 0xec, 0xd5, 0xdc, 0x66, 0xb3, 0x5e, 0x19, 0x25, 0x67, 0x3e, 0xff, 0x38,
	0x53, 0x3c, 0x10, 0x30, 0x4c, 0xc7, 0x08, 0xcd, 0x4a, 0x69, 0x63, 0xd8, 0x83, 0x8f, 0xd0, 0xed,
	0x64, 0x4b, 0x56, 0xca, 0x12, 0x13, 0xdc, 0x85, 0x2d, 0x14, 0xc8, 0xb6, 0xac, 0x94, 0x59, 0xd1,
	0x42, 0x3f, 0x68, 0x20, 0xbc, 0x32, 0x42, 0xaf, 0x22, 0x7b, 0x52, 0xc8, 0xa2, 0x50, 0xb2, 0x19,
	0x6a, 0x85, 0xaf, 0x8e, 0xd0, 0xab, 0x23, 0x89, 0x1d, 0xca, 0x09, 0x6c, 0x6c, 0x71, 0x17, 0x73,
	0x41, 0x53, 0x78, 0xf0, 0xda, 0x08, 0xdd, 0x49, 0xb6, 0x46, 0xb4, 0xe2, 0x6a, 0x05, 0x2e, 0x8d,
	0xd2, 0xdd, 0x64, 0x67, 0x77, 0x5c, 0x10, 0x8d, 0xa6, 0x82, 0xe7, 0x47, 0x29, 0x25, 0x3b, 0xba,
	0xa0, 0xcd, 0x14, 0x83, 0x17, 0x46, 0xe9, 0x1e, 0x32, 0xda, 0xc5, 0xb2, 0xa7, 0x78, 0xa8, 0x42,
	0xf8, 0xdd, 0x28, 0xdd, 0x46, 0x86, 0xb3, 0x52, 0x3a, 0xa8, 0xe0, 0xc9, 0x71, 0x7a, 0x0d, 0xd9,
	0x1f, 0x0f, 0x66, 0x45, 0xa0, 0x6a, 0x28, 0xe7, 0x7d, 0x8e, 0x42, 0xcd, 0x07, 0x42, 0xa0, 0xab,
	0xd5, 0x3d, 0x35, 0x4e, 0x77, 0x45, 0xd9, 0x77, 0x50, 0x95, 0x95, 0x44, 0x56, 0x87, 0x1f, 0x8f,
	0x9b, 0xe8, 0x1c, 0x54, 0x37, 0x35, 0xb1, 0x89, 0xf0, 0x93, 0x71, 0x3a, 0x4a, 0x48, 0x8c, 0xd8,
	0x9c, 0xf9, 0xf0, 0x74, 0x0a, 0x28, 0x71, 0x51, 0x85, 0x8b, 0xe3, 0x26, 0x0a, 0x0d, 0x1c, 0x2e,
	0xc1, 0xb9, 0x0c, 0x1d, 0x23, 0xbb, 0xba, 0xe3, 0x82, 0x87, 0x71, 0x74, 0xe7, 0x33, 0x74, 0x3c,
	0xca, 0x6f, 0x8c, 0x97, 0x9a, 0x15, 0x9f, 0xbb, 0xc7, 0x70, 0x05, 0x2e, 0x64, 0xe8, 0x8e, 0x28,
	0xc1, 0xd9, 0x16, 0x0a, 0x05, 0x8f, 0x4d, 0x75, 0xb2, 0xa0, 0x87, 0x65, 0x7d, 0x5a, 0x24, 0x3c,
	0x3e, 0x65, 0xb4, 0x46, 0x60, 0x94, 0x84, 0xcf, 0x4f, 0x99, 0xc4, 0x7c, 0x98, 0xf9, 0xdc, 0x8b,
	0xb7, 0xea, 0xf4, 0x01, 0xe3, 0x23, 0xc1, 0xe2, 0x2c, 0xde, 0x7e, 0x80, 0x66, 0xc8, 0xee, 0x1e,
	0xa2, 0xb8, 0x12, 0xa2, 0xbf, 0x04, 0x77, 0x1c, 0x30, 0xcb, 0x94, 0x58, 0x95, 0x8b, 0x78, 0x99,
	0x2b, 0x33, 0x94, 0x90, 0xcd, 0xba, 0x14, 0x2a, 0xf0, 0xfb, 0x23, 0x26, 0x25, 0x76, 0x65, 0x5e,
	0x22, 0x53, 0x08, 0x7f, 0x48, 0x90, 0xc5, 0x86, 0xa7, 0x91, 0x17, 0x13, 0xc4, 0x46, 0x1f, 0x15,
	0xc2, 0x1f, 0x8f, 0x98, 0x24, 0xd8, 0x15, 0x27, 0x50, 0x35, 0x2e, 0xaa, 0xf1, 0x96, 0xff, 0xe9,
	0x88, 0x11, 0x68, 0x57, 0x0a, 0x42, 0xa1, 0x14, 0xcc, 0xcf, 0xea, 0x93, 0x09, 0x7f, 0x3e, 0x62,
	0xb2, 0x38, 0x2f, 0x57, 0x1a, 0x2a, 0x80, 0x67, 0x3f, 0x68, 0x02, 0x8e, 0xc7, 0x65, 0x5e, 0x85,
	0x2f, 0x1e, 0x35, 0x85, 0xd6, 0x85, 0x8a, 0x3c, 0xac, 0x33, 0xe5, 0xd6, 0xe0, 0x4b, 0x47, 0xcd,
	0xb2, 0x5d, 0x2a, 0x17, 0xc8, 0x3a, 0x53, 0xf0, 0xe5, 0xa3, 0x74, 0x6f, 0x54, 0xea, 0x31, 0x91,
	0x15, 0xae, 0xfe, 0x0b, 0xa7, 0x6f, 0xe8, 0x81, 0x6d, 0x8c, 0xe1, 0xd7, 0x6f, 0xe8, 0x71, 0xaa,
	0x37, 0xe7, 0xd2, 0xac, 0x29, 0xb5, 0x2e, 0x94, 0x47, 0x01, 0xcf, 0xcf, 0xf6, 0xf8, 0x3b, 0x86,
	0x2b, 0x36, 0xea, 0xe6, 0x02, 0x2f, 0xcc, 0x9a, 0xb8, 0xbb, 0x42, 0xdc, 0x1a, 0xe3, 0x02, 0x9e,
	0x98, 0x33, 0x59, 0x9e, 0x75, 0xdd, 0x22, 0x13, 0xac, 0x8a, 0x12, 0xbe, 0x92, 0xa3, 0x13, 0x64,
	0x6f, 0x0f, 0x56, 0x10, 0x5c, 0x39, 0x7a, 0x9d, 0xaf, 0xe6, 0x8c, 0xdb, 0x84, 0xb3, 0x2b, 0xf0,
	0xb5, 0x9c, 0xd9, 0xc5, 0x34, 0xaa, 0xe7, 0xc0, 0xd7, 0x07, 0x31, 0xb6, 0x0c, 0x1a, 0xf0, 0x8d,
	0x9c, 0x91, 0x9a, 0x66, 0x8a, 0xbc, 0x0a, 0xdf, 0x1c, 0x44, 0xd8, 0x5c, 0xc2, 0xb7, 0x72, 0x74,
	0x5f, 0xd4, 0x3a, 0x12, 0xc2, 0x09, 0xd4, 0xf1, 0x06, 0xea, 0xfe, 0xf4, 0xed, 0x9c, 0xc9, 0x5c,
	0x42, 0xce, 0x2f, 0x55, 0xe1, 0xce, 0xbc, 0xd9, 0x9b, 0x1e, 0xd8, 0x61, 0x75, 0x84, 0xbb, 0xf2,
	0x74, 0x8a, 0x4c, 0xac, 0xa6, 0x4a, 0x2c, 0x0c, 0x1b, 0x35, 0xa9, 0xbb, 0xdb, 0xdd, 0xf9, 0x3e,
	0xed, 0x7a, 0x2e, 0x2a, 0xb8, 0x27, 0x4f, 0xf7, 0x93, 0xf1, 0xd5, 0x4c, 0x5e, 0x36, 0xdc, 0xb2,
	0x6c, 0xc1, 0x99, 0x7c, 0x9f, 0x94, 0xb9, 0x40, 0xc1, 0x95, 0x7e, 0x29, 0x73, 0x81, 0x8a, 0xb2,
	0xf4, 0x66, 0xbe, 0x2f, 0xb2, 0xb9, 0x40, 0x65, 0x4f, 0x71, 0xdd, 0x0e, 0xde, 0xca, 0x9b, 0x2d,
	0x9a, 0x0f, 0x84, 0x62, 0xae, 0x5a, 0xc0, 0x9b, 0xe1, 0x1e, 0xa7, 0x53, 0x27, 0x5d, 0x4c, 0x17,
	0xc5, 0x19, 0xc7, 0xe8, 0xea, 0x81, 0x8b, 0x3c, 0x0c, 0x75, 0x43, 0xb8, 0xd7, 0x31, 0xfb, 0x9a,
	0xb0, 0x51, 0x87, 0xd2, 0xdc, 0x7d, 0x8e, 0x89, 0x35, 0xe1, 0xcc, 0x39, 0xbc, 0x7f, 0x95, 0xab,
	0x1b, 0x51, 0x54, 0x55, 0x0d, 0x1e, 0x70, 0x3a, 0x25, 0x19, 0xc3, 0x05, 0x1b, 0x1e, 0x74, 0x4c,
	0x57, 0x35, 0xd0, 0xac, 0xeb, 0x62, 0x43, 0x75, 0x5d, 0x7c, 0xce, 0xe9, 0xd4, 0x66, 0x9a, 0x46,
	0x0f, 0xce, 0x3a, 0x26, 0x7a, 0x43, 0x94, 0x15, 0x53, 0xcd, 0xd0, 0xb8, 0x7f, 0xc8, 0xa1, 0xd3,
	0x64, 0xdf, 0x6a, 0xb2, 0x10, 0x2e, 0xe0, 0xcd, 0x4d, 0x8c, 0x9a, 0xf9, 0xc3, 0x4e, 0xe7, 0x24,
	0x24, 0xd2, 0x11, 0x1e, 0x59, 0x15, 0x6c, 0x3c, 0x2f, 0xe6, 0xce, 0x39, 0x9d, 0x03, 0xdb, 0xab,
	0xa4, 0x88, 0x70, 0xde, 0x31, 0x4d, 0xae, 0x33, 0x0d, 0x51, 0xc0, 0x85, 0x55, 0x81, 0x75, 0x34,
	0xe4, 0x24, 0x47, 0xe1, 0xc1, 0xa3, 0x0e, 0x9d, 0x24, 0x57, 0xf5, 0xd3, 0x73, 0x7e, 0xe0, 0x2e,
	0xa3, 0x07, 0x8f, 0x0d, 0xe4, 0x0d, 0x5b, 0x44, 0x78, 0xdc, 0x31, 0xf7, 0x83, 0x2e, 0xd8, 0x7f,
	0x2f, 0x76, 0x76, 0x7b, 0xa9, 0xda, 0xd9, 0xb8, 0xff, 0x2c, 0x76, 0x72, 0xbd, 0x54, 0x35, 0x69,
	0xf9, 0x6f, 0xca, 0x2c, 0xbe, 0xba, 0x42, 0xf8, 0xdf, 0xa2, 0xd1, 0x1e, 0xf7, 0xe6, 0x59, 0x9f,
	0xb3, 0x10, 0x5e, 0x3a, 0x69, 0x0e, 0x7e, 0x0a, 0xd4, 0x9d, 0xe2, 0x2f, 0x27, 0x4d, 0xf5, 0xa7,
	0x70, 0x27, 0x98, 0x67, 0xc2, 0xd3, 0x6d, 0x18, 0x43, 0xb8, 0x3c, 0xc0, 0x20, 0x6e, 0xab, 0xe6,
	0xb2, 0x7e, 0xf9, 0x64, 0x92, 0xf7, 0x16, 0xca, 0x30, 0x6e, 0xd1, 0xcf, 0x61, 0xa7, 0xd1, 0xa4,
	0xd0, 0x82, 0x0d, 0xbf, 0xc0, 0x24, 0xe7, 0x5d, 0xfc, 0x04, 0x57, 0x3e, 0xc2, 0x2f, 0x07, 0x52,
	0x41, 0x83, 0xbb, 0xf0, 0xab, 0x41, 0x54, 0x41, 0x2c, 0x05, 0x21, 0xfc, 0x1a, 0x93, 0x8a, 0xed,
	0x52, 0xc7, 0xb8, 0xf0, 0xe0, 0x37, 0x98, 0xd4, 0x53, 0x97, 0x29, 0x62, 0xbd, 0x82, 0x32, 0x84,
	0xdf, 0x22, 0x7d, 0x07, 0x99, 0x1a, 0x48, 0x16, 0xc2, 0xe3, 0x02, 0x4f, 0x04, 0xc7, 0x05, 0xc2,
	0x99, 0xea, 0x80, 0x25, 0x0a, 0x61, 0x5e, 0x06, 0xcd, 0x06, 0xdc, 0x5b, 0x4d, 0x4a, 0x2b, 0x45,
	0xe6, 0x9a, 0xbe, 0x0f, 0xf7, 0x55, 0x93, 0x13, 0x98, 0xe2, 0x62, 0x07, 0x70, 0x7f, 0x35, 0x29,
	0xa4, 0x2e, 0x9b, 0x47, 0x65, 0xe8, 0x07, 0xd6, 0xa0, 0x8f, 0xdf, 0x22, 0xb4, 0xf4, 0x07, 0x07,
	0xf9, 0x35, 0x53, 0x9f, 0xe6, 0x03, 0xfc, 0x9a, 0xb0, 0x6c, 0xb8, 0xc8, 0x93, 0x43, 0xb4, 0x8a,
	0x8d, 0x8b, 0x11, 0x9e, 0xe1, 0xe6, 0x59, 0xd2, 0x6f, 0x61, 0xaa, 0x16, 0x7e, 0xca, 0xe9, 0x75,
	0x64, 0x72, 0x3d, 0x93, 0x82, 0x0d, 0xcf, 0x72, 0xfa, 0x2e, 0x72, 0xcd, 0x5a, 0x46, 0x49, 0x99,
	0xfc, 0x8c, 0xd3, 0x83, 0xe4, 0xba, 0xb7, 0xb5, 0x2b, 0xd8, 0xf0, 0xf3, 0xb5, 0xb5, 0x17, 0x44,
	0x8b, 0x2b, 0x84, 0x4f, 0x2d, 0x9b, 0x4a, 0xed, 0xb7, 0xb8, 0x11, 0x59, 0x0b, 0xe1, 0xd3, 0xcb,
	0xf4, 0x5a, 0x72, 0xf5, 0xe0, 0xf0, 0x51, 0xc5, 0x45, 0xf8, 0x99, 0xf5, 0x6d, 0xa2, 0x6a, 0x3c,
	0xbd, 0xae, 0x4d, 0xb4, 0x4b, 0x70, 0xfb, 0xda, 0x62, 0xa2, 0x13, 0x0f, 0x77, 0x2c, 0xaf, 0x99,
	0xe9, 0x45, 0x51, 0x89, 0x4c, 0x3e, 0xbb, 0x9c, 0x34, 0x8c, 0x55, 0x26, 0x0b, 0xc8, 0x3c, 0xb8,
	0x73, 0x6d, 0x1f, 0x1f, 0x91, 0x3a, 0x23, 0x77, 0xad, 0xbd, 0x40, 0xd4, 0xd0, 0xee, 0x5e, 0xa6,
	0xdb, 0xa3, 0x57, 0x7c, 0xa9, 0x19, 0xd6, 0xe0, 0x3b, 0x75, 0x53, 0xec, 0x7a, 0xb4, 0x28, 0x96,
	0x45, 0x70, 0x8b, 0x28, 0xc9, 0xa0, 0xc5, 0xf5, 0x03, 0xef, 0xbb, 0x75, 0x73, 0xca, 0x35, 0xd9,
	0x45, 0xbf, 0x57, 0x37, 0x95, 0xaa, 0xd1, 0x82, 0x68, 0xe9, 0xc7, 0x5b, 0xfc, 0xa0, 0x5c, 0xe2,
	0x28, 0xe1, 0xfb, 0x75, 0x23, 0x30, 0x45, 0x97, 0x51, 0xb6, 0xa2, 0xcd, 0x5d, 0xe2, 0x55, 0x78,
	0x22, 0xed, 0xd2, 0xb4, 0xb9, 0xb9, 0xa6, 0xf0, 0x7c, 0x2c, 0x78, 0xf0, 0x83, 0xba, 0x51, 0x9f,
	0xd2, 0x63, 0xa3, 0xbe, 0x44, 0xe2, 0xda, 0xf9, 0x61, 0x7a, 0xf5, 0x39, 0x19, 0x30, 0xcf, 0x65,
	0xa1, 0x4a, 0xb9, 0xff, 0x51, 0xdd, 0xdc, 0x34, 0x29, 0xf7, 0x27, 0x56, 0x1a, 0x08, 0x4f, 0xd6,
	0xcd, 0x5d, 0xd6, 0x33, 0x13, 0x9e, 0xea, 0xc4, 0xe8, 0x04, 0x7a, 0x05, 0x37, 0x76, 0x73, 0xb6,
	0x69, 0x64, 0xa4, 0xd1, 0x22, 0x93, 0x61, 0x8d, 0xf9, 0xb9, 0xf9, 0x22, 0x3c, 0xd4, 0x34, 0x32,
	0x06, 0xf0, 0xb3, 0x25, 0xa7, 0x0c, 0x0f, 0xaf, 0x63, 0x50, 0xbc, 0xe9, 0xc4, 0x09, 0x78, 0xa4,
	0x69, 0x4a, 0x3b, 0x6d, 0xb0, 0x28, 0xea, 0x89, 0x8f, 0x73, 0xcd, 0xce, 0xd7, 0xc2, 0x20, 0x8b,
	0xc8, 0xcb, 0xf9, 0x75, 0x4d, 0x22, 0x3f, 0x17, 0x9a, 0x26, 0xdb, 0x69, 0x93, 0x05, 0x74, 0x91,
	0xb7, 0x10, 0x1e, 0x6d, 0x9a, 0x5a, 0x88, 0xde, 0x77, 0x9f, 0xb8, 0xd5, 0x74, 0x55, 0x3d, 0xd2,
	0x59, 0x8a, 0xa6, 0x94, 0x9b, 0x15, 0xf8, 0xe4, 0xad, 0xf4, 0x9d, 0x51, 0xe3, 0xd4, 0xcc, 0x87,
	0x98, 0xde, 0xab, 0x74, 0x75, 0x99, 0x17, 0xf7, 0xc5, 0xdb, 0xac, 0x75, 0xcd, 0xcc, 0x91, 0x7d,
	0xe6, 0x36, 0x8b, 0xee, 0x8c, 0xbe, 0x2d, 0xe6, 0x6b, 0x4d, 0xb1, 0x0c, 0xaf, 0xb4, 0x2d, 0x3a,
	0x16, 0xbf, 0x32, 0xf4, 0x78, 0x8e, 0x79, 0x05, 0xe1, 0xe1, 0x29, 0x78, 0xb5, 0x6d, 0xd1, 0xbd,
	0xf1, 0x25, 0x63, 0xf0, 0xe8, 0x13, 0xe3, 0xb5, 0xb6, 0x45, 0x33, 0xf1, 0x5b, 0xc2, 0xc0, 0x65,
	0x9f, 0xbb, 0x58, 0xb0, 0xe1, 0xaf, 0x6d, 0x8b, 0xee, 0x8f, 0x3b, 0x77, 0x9a, 0x31, 0x8f, 0x96,
	0xd7, 0xdb, 0x16, 0x9d, 0x8c, 0x3b, 0xac, 0x66, 0x23, 0xca, 0x09, 0xd4, 0x7c, 0xa0, 0xbf, 0x5e,
	0x15, 0xc2, 0xdf, 0xfa, 0x64, 0x44, 0x26, 0xf0, 0x46, 0xdb, 0xa2, 0x53, 0xf1, 0x81, 0xd2, 0xb8,
	0xcd, 0xb0, 0x1e, 0x88, 0xb2, 0x0a, 0x24, 0xab, 0x62, 0x89, 0xa9, 0x1a, 0xfc, 0xbd, 0x6d, 0xd1,
	0xe9, 0xf8, 0x48, 0x26, 0x06, 0xfa, 0x65, 0xaa, 0xe5, 0x56, 0xf4, 0x63, 0xf2, 0x4a, 0xdb, 0xa2,
	0xbb, 0xe3, 0x1b, 0xbb, 0xeb, 0x1a, 0xde, 0xec, 0x0d, 0x2f, 0xfa, 0xf4, 0x0a, 0x6b, 0xf0, 0x56,
	0xdb, 0xa2, 0x34, 0xbe, 0xf0, 0x23, 0x5b, 0xdd, 0xc3, 0xfe, 0xd1, 0xb6, 0xe8, 0xbe, 0xb8, 0xfb,
	0x6b, 0x2c, 0xc7, 0x45, 0xac, 0x6d, 0x6e, 0xa5, 0x60, 0xc3, 0x3f, 0xfb, 0xc9, 0x59, 0xdf, 0x8f,
	0xf8, 0x10, 0xfe, 0xd5, 0xb6, 0x26, 0x36, 0x9d, 0xfe, 0xc2, 0xe4, 0x86, 0xb9, 0xf7, 0x3c, 0x77,
	0x79, 0xd2, 0xba, 0x74, 0x79, 0xd2, 0x7a, 0xe9, 0xf2, 0xa4, 0x75, 0xf6, 0xe5, 0xc9, 0x0d, 0x1f,
	0x9d, 0x8c, 0x7f, 0x84, 0x50, 0xe8, 0xd6, 0x0e, 0xb9, 0x81, 0xc4, 0x43, 0xbd, 0x3f, 0xda, 0x54,
	0x86, 0xa3, 0x9f, 0x61, 0xde, 0xfb, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0xe9, 0x28, 0xf5,
	0xcd, 0x11, 0x00, 0x00,
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Caller) > 0 {
		i -= len(m.Caller)
		copy(dAtA[i:], m.Caller)
		i = encodeVarintErrors(dAtA, i, uint64(len(m.Caller)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintErrors(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Parent != nil {
		{
			size, err := m.Parent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintErrors(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Placeholders) > 0 {
		for k := range m.Placeholders {
			v := m.Placeholders[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintErrors(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintErrors(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintErrors(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ExtendedCodes) > 0 {
		dAtA3 := make([]byte, len(m.ExtendedCodes)*10)
		var j2 int
		for _, num := range m.ExtendedCodes {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintErrors(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintErrors(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintErrors(dAtA []byte, offset int, v uint64) int {
	offset -= sovErrors(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovErrors(uint64(m.Code))
	}
	if len(m.ExtendedCodes) > 0 {
		l = 0
		for _, e := range m.ExtendedCodes {
			l += sovErrors(uint64(e))
		}
		n += 1 + sovErrors(uint64(l)) + l
	}
	if len(m.Placeholders) > 0 {
		for k, v := range m.Placeholders {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovErrors(uint64(len(k))) + 1 + len(v) + sovErrors(uint64(len(v)))
			n += mapEntrySize + 1 + sovErrors(uint64(mapEntrySize))
		}
	}
	if m.Parent != nil {
		l = m.Parent.Size()
		n += 1 + l + sovErrors(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovErrors(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErrors(x uint64) (n int) {
	return sovErrors(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v Code
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Code(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtendedCodes = append(m.ExtendedCodes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErrors
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthErrors
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ExtendedCodes) == 0 {
					m.ExtendedCodes = make([]Code, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Code
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErrors
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Code(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtendedCodes = append(m.ExtendedCodes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedCodes", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Placeholders == nil {
				m.Placeholders = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErrors
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthErrors
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthErrors
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErrors
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthErrors
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthErrors
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipErrors(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthErrors
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Placeholders[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &Metadata{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrors
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrors(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErrors
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthErrors
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipErrors(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthErrors
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthErrors = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrors   = fmt.Errorf("proto: integer overflow")
)
