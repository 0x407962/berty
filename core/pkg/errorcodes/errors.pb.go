// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/errorcodes/errors.proto

package errorcodes // import "berty.tech/core/pkg/errorcodes"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Code int32

const (
	ErrUndefined                    Code = 0
	OK                              Code = 1
	ErrBase                         Code = 2
	ErrUnimplemented                Code = 3
	ErrRandomGeneratorFailed        Code = 4
	ErrUUIDGeneratorFailed          Code = 5
	ErrSerialization                Code = 6
	ErrDeserialization              Code = 7
	ErrPanic                        Code = 8
	ErrEnvelope                     Code = 1000
	ErrEnvelopeUntrusted            Code = 1001
	ErrEnvelopeNoDeviceFound        Code = 1002
	ErrEntity                       Code = 2000
	ErrEntityInput                  Code = 2001
	ErrEntityData                   Code = 2002
	ErrEntityExists                 Code = 2003
	ErrNet                          Code = 3000
	ErrNetAnotherClientConnected    Code = 3001
	ErrNetStream                    Code = 3002
	ErrNetQueue                     Code = 3003
	ErrNetDial                      Code = 3004
	ErrNetPing                      Code = 3005
	ErrNetP2P                       Code = 3100
	ErrNetP2PIdentity               Code = 3101
	ErrNetP2PPublicKey              Code = 3102
	ErrEvent                        Code = 4000
	ErrEventSender                  Code = 4001
	ErrEventData                    Code = 4002
	ErrValidation                   Code = 5000
	ErrValidationInput              Code = 5001
	ErrValidationMyself             Code = 5002
	ErrPagination                   Code = 6000
	ErrDb                           Code = 7000
	ErrDbCreate                     Code = 7001
	ErrDbUpdate                     Code = 7002
	ErrDbDelete                     Code = 7003
	ErrDbNothingFound               Code = 7004
	ErrCrypto                       Code = 8000
	ErrCryptoSig                    Code = 8100
	ErrCryptoSigMismatch            Code = 8101
	ErrCryptoSigFormat              Code = 8102
	ErrCryptoEncrypt                Code = 8200
	ErrCryptoDecrypt                Code = 8300
	ErrCryptoKey                    Code = 8400
	ErrCryptoKeyGen                 Code = 8401
	ErrCryptoKeyDecode              Code = 8402
	ErrCryptoSigchain               Code = 8500
	ErrAccManager                   Code = 9000
	ErrAccManagerInitNode           Code = 9001
	ErrAccManagerDb                 Code = 9002
	ErrAccManagerDbInit             Code = 9003
	ErrAccManagerDbDrop             Code = 9004
	ErrAccManagerDbMig              Code = 9005
	ErrAccManagerDbDir              Code = 9006
	ErrAccManagerNotOpened          Code = 9007
	ErrAccManagerCfg                Code = 9100
	ErrAccManagerCfgName            Code = 9101
	ErrAccManagerCfgPassphrase      Code = 9102
	ErrAccManagerCfgNet             Code = 9104
	ErrAccManagerCfgGrpcSrv         Code = 9105
	ErrAccManagerBot                Code = 9200
	ErrAccManagerBotInit            Code = 9201
	ErrAccManagerBotExited          Code = 9202
	ErrContactReq                   Code = 10000
	ErrContactReqKey                Code = 10001
	ErrContactReqKeyMissing         Code = 10002
	ErrContactReqExisting           Code = 10003
	ErrContactReqMyself             Code = 10004
	ErrCfg                          Code = 11000
	ErrCfgMissing                   Code = 11001
	ErrCfgMyself                    Code = 11002
	ErrCfgDevices                   Code = 11003
	ErrSenderAlias                  Code = 12000
	ErrSenderAliasGen               Code = 12001
	ErrSenderAliasNoCandidates      Code = 12002
	ErrSenderAliasUpdateFailed      Code = 12003
	ErrConversation                 Code = 13000
	ErrConversationMembers          Code = 13001
	ErrConversationNotEnoughMembers Code = 13002
	ErrPush                         Code = 14000
	ErrPushUnknownProvider          Code = 14001
	ErrPushProvider                 Code = 14002
	ErrPushInvalidIdentifier        Code = 14003
	ErrPushInvalidServerConfig      Code = 14004
	ErrPushMissingBundleId          Code = 14005
	ErrPushUnknownDestination       Code = 14006
	ErrPushBroadcastIdentifier      Code = 14007
	ErrPushInvalidType              Code = 14008
	ErrPushBroadcast                Code = 14009
	ErrNotification                 Code = 15000
	ErrNotificationMarshalFCM       Code = 15001
	ErrNotificationMarshalAPNS      Code = 15002
	ErrNotificationMarshalMQTT      Code = 15003
	ErrNotificationUnmarshalFCM     Code = 15004
	ErrNotificationUnmarshalAPNS    Code = 15005
	ErrNotificationUnmarshalMQTT    Code = 15006
	ErrNode                         Code = 16000
	ErrNodePushNotifSub             Code = 16001
)

var Code_name = map[int32]string{
	0:     "ErrUndefined",
	1:     "OK",
	2:     "ErrBase",
	3:     "ErrUnimplemented",
	4:     "ErrRandomGeneratorFailed",
	5:     "ErrUUIDGeneratorFailed",
	6:     "ErrSerialization",
	7:     "ErrDeserialization",
	8:     "ErrPanic",
	1000:  "ErrEnvelope",
	1001:  "ErrEnvelopeUntrusted",
	1002:  "ErrEnvelopeNoDeviceFound",
	2000:  "ErrEntity",
	2001:  "ErrEntityInput",
	2002:  "ErrEntityData",
	2003:  "ErrEntityExists",
	3000:  "ErrNet",
	3001:  "ErrNetAnotherClientConnected",
	3002:  "ErrNetStream",
	3003:  "ErrNetQueue",
	3004:  "ErrNetDial",
	3005:  "ErrNetPing",
	3100:  "ErrNetP2P",
	3101:  "ErrNetP2PIdentity",
	3102:  "ErrNetP2PPublicKey",
	4000:  "ErrEvent",
	4001:  "ErrEventSender",
	4002:  "ErrEventData",
	5000:  "ErrValidation",
	5001:  "ErrValidationInput",
	5002:  "ErrValidationMyself",
	6000:  "ErrPagination",
	7000:  "ErrDb",
	7001:  "ErrDbCreate",
	7002:  "ErrDbUpdate",
	7003:  "ErrDbDelete",
	7004:  "ErrDbNothingFound",
	8000:  "ErrCrypto",
	8100:  "ErrCryptoSig",
	8101:  "ErrCryptoSigMismatch",
	8102:  "ErrCryptoSigFormat",
	8200:  "ErrCryptoEncrypt",
	8300:  "ErrCryptoDecrypt",
	8400:  "ErrCryptoKey",
	8401:  "ErrCryptoKeyGen",
	8402:  "ErrCryptoKeyDecode",
	8500:  "ErrCryptoSigchain",
	9000:  "ErrAccManager",
	9001:  "ErrAccManagerInitNode",
	9002:  "ErrAccManagerDb",
	9003:  "ErrAccManagerDbInit",
	9004:  "ErrAccManagerDbDrop",
	9005:  "ErrAccManagerDbMig",
	9006:  "ErrAccManagerDbDir",
	9007:  "ErrAccManagerNotOpened",
	9100:  "ErrAccManagerCfg",
	9101:  "ErrAccManagerCfgName",
	9102:  "ErrAccManagerCfgPassphrase",
	9104:  "ErrAccManagerCfgNet",
	9105:  "ErrAccManagerCfgGrpcSrv",
	9200:  "ErrAccManagerBot",
	9201:  "ErrAccManagerBotInit",
	9202:  "ErrAccManagerBotExited",
	10000: "ErrContactReq",
	10001: "ErrContactReqKey",
	10002: "ErrContactReqKeyMissing",
	10003: "ErrContactReqExisting",
	10004: "ErrContactReqMyself",
	11000: "ErrCfg",
	11001: "ErrCfgMissing",
	11002: "ErrCfgMyself",
	11003: "ErrCfgDevices",
	12000: "ErrSenderAlias",
	12001: "ErrSenderAliasGen",
	12002: "ErrSenderAliasNoCandidates",
	12003: "ErrSenderAliasUpdateFailed",
	13000: "ErrConversation",
	13001: "ErrConversationMembers",
	13002: "ErrConversationNotEnoughMembers",
	14000: "ErrPush",
	14001: "ErrPushUnknownProvider",
	14002: "ErrPushProvider",
	14003: "ErrPushInvalidIdentifier",
	14004: "ErrPushInvalidServerConfig",
	14005: "ErrPushMissingBundleId",
	14006: "ErrPushUnknownDestination",
	14007: "ErrPushBroadcastIdentifier",
	14008: "ErrPushInvalidType",
	14009: "ErrPushBroadcast",
	15000: "ErrNotification",
	15001: "ErrNotificationMarshalFCM",
	15002: "ErrNotificationMarshalAPNS",
	15003: "ErrNotificationMarshalMQTT",
	15004: "ErrNotificationUnmarshalFCM",
	15005: "ErrNotificationUnmarshalAPNS",
	15006: "ErrNotificationUnmarshalMQTT",
	16000: "ErrNode",
	16001: "ErrNodePushNotifSub",
}
var Code_value = map[string]int32{
	"ErrUndefined":                    0,
	"OK":                              1,
	"ErrBase":                         2,
	"ErrUnimplemented":                3,
	"ErrRandomGeneratorFailed":        4,
	"ErrUUIDGeneratorFailed":          5,
	"ErrSerialization":                6,
	"ErrDeserialization":              7,
	"ErrPanic":                        8,
	"ErrEnvelope":                     1000,
	"ErrEnvelopeUntrusted":            1001,
	"ErrEnvelopeNoDeviceFound":        1002,
	"ErrEntity":                       2000,
	"ErrEntityInput":                  2001,
	"ErrEntityData":                   2002,
	"ErrEntityExists":                 2003,
	"ErrNet":                          3000,
	"ErrNetAnotherClientConnected":    3001,
	"ErrNetStream":                    3002,
	"ErrNetQueue":                     3003,
	"ErrNetDial":                      3004,
	"ErrNetPing":                      3005,
	"ErrNetP2P":                       3100,
	"ErrNetP2PIdentity":               3101,
	"ErrNetP2PPublicKey":              3102,
	"ErrEvent":                        4000,
	"ErrEventSender":                  4001,
	"ErrEventData":                    4002,
	"ErrValidation":                   5000,
	"ErrValidationInput":              5001,
	"ErrValidationMyself":             5002,
	"ErrPagination":                   6000,
	"ErrDb":                           7000,
	"ErrDbCreate":                     7001,
	"ErrDbUpdate":                     7002,
	"ErrDbDelete":                     7003,
	"ErrDbNothingFound":               7004,
	"ErrCrypto":                       8000,
	"ErrCryptoSig":                    8100,
	"ErrCryptoSigMismatch":            8101,
	"ErrCryptoSigFormat":              8102,
	"ErrCryptoEncrypt":                8200,
	"ErrCryptoDecrypt":                8300,
	"ErrCryptoKey":                    8400,
	"ErrCryptoKeyGen":                 8401,
	"ErrCryptoKeyDecode":              8402,
	"ErrCryptoSigchain":               8500,
	"ErrAccManager":                   9000,
	"ErrAccManagerInitNode":           9001,
	"ErrAccManagerDb":                 9002,
	"ErrAccManagerDbInit":             9003,
	"ErrAccManagerDbDrop":             9004,
	"ErrAccManagerDbMig":              9005,
	"ErrAccManagerDbDir":              9006,
	"ErrAccManagerNotOpened":          9007,
	"ErrAccManagerCfg":                9100,
	"ErrAccManagerCfgName":            9101,
	"ErrAccManagerCfgPassphrase":      9102,
	"ErrAccManagerCfgNet":             9104,
	"ErrAccManagerCfgGrpcSrv":         9105,
	"ErrAccManagerBot":                9200,
	"ErrAccManagerBotInit":            9201,
	"ErrAccManagerBotExited":          9202,
	"ErrContactReq":                   10000,
	"ErrContactReqKey":                10001,
	"ErrContactReqKeyMissing":         10002,
	"ErrContactReqExisting":           10003,
	"ErrContactReqMyself":             10004,
	"ErrCfg":                          11000,
	"ErrCfgMissing":                   11001,
	"ErrCfgMyself":                    11002,
	"ErrCfgDevices":                   11003,
	"ErrSenderAlias":                  12000,
	"ErrSenderAliasGen":               12001,
	"ErrSenderAliasNoCandidates":      12002,
	"ErrSenderAliasUpdateFailed":      12003,
	"ErrConversation":                 13000,
	"ErrConversationMembers":          13001,
	"ErrConversationNotEnoughMembers": 13002,
	"ErrPush":                         14000,
	"ErrPushUnknownProvider":          14001,
	"ErrPushProvider":                 14002,
	"ErrPushInvalidIdentifier":        14003,
	"ErrPushInvalidServerConfig":      14004,
	"ErrPushMissingBundleId":          14005,
	"ErrPushUnknownDestination":       14006,
	"ErrPushBroadcastIdentifier":      14007,
	"ErrPushInvalidType":              14008,
	"ErrPushBroadcast":                14009,
	"ErrNotification":                 15000,
	"ErrNotificationMarshalFCM":       15001,
	"ErrNotificationMarshalAPNS":      15002,
	"ErrNotificationMarshalMQTT":      15003,
	"ErrNotificationUnmarshalFCM":     15004,
	"ErrNotificationUnmarshalAPNS":    15005,
	"ErrNotificationUnmarshalMQTT":    15006,
	"ErrNode":                         16000,
	"ErrNodePushNotifSub":             16001,
}

func (x Code) String() string {
	return proto.EnumName(Code_name, int32(x))
}
func (Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_errors_fbe34057d714d452, []int{0}
}

// Metadata is designed to be used as grpc status detail
type Metadata struct {
	// unique enum code number to identify the error
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=berty.errorcodes.Code" json:"code,omitempty"`
	// extended code (see hierarchy.go)
	ExtendedCodes []Code `protobuf:"varint,2,rep,packed,name=extended_codes,json=extendedCodes,enum=berty.errorcodes.Code" json:"extended_codes,omitempty"`
	// used for templated errors (i18n)
	Placeholders map[string]string `protobuf:"bytes,3,rep,name=placeholders" json:"placeholders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// nested/wraped errors
	Parent *Metadata `protobuf:"bytes,4,opt,name=parent" json:"parent,omitempty"`
	// this field will be a duplicate for the top-level error and then skipped,
	// but this field is particularly useful to get debugging info when looking up parent errors.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// caller is the first line of a stacktrace.
	Caller               string   `protobuf:"bytes,6,opt,name=caller,proto3" json:"caller,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_errors_fbe34057d714d452, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(dst, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetCode() Code {
	if m != nil {
		return m.Code
	}
	return ErrUndefined
}

func (m *Metadata) GetExtendedCodes() []Code {
	if m != nil {
		return m.ExtendedCodes
	}
	return nil
}

func (m *Metadata) GetPlaceholders() map[string]string {
	if m != nil {
		return m.Placeholders
	}
	return nil
}

func (m *Metadata) GetParent() *Metadata {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Metadata) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Metadata) GetCaller() string {
	if m != nil {
		return m.Caller
	}
	return ""
}

func init() {
	proto.RegisterType((*Metadata)(nil), "berty.errorcodes.Metadata")
	proto.RegisterMapType((map[string]string)(nil), "berty.errorcodes.Metadata.PlaceholdersEntry")
	proto.RegisterEnum("berty.errorcodes.Code", Code_name, Code_value)
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrors(dAtA, i, uint64(m.Code))
	}
	if len(m.ExtendedCodes) > 0 {
		dAtA2 := make([]byte, len(m.ExtendedCodes)*10)
		var j1 int
		for _, num := range m.ExtendedCodes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintErrors(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Placeholders) > 0 {
		for k := range m.Placeholders {
			dAtA[i] = 0x1a
			i++
			v := m.Placeholders[k]
			mapSize := 1 + len(k) + sovErrors(uint64(len(k))) + 1 + len(v) + sovErrors(uint64(len(v)))
			i = encodeVarintErrors(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintErrors(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintErrors(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Parent != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintErrors(dAtA, i, uint64(m.Parent.Size()))
		n3, err := m.Parent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintErrors(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Caller) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintErrors(dAtA, i, uint64(len(m.Caller)))
		i += copy(dAtA[i:], m.Caller)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintErrors(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovErrors(uint64(m.Code))
	}
	if len(m.ExtendedCodes) > 0 {
		l = 0
		for _, e := range m.ExtendedCodes {
			l += sovErrors(uint64(e))
		}
		n += 1 + sovErrors(uint64(l)) + l
	}
	if len(m.Placeholders) > 0 {
		for k, v := range m.Placeholders {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovErrors(uint64(len(k))) + 1 + len(v) + sovErrors(uint64(len(v)))
			n += mapEntrySize + 1 + sovErrors(uint64(mapEntrySize))
		}
	}
	if m.Parent != nil {
		l = m.Parent.Size()
		n += 1 + l + sovErrors(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	l = len(m.Caller)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovErrors(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozErrors(x uint64) (n int) {
	return sovErrors(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (Code(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v Code
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Code(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtendedCodes = append(m.ExtendedCodes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErrors
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ExtendedCodes) == 0 {
					m.ExtendedCodes = make([]Code, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Code
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErrors
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Code(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtendedCodes = append(m.ExtendedCodes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedCodes", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Placeholders == nil {
				m.Placeholders = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErrors
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthErrors
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErrors
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthErrors
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipErrors(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthErrors
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Placeholders[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &Metadata{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrors(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthErrors
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipErrors(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthErrors = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrors   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pkg/errorcodes/errors.proto", fileDescriptor_errors_fbe34057d714d452) }

var fileDescriptor_errors_fbe34057d714d452 = []byte{
	// 1441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0x4b, 0x6c, 0x14, 0xc9,
	0x19, 0x66, 0xfc, 0x84, 0xb2, 0xb1, 0x7f, 0x0a, 0x63, 0x0f, 0x86, 0xd8, 0x4e, 0x14, 0x09, 0x0b,
	0x25, 0x76, 0xe4, 0x48, 0x28, 0x8a, 0x94, 0x18, 0xcf, 0x53, 0x16, 0x9a, 0x66, 0xf0, 0x30, 0x39,
	0x44, 0x42, 0x51, 0x4d, 0xf7, 0x3f, 0x3d, 0x2d, 0xba, 0xab, 0x26, 0xd5, 0xd5, 0x13, 0x26, 0x12,
	0x52, 0x72, 0x23, 0x51, 0x12, 0x41, 0x92, 0x03, 0x49, 0x00, 0xe5, 0x89, 0xf2, 0x7e, 0x92, 0x04,
	0xf2, 0x90, 0x72, 0x24, 0x7b, 0x02, 0xf6, 0xb2, 0xaf, 0x03, 0x6b, 0x2e, 0xbb, 0xab, 0xd5, 0x8a,
	0xdd, 0xd3, 0x3e, 0x2e, 0xab, 0xea, 0xae, 0x79, 0xd9, 0x5e, 0x4e, 0x33, 0xff, 0xf7, 0xfd, 0xf5,
	0xbf, 0xeb, 0xaf, 0x26, 0xc7, 0x9a, 0x17, 0xdd, 0x55, 0x94, 0x52, 0x48, 0x5b, 0x38, 0x18, 0x26,
	0x7f, 0xc3, 0x95, 0xa6, 0x14, 0x4a, 0x50, 0xa8, 0xa1, 0x54, 0xed, 0x95, 0x1e, 0x3d, 0xff, 0x69,
	0xd7, 0x53, 0x8d, 0xa8, 0xb6, 0x62, 0x8b, 0x60, 0xd5, 0x15, 0xae, 0x58, 0x8d, 0x15, 0x6b, 0x51,
	0x3d, 0x96, 0x62, 0x21, 0xfe, 0x97, 0x18, 0xf8, 0xc4, 0x5b, 0x43, 0x64, 0x7f, 0x09, 0x15, 0x73,
	0x98, 0x62, 0xf4, 0x24, 0x19, 0xd1, 0x46, 0xd2, 0xa9, 0xa5, 0xd4, 0xf2, 0xd4, 0xda, 0xec, 0xca,
	0x4e, 0xe3, 0x2b, 0x59, 0xe1, 0xe0, 0x56, 0xac, 0x43, 0xbf, 0x40, 0xa6, 0xf0, 0x92, 0x42, 0xee,
	0xa0, 0xf3, 0x95, 0x98, 0x4c, 0x0f, 0x2d, 0x0d, 0x3f, 0xe3, 0xd4, 0xc1, 0x8e, 0xb6, 0x96, 0x42,
	0x5a, 0x26, 0x93, 0x4d, 0x9f, 0xd9, 0xd8, 0x10, 0xbe, 0x83, 0x32, 0x4c, 0x0f, 0x2f, 0x0d, 0x2f,
	0x4f, 0xac, 0x7d, 0x6a, 0xf7, 0xe1, 0x4e, 0x70, 0x2b, 0xe5, 0x3e, 0xf5, 0x3c, 0x57, 0xb2, 0xbd,
	0x35, 0x60, 0x81, 0xae, 0x91, 0xb1, 0x26, 0x93, 0xc8, 0x55, 0x7a, 0x64, 0x29, 0xb5, 0x3c, 0xb1,
	0x36, 0xff, 0xd1, 0xb6, 0xb6, 0x8c, 0x26, 0x4d, 0x93, 0xf1, 0x00, 0xc3, 0x90, 0xb9, 0x98, 0x1e,
	0x5d, 0x4a, 0x2d, 0x1f, 0xd8, 0xea, 0x88, 0x74, 0x96, 0x8c, 0xd9, 0xcc, 0xf7, 0x51, 0xa6, 0xc7,
	0x62, 0xc2, 0x48, 0xf3, 0xeb, 0xe4, 0xd0, 0xae, 0x40, 0x28, 0x90, 0xe1, 0x8b, 0xd8, 0x8e, 0xcb,
	0x76, 0x60, 0x4b, 0xff, 0xa5, 0x33, 0x64, 0xb4, 0xc5, 0xfc, 0x08, 0xd3, 0x43, 0x31, 0x96, 0x08,
	0x9f, 0x1f, 0xfa, 0x5c, 0xea, 0xe4, 0x6d, 0x4a, 0x46, 0x74, 0x09, 0x28, 0x90, 0xc9, 0xbc, 0x94,
	0x55, 0xee, 0x60, 0xdd, 0xe3, 0xe8, 0xc0, 0x3e, 0x3a, 0x46, 0x86, 0xce, 0x9e, 0x81, 0x14, 0x9d,
	0x20, 0xe3, 0x79, 0x29, 0x33, 0x2c, 0x44, 0x18, 0xa2, 0x33, 0x04, 0x62, 0x35, 0x2f, 0x68, 0xfa,
	0x18, 0x20, 0x57, 0xe8, 0xc0, 0x30, 0x3d, 0x4e, 0xd2, 0x79, 0x29, 0xb7, 0x18, 0x77, 0x44, 0x50,
	0x44, 0x8e, 0x92, 0x29, 0x21, 0x0b, 0xcc, 0xf3, 0xd1, 0x81, 0x11, 0x3a, 0x4f, 0x66, 0xf5, 0x99,
	0xea, 0x66, 0x6e, 0x27, 0x37, 0x6a, 0xec, 0x55, 0x50, 0x7a, 0xcc, 0xf7, 0xbe, 0xce, 0x94, 0x27,
	0x38, 0x8c, 0xd1, 0x59, 0x42, 0xf3, 0x52, 0xe6, 0x30, 0x1c, 0xc0, 0xc7, 0xe9, 0x24, 0xd9, 0x9f,
	0x97, 0xb2, 0xcc, 0xb8, 0x67, 0xc3, 0x7e, 0x0a, 0x64, 0x22, 0x2f, 0x65, 0x9e, 0xb7, 0xd0, 0x17,
	0x4d, 0x84, 0xd7, 0xc6, 0xe9, 0x51, 0x32, 0xd3, 0x87, 0x54, 0xb9, 0x92, 0x51, 0xa8, 0x23, 0x7c,
	0x7d, 0x9c, 0x7e, 0x2c, 0x0e, 0xb1, 0x43, 0x59, 0x22, 0x87, 0x2d, 0xcf, 0xc6, 0x82, 0x88, 0xb8,
	0x03, 0x6f, 0x8c, 0xd3, 0x29, 0x72, 0x20, 0xa6, 0x95, 0xa7, 0xda, 0xf0, 0x60, 0x9a, 0x1e, 0x26,
	0x53, 0x5d, 0x79, 0x93, 0x37, 0x23, 0x05, 0x0f, 0xa7, 0x29, 0x25, 0x07, 0xbb, 0x60, 0x8e, 0x29,
	0x06, 0x8f, 0xa6, 0xe9, 0x0c, 0x99, 0xee, 0x62, 0xf9, 0x4b, 0x5e, 0xa8, 0x42, 0x78, 0x7e, 0x9a,
	0x4e, 0x90, 0xb1, 0xbc, 0x94, 0x16, 0x2a, 0xb8, 0x3b, 0x47, 0x3f, 0x4e, 0x8e, 0x27, 0xc2, 0x06,
	0x17, 0xaa, 0x81, 0x32, 0xeb, 0x7b, 0xc8, 0x55, 0x56, 0x70, 0x8e, 0xb6, 0x8e, 0xee, 0xde, 0x1c,
	0x3d, 0x14, 0x57, 0xdf, 0x42, 0x55, 0x51, 0x12, 0x59, 0x00, 0xff, 0x9a, 0x33, 0xd9, 0x59, 0xa8,
	0xce, 0x45, 0x18, 0x21, 0xfc, 0x7b, 0x8e, 0x4e, 0x13, 0x92, 0x20, 0x39, 0x8f, 0xf9, 0xf0, 0x9f,
	0x3e, 0xa0, 0xec, 0x71, 0x17, 0xfe, 0x3b, 0x67, 0xb2, 0xd0, 0xc0, 0x5a, 0x19, 0x6e, 0xa4, 0xe9,
	0x2c, 0x39, 0xd4, 0x95, 0x37, 0x1d, 0x4c, 0xb2, 0xbb, 0x99, 0xa6, 0x73, 0x71, 0x7d, 0x13, 0xbc,
	0x1c, 0xd5, 0x7c, 0xcf, 0x3e, 0x83, 0x6d, 0xb8, 0x95, 0xa6, 0x07, 0xe3, 0x02, 0xe7, 0x5b, 0xc8,
	0x15, 0xfc, 0x74, 0xb1, 0x53, 0x05, 0x2d, 0x56, 0xf4, 0x6d, 0x91, 0xf0, 0xb3, 0x45, 0x13, 0x6b,
	0x0c, 0xc6, 0x45, 0xf8, 0xf9, 0xa2, 0x29, 0xcc, 0x97, 0x98, 0xef, 0x39, 0x49, 0xab, 0xae, 0x9c,
	0x30, 0x3e, 0x7a, 0x58, 0x52, 0xc5, 0x6f, 0x9d, 0xa0, 0x69, 0x72, 0x78, 0x80, 0x28, 0xb5, 0x43,
	0xf4, 0xeb, 0xf0, 0xed, 0x13, 0xc6, 0x4c, 0x99, 0xb9, 0x1e, 0x4f, 0xcc, 0x3c, 0x5d, 0xa1, 0x84,
	0x8c, 0xea, 0x51, 0xa8, 0xc1, 0x0b, 0xa7, 0x4c, 0x49, 0x72, 0xb5, 0xac, 0x44, 0xa6, 0x10, 0x5e,
	0xec, 0x21, 0xd5, 0xa6, 0xa3, 0x91, 0x97, 0x7a, 0x48, 0x0e, 0x7d, 0x54, 0x08, 0x2f, 0x9f, 0x32,
	0x45, 0xc8, 0xd5, 0x2c, 0xa1, 0x1a, 0x1e, 0x77, 0x93, 0x96, 0xbf, 0x72, 0xca, 0x14, 0x2b, 0x2b,
	0xdb, 0x4d, 0x25, 0xe0, 0x7f, 0x5f, 0x34, 0x79, 0x25, 0x72, 0xc5, 0x73, 0xe1, 0x97, 0xeb, 0x66,
	0x9e, 0xba, 0x50, 0xc9, 0x0b, 0x03, 0xa6, 0xec, 0x06, 0xfc, 0x6a, 0xdd, 0xa4, 0xd7, 0xa5, 0x0a,
	0x42, 0x06, 0x4c, 0xc1, 0xed, 0x75, 0x7a, 0x24, 0x9e, 0xe8, 0x84, 0xc8, 0x73, 0x5b, 0xff, 0xc2,
	0x95, 0xd3, 0x03, 0x70, 0x0e, 0x13, 0xf8, 0xcd, 0xd3, 0x03, 0x4e, 0x75, 0x0f, 0x1e, 0x6c, 0x98,
	0x89, 0xea, 0x42, 0x45, 0xe4, 0xf0, 0x70, 0x63, 0xc0, 0xdf, 0x19, 0x6c, 0xe7, 0x50, 0xef, 0x10,
	0x78, 0xb4, 0x61, 0xd2, 0xeb, 0x06, 0x62, 0x37, 0x98, 0xc7, 0xe1, 0x4e, 0xc6, 0x14, 0x73, 0xc3,
	0xb6, 0x4b, 0x8c, 0x33, 0x17, 0x25, 0xfc, 0xba, 0x40, 0xe7, 0xc9, 0x91, 0x01, 0x6c, 0x93, 0x7b,
	0xca, 0xd2, 0x76, 0x7e, 0x53, 0x30, 0x6e, 0x7b, 0x5c, 0xae, 0x06, 0xbf, 0x2d, 0x98, 0x66, 0xf5,
	0xa3, 0xfa, 0x0c, 0xfc, 0x6e, 0x2f, 0x26, 0x27, 0x45, 0x13, 0x7e, 0x5f, 0x30, 0xa1, 0xf6, 0x33,
	0x25, 0xcf, 0x85, 0x3f, 0xec, 0x45, 0xe4, 0x3c, 0x09, 0x7f, 0x2c, 0xd0, 0x63, 0xf1, 0x86, 0xe8,
	0x11, 0x96, 0x50, 0x67, 0x9b, 0xa8, 0xd7, 0xd0, 0x9f, 0x0a, 0xa6, 0x72, 0x3d, 0x32, 0x5b, 0x77,
	0xe1, 0x3b, 0x45, 0xd3, 0x9b, 0x01, 0xd8, 0x62, 0x01, 0xc2, 0x77, 0x8b, 0x74, 0x91, 0xcc, 0xef,
	0xa4, 0xca, 0x2c, 0x0c, 0x9b, 0x0d, 0xa9, 0x97, 0xd8, 0xf7, 0x8a, 0xbb, 0x62, 0xd7, 0x67, 0x51,
	0xc1, 0xd5, 0x22, 0x3d, 0x4e, 0xe6, 0x76, 0x32, 0x45, 0xd9, 0xb4, 0x2b, 0xb2, 0x05, 0xd7, 0x8a,
	0xbb, 0x42, 0xc9, 0x08, 0x05, 0x4f, 0x77, 0x87, 0x92, 0x11, 0x2a, 0xae, 0xd2, 0xdb, 0xc5, 0x5d,
	0x99, 0x65, 0x84, 0xca, 0x5f, 0xf2, 0xf4, 0xad, 0x7f, 0xa7, 0x68, 0x5a, 0x94, 0x15, 0x5c, 0x31,
	0x5b, 0x6d, 0xe1, 0x57, 0xe1, 0xaa, 0xd5, 0x99, 0x93, 0x2e, 0xa6, 0x87, 0xe2, 0x9a, 0x65, 0xe2,
	0x1a, 0x80, 0x4b, 0x5e, 0x18, 0xea, 0x7b, 0xff, 0x7d, 0xcb, 0xf4, 0xb5, 0xc7, 0xc6, 0x8b, 0x48,
	0x73, 0x3f, 0xb0, 0x4c, 0xae, 0x3d, 0xce, 0x5c, 0xb7, 0x1f, 0x5a, 0x66, 0x49, 0xe9, 0x72, 0xbe,
	0x5b, 0xed, 0xc4, 0x52, 0x77, 0x3b, 0x66, 0xdf, 0xab, 0x76, 0x86, 0xb3, 0xee, 0x9a, 0x33, 0xef,
	0xf7, 0xa9, 0x25, 0xfb, 0x33, 0x84, 0x0f, 0xaa, 0x66, 0x4b, 0x24, 0x0b, 0x62, 0xc3, 0xf7, 0x58,
	0x08, 0x8f, 0x2f, 0x98, 0xb1, 0xec, 0x03, 0xf5, 0x1c, 0xbf, 0x7a, 0xc1, 0xf4, 0xa6, 0x0f, 0xb7,
	0x44, 0x96, 0x71, 0x47, 0xef, 0x02, 0x0c, 0x61, 0x7b, 0x0f, 0x85, 0xe4, 0x6e, 0x9b, 0x17, 0xe3,
	0xc9, 0x85, 0xce, 0xfd, 0x10, 0xbc, 0x85, 0x32, 0x4c, 0xf6, 0xc4, 0x7d, 0x34, 0x85, 0xee, 0x47,
	0x4b, 0x18, 0xd4, 0x50, 0x86, 0xf0, 0x7f, 0xa4, 0x9f, 0x24, 0x8b, 0x3b, 0x48, 0x4b, 0xa8, 0x3c,
	0x17, 0x91, 0xdb, 0xe8, 0x68, 0x3d, 0x87, 0x74, 0x32, 0x7e, 0xe8, 0xca, 0x51, 0xd8, 0x80, 0x3f,
	0x07, 0xc6, 0xa0, 0x96, 0xaa, 0xfc, 0x22, 0x17, 0x5f, 0xe3, 0x65, 0x29, 0x5a, 0x9e, 0xde, 0x81,
	0x7f, 0x09, 0x4c, 0x0c, 0x9a, 0xec, 0xa2, 0x7f, 0x0d, 0xcc, 0x1b, 0xa3, 0xd1, 0x4d, 0xde, 0xd2,
	0xfb, 0x2d, 0xd9, 0xb9, 0x75, 0x0f, 0x25, 0xfc, 0x2d, 0x30, 0x99, 0xf5, 0xd1, 0x15, 0x94, 0x2d,
	0xd4, 0x61, 0xd5, 0x3d, 0x17, 0xee, 0xf4, 0xbb, 0x34, 0x4d, 0xc8, 0x44, 0xdc, 0xf1, 0x71, 0xd3,
	0x81, 0xbf, 0x07, 0x74, 0x81, 0x1c, 0x1d, 0x8c, 0x27, 0x87, 0xba, 0xc7, 0x49, 0x01, 0xfe, 0xd1,
	0x6f, 0x3d, 0x23, 0x05, 0x73, 0x6c, 0x16, 0xaa, 0x3e, 0xf7, 0xff, 0x0c, 0xcc, 0xed, 0xeb, 0x73,
	0x7f, 0xbe, 0xdd, 0x44, 0xb8, 0x1b, 0x98, 0x91, 0x1b, 0x38, 0x09, 0xf7, 0x3a, 0x39, 0x5a, 0x42,
	0x5b, 0xb0, 0x13, 0x37, 0xd7, 0x23, 0x13, 0x46, 0x3f, 0x5a, 0x62, 0x32, 0x6c, 0x30, 0xbf, 0x90,
	0x2d, 0xc1, 0x8f, 0x22, 0x13, 0xc6, 0x1e, 0xfc, 0x46, 0xd9, 0xaa, 0xc0, 0x8f, 0x9f, 0xa1, 0x50,
	0x3a, 0x77, 0xfe, 0x3c, 0xfc, 0x24, 0xa2, 0x4b, 0xe4, 0xd8, 0x0e, 0x85, 0x2a, 0x0f, 0x7a, 0x3e,
	0x6e, 0x44, 0x9d, 0x07, 0x75, 0x2f, 0x8d, 0xd8, 0xcb, 0xcd, 0x67, 0xaa, 0xc4, 0x7e, 0x6e, 0x45,
	0xa6, 0xdd, 0xf1, 0xfa, 0xfb, 0xc6, 0x65, 0x73, 0x4d, 0xb4, 0xa4, 0x0b, 0x11, 0x1f, 0xac, 0x44,
	0x35, 0xf8, 0xe6, 0xe5, 0xf9, 0x91, 0x2b, 0xbf, 0x58, 0xd8, 0x97, 0xf9, 0xcc, 0xfd, 0xed, 0x85,
	0xd4, 0x83, 0xed, 0x85, 0xd4, 0xe3, 0xed, 0x85, 0xd4, 0xf5, 0x27, 0x0b, 0xfb, 0xbe, 0xbc, 0x90,
	0x7c, 0xd0, 0x29, 0xb4, 0x1b, 0xab, 0xb6, 0x90, 0xb8, 0x3a, 0xf8, 0x65, 0x5c, 0x1b, 0x8b, 0x3f,
	0x69, 0x3f, 0xfb, 0x61, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x47, 0xb3, 0xc3, 0x32, 0x0b, 0x00,
	0x00,
}
