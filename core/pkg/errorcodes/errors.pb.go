// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/errorcodes/errors.proto

package errorcodes // import "berty.tech/core/pkg/errorcodes"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BertyErrorCodes int32

const (
	ErrUndefined                 BertyErrorCodes = 0
	ErrBase                      BertyErrorCodes = 1
	ErrUnimplemented             BertyErrorCodes = 2
	ErrRandomGeneratorFailed     BertyErrorCodes = 3
	ErrUUIDGeneratorFailed       BertyErrorCodes = 4
	ErrSerialization             BertyErrorCodes = 5
	ErrDeserialization           BertyErrorCodes = 6
	ErrEnvelope                  BertyErrorCodes = 1000
	ErrEnvelopeUntrusted         BertyErrorCodes = 1001
	ErrEnvelopeNoDeviceFound     BertyErrorCodes = 1002
	ErrEntity                    BertyErrorCodes = 2000
	ErrEntityInput               BertyErrorCodes = 2001
	ErrEntityData                BertyErrorCodes = 2002
	ErrEntityExists              BertyErrorCodes = 2003
	ErrNet                       BertyErrorCodes = 3000
	ErrNetAnotherClientConnected BertyErrorCodes = 3001
	ErrNetStream                 BertyErrorCodes = 3002
	ErrNetQueue                  BertyErrorCodes = 3003
	ErrNetDial                   BertyErrorCodes = 3004
	ErrNetPing                   BertyErrorCodes = 3005
	ErrNetP2P                    BertyErrorCodes = 3100
	ErrNetP2PIdentity            BertyErrorCodes = 3101
	ErrNetP2PPublicKey           BertyErrorCodes = 3102
	ErrEvent                     BertyErrorCodes = 4000
	ErrEventSender               BertyErrorCodes = 4001
	ErrEventData                 BertyErrorCodes = 4002
	ErrValidation                BertyErrorCodes = 5000
	ErrValidationInput           BertyErrorCodes = 5001
	ErrValidationMyself          BertyErrorCodes = 5002
	ErrPagination                BertyErrorCodes = 6000
	ErrDb                        BertyErrorCodes = 7000
	ErrDbCreate                  BertyErrorCodes = 7001
	ErrDbUpdate                  BertyErrorCodes = 7002
	ErrDbDelete                  BertyErrorCodes = 7003
	ErrDbNothingFound            BertyErrorCodes = 7004
	ErrCrypto                    BertyErrorCodes = 8000
	ErrCryptoSig                 BertyErrorCodes = 8100
	ErrCryptoSigMismatch         BertyErrorCodes = 8101
	ErrCryptoSigFormat           BertyErrorCodes = 8102
	ErrCryptoEncrypt             BertyErrorCodes = 8200
	ErrCryptoDecrypt             BertyErrorCodes = 8300
	ErrCryptoKey                 BertyErrorCodes = 8400
	ErrCryptoKeyGen              BertyErrorCodes = 8401
	ErrCryptoKeyDecode           BertyErrorCodes = 8402
	ErrCryptoSigchain            BertyErrorCodes = 8500
	ErrAccManager                BertyErrorCodes = 9000
	ErrAccManagerInitNode        BertyErrorCodes = 9001
	ErrAccManagerDb              BertyErrorCodes = 9002
	ErrAccManagerDbInit          BertyErrorCodes = 9003
	ErrAccManagerDbDrop          BertyErrorCodes = 9004
	ErrAccManagerDbMig           BertyErrorCodes = 9005
	ErrAccManagerDbDir           BertyErrorCodes = 9006
	ErrAccManagerNotOpened       BertyErrorCodes = 9007
	ErrAccManagerCfg             BertyErrorCodes = 9100
	ErrAccManagerCfgName         BertyErrorCodes = 9101
	ErrAccManagerCfgPassphrase   BertyErrorCodes = 9102
	ErrAccManagerCfgNet          BertyErrorCodes = 9104
	ErrAccManagerCfgGrpcSrv      BertyErrorCodes = 9105
	ErrAccManagerBot             BertyErrorCodes = 9200
	ErrAccManagerBotInit         BertyErrorCodes = 9201
	ErrContactReq                BertyErrorCodes = 10000
	ErrContactReqKey             BertyErrorCodes = 10001
	ErrContactReqKeyMissing      BertyErrorCodes = 10002
	ErrContactReqExisting        BertyErrorCodes = 10003
	ErrContactReqMyself          BertyErrorCodes = 10004
	ErrCfg                       BertyErrorCodes = 11000
	ErrCfgMissing                BertyErrorCodes = 11001
	ErrCfgMyself                 BertyErrorCodes = 11002
	ErrCfgDevices                BertyErrorCodes = 11003
	ErrSenderAlias               BertyErrorCodes = 12000
	ErrSenderAliasGen            BertyErrorCodes = 12001
	ErrSenderAliasNoCandidates   BertyErrorCodes = 12002
	ErrSenderAliasUpdateFailed   BertyErrorCodes = 12003
)

var BertyErrorCodes_name = map[int32]string{
	0:     "ErrUndefined",
	1:     "ErrBase",
	2:     "ErrUnimplemented",
	3:     "ErrRandomGeneratorFailed",
	4:     "ErrUUIDGeneratorFailed",
	5:     "ErrSerialization",
	6:     "ErrDeserialization",
	1000:  "ErrEnvelope",
	1001:  "ErrEnvelopeUntrusted",
	1002:  "ErrEnvelopeNoDeviceFound",
	2000:  "ErrEntity",
	2001:  "ErrEntityInput",
	2002:  "ErrEntityData",
	2003:  "ErrEntityExists",
	3000:  "ErrNet",
	3001:  "ErrNetAnotherClientConnected",
	3002:  "ErrNetStream",
	3003:  "ErrNetQueue",
	3004:  "ErrNetDial",
	3005:  "ErrNetPing",
	3100:  "ErrNetP2P",
	3101:  "ErrNetP2PIdentity",
	3102:  "ErrNetP2PPublicKey",
	4000:  "ErrEvent",
	4001:  "ErrEventSender",
	4002:  "ErrEventData",
	5000:  "ErrValidation",
	5001:  "ErrValidationInput",
	5002:  "ErrValidationMyself",
	6000:  "ErrPagination",
	7000:  "ErrDb",
	7001:  "ErrDbCreate",
	7002:  "ErrDbUpdate",
	7003:  "ErrDbDelete",
	7004:  "ErrDbNothingFound",
	8000:  "ErrCrypto",
	8100:  "ErrCryptoSig",
	8101:  "ErrCryptoSigMismatch",
	8102:  "ErrCryptoSigFormat",
	8200:  "ErrCryptoEncrypt",
	8300:  "ErrCryptoDecrypt",
	8400:  "ErrCryptoKey",
	8401:  "ErrCryptoKeyGen",
	8402:  "ErrCryptoKeyDecode",
	8500:  "ErrCryptoSigchain",
	9000:  "ErrAccManager",
	9001:  "ErrAccManagerInitNode",
	9002:  "ErrAccManagerDb",
	9003:  "ErrAccManagerDbInit",
	9004:  "ErrAccManagerDbDrop",
	9005:  "ErrAccManagerDbMig",
	9006:  "ErrAccManagerDbDir",
	9007:  "ErrAccManagerNotOpened",
	9100:  "ErrAccManagerCfg",
	9101:  "ErrAccManagerCfgName",
	9102:  "ErrAccManagerCfgPassphrase",
	9104:  "ErrAccManagerCfgNet",
	9105:  "ErrAccManagerCfgGrpcSrv",
	9200:  "ErrAccManagerBot",
	9201:  "ErrAccManagerBotInit",
	10000: "ErrContactReq",
	10001: "ErrContactReqKey",
	10002: "ErrContactReqKeyMissing",
	10003: "ErrContactReqExisting",
	10004: "ErrContactReqMyself",
	11000: "ErrCfg",
	11001: "ErrCfgMissing",
	11002: "ErrCfgMyself",
	11003: "ErrCfgDevices",
	12000: "ErrSenderAlias",
	12001: "ErrSenderAliasGen",
	12002: "ErrSenderAliasNoCandidates",
	12003: "ErrSenderAliasUpdateFailed",
}
var BertyErrorCodes_value = map[string]int32{
	"ErrUndefined":                 0,
	"ErrBase":                      1,
	"ErrUnimplemented":             2,
	"ErrRandomGeneratorFailed":     3,
	"ErrUUIDGeneratorFailed":       4,
	"ErrSerialization":             5,
	"ErrDeserialization":           6,
	"ErrEnvelope":                  1000,
	"ErrEnvelopeUntrusted":         1001,
	"ErrEnvelopeNoDeviceFound":     1002,
	"ErrEntity":                    2000,
	"ErrEntityInput":               2001,
	"ErrEntityData":                2002,
	"ErrEntityExists":              2003,
	"ErrNet":                       3000,
	"ErrNetAnotherClientConnected": 3001,
	"ErrNetStream":                 3002,
	"ErrNetQueue":                  3003,
	"ErrNetDial":                   3004,
	"ErrNetPing":                   3005,
	"ErrNetP2P":                    3100,
	"ErrNetP2PIdentity":            3101,
	"ErrNetP2PPublicKey":           3102,
	"ErrEvent":                     4000,
	"ErrEventSender":               4001,
	"ErrEventData":                 4002,
	"ErrValidation":                5000,
	"ErrValidationInput":           5001,
	"ErrValidationMyself":          5002,
	"ErrPagination":                6000,
	"ErrDb":                        7000,
	"ErrDbCreate":                  7001,
	"ErrDbUpdate":                  7002,
	"ErrDbDelete":                  7003,
	"ErrDbNothingFound":            7004,
	"ErrCrypto":                    8000,
	"ErrCryptoSig":                 8100,
	"ErrCryptoSigMismatch":         8101,
	"ErrCryptoSigFormat":           8102,
	"ErrCryptoEncrypt":             8200,
	"ErrCryptoDecrypt":             8300,
	"ErrCryptoKey":                 8400,
	"ErrCryptoKeyGen":              8401,
	"ErrCryptoKeyDecode":           8402,
	"ErrCryptoSigchain":            8500,
	"ErrAccManager":                9000,
	"ErrAccManagerInitNode":        9001,
	"ErrAccManagerDb":              9002,
	"ErrAccManagerDbInit":          9003,
	"ErrAccManagerDbDrop":          9004,
	"ErrAccManagerDbMig":           9005,
	"ErrAccManagerDbDir":           9006,
	"ErrAccManagerNotOpened":       9007,
	"ErrAccManagerCfg":             9100,
	"ErrAccManagerCfgName":         9101,
	"ErrAccManagerCfgPassphrase":   9102,
	"ErrAccManagerCfgNet":          9104,
	"ErrAccManagerCfgGrpcSrv":      9105,
	"ErrAccManagerBot":             9200,
	"ErrAccManagerBotInit":         9201,
	"ErrContactReq":                10000,
	"ErrContactReqKey":             10001,
	"ErrContactReqKeyMissing":      10002,
	"ErrContactReqExisting":        10003,
	"ErrContactReqMyself":          10004,
	"ErrCfg":                       11000,
	"ErrCfgMissing":                11001,
	"ErrCfgMyself":                 11002,
	"ErrCfgDevices":                11003,
	"ErrSenderAlias":               12000,
	"ErrSenderAliasGen":            12001,
	"ErrSenderAliasNoCandidates":   12002,
	"ErrSenderAliasUpdateFailed":   12003,
}

func (x BertyErrorCodes) String() string {
	return proto.EnumName(BertyErrorCodes_name, int32(x))
}
func (BertyErrorCodes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_errors_008ec9271b3162d2, []int{0}
}

type BertyError struct {
	Code                 BertyErrorCodes   `protobuf:"varint,1,opt,name=code,proto3,enum=berty.errors.BertyErrorCodes" json:"code,omitempty"`
	ExtendedCodes        []BertyErrorCodes `protobuf:"varint,2,rep,packed,name=ExtendedCodes,enum=berty.errors.BertyErrorCodes" json:"ExtendedCodes,omitempty"`
	Message              string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Placeholders         map[string]string `protobuf:"bytes,4,rep,name=placeholders" json:"placeholders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Url                  string            `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	DevInfo              string            `protobuf:"bytes,6,opt,name=dev_info,json=devInfo,proto3" json:"dev_info,omitempty"`
	Outer                *BertyError       `protobuf:"bytes,7,opt,name=outer" json:"outer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BertyError) Reset()         { *m = BertyError{} }
func (m *BertyError) String() string { return proto.CompactTextString(m) }
func (*BertyError) ProtoMessage()    {}
func (*BertyError) Descriptor() ([]byte, []int) {
	return fileDescriptor_errors_008ec9271b3162d2, []int{0}
}
func (m *BertyError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BertyError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BertyError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BertyError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BertyError.Merge(dst, src)
}
func (m *BertyError) XXX_Size() int {
	return m.Size()
}
func (m *BertyError) XXX_DiscardUnknown() {
	xxx_messageInfo_BertyError.DiscardUnknown(m)
}

var xxx_messageInfo_BertyError proto.InternalMessageInfo

func (m *BertyError) GetCode() BertyErrorCodes {
	if m != nil {
		return m.Code
	}
	return ErrUndefined
}

func (m *BertyError) GetExtendedCodes() []BertyErrorCodes {
	if m != nil {
		return m.ExtendedCodes
	}
	return nil
}

func (m *BertyError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *BertyError) GetPlaceholders() map[string]string {
	if m != nil {
		return m.Placeholders
	}
	return nil
}

func (m *BertyError) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *BertyError) GetDevInfo() string {
	if m != nil {
		return m.DevInfo
	}
	return ""
}

func (m *BertyError) GetOuter() *BertyError {
	if m != nil {
		return m.Outer
	}
	return nil
}

func init() {
	proto.RegisterType((*BertyError)(nil), "berty.errors.BertyError")
	proto.RegisterMapType((map[string]string)(nil), "berty.errors.BertyError.PlaceholdersEntry")
	proto.RegisterEnum("berty.errors.BertyErrorCodes", BertyErrorCodes_name, BertyErrorCodes_value)
}
func (m *BertyError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BertyError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrors(dAtA, i, uint64(m.Code))
	}
	if len(m.ExtendedCodes) > 0 {
		dAtA2 := make([]byte, len(m.ExtendedCodes)*10)
		var j1 int
		for _, num := range m.ExtendedCodes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintErrors(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintErrors(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Placeholders) > 0 {
		for k, _ := range m.Placeholders {
			dAtA[i] = 0x22
			i++
			v := m.Placeholders[k]
			mapSize := 1 + len(k) + sovErrors(uint64(len(k))) + 1 + len(v) + sovErrors(uint64(len(v)))
			i = encodeVarintErrors(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintErrors(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintErrors(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintErrors(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.DevInfo) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintErrors(dAtA, i, uint64(len(m.DevInfo)))
		i += copy(dAtA[i:], m.DevInfo)
	}
	if m.Outer != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintErrors(dAtA, i, uint64(m.Outer.Size()))
		n3, err := m.Outer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintErrors(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BertyError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovErrors(uint64(m.Code))
	}
	if len(m.ExtendedCodes) > 0 {
		l = 0
		for _, e := range m.ExtendedCodes {
			l += sovErrors(uint64(e))
		}
		n += 1 + sovErrors(uint64(l)) + l
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	if len(m.Placeholders) > 0 {
		for k, v := range m.Placeholders {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovErrors(uint64(len(k))) + 1 + len(v) + sovErrors(uint64(len(v)))
			n += mapEntrySize + 1 + sovErrors(uint64(mapEntrySize))
		}
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	l = len(m.DevInfo)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	if m.Outer != nil {
		l = m.Outer.Size()
		n += 1 + l + sovErrors(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovErrors(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozErrors(x uint64) (n int) {
	return sovErrors(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BertyError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BertyError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BertyError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (BertyErrorCodes(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v BertyErrorCodes
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (BertyErrorCodes(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtendedCodes = append(m.ExtendedCodes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthErrors
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ExtendedCodes) == 0 {
					m.ExtendedCodes = make([]BertyErrorCodes, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v BertyErrorCodes
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErrors
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (BertyErrorCodes(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtendedCodes = append(m.ExtendedCodes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedCodes", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placeholders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Placeholders == nil {
				m.Placeholders = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErrors
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthErrors
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowErrors
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthErrors
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipErrors(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthErrors
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Placeholders[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Outer == nil {
				m.Outer = &BertyError{}
			}
			if err := m.Outer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrors(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthErrors
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowErrors
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipErrors(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthErrors = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrors   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pkg/errorcodes/errors.proto", fileDescriptor_errors_008ec9271b3162d2) }

var fileDescriptor_errors_008ec9271b3162d2 = []byte{
	// 1167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0x4b, 0x6f, 0x1c, 0x45,
	0x10, 0xce, 0xfa, 0x99, 0xb4, 0xe3, 0x6c, 0xa5, 0xe3, 0x64, 0x27, 0x4e, 0x62, 0x1b, 0x2e, 0xb1,
	0x22, 0xb1, 0x06, 0x23, 0x45, 0x88, 0x03, 0x8e, 0xbd, 0x2f, 0x59, 0x91, 0x07, 0xb3, 0xd6, 0x72,
	0x40, 0x8a, 0x50, 0xef, 0x4c, 0xed, 0x6c, 0x2b, 0xb3, 0xdd, 0x4b, 0x4f, 0xef, 0x2a, 0xcb, 0x2f,
	0x08, 0x28, 0x44, 0x09, 0x70, 0xe0, 0x00, 0x88, 0xb7, 0x78, 0x73, 0xe1, 0xc0, 0x53, 0xe2, 0xc8,
	0x31, 0x09, 0x17, 0x5e, 0x87, 0xe0, 0x5c, 0x00, 0x71, 0x08, 0x37, 0x1e, 0x17, 0xd4, 0x33, 0xbd,
	0x2f, 0x3b, 0x11, 0xa7, 0xed, 0xfa, 0xbe, 0xae, 0xae, 0xaa, 0xaf, 0xba, 0x6b, 0x87, 0x1c, 0x6b,
	0x9e, 0x0f, 0x96, 0x50, 0x29, 0xa9, 0x3c, 0xe9, 0x63, 0x94, 0x2c, 0xa3, 0x6c, 0x53, 0x49, 0x2d,
	0xe9, 0xfe, 0x2a, 0x2a, 0xdd, 0xc9, 0x26, 0xd8, 0xec, 0x7d, 0x01, 0xd7, 0xf5, 0x56, 0x35, 0xeb,
	0xc9, 0xc6, 0x52, 0x20, 0x03, 0xb9, 0x14, 0x6f, 0xaa, 0xb6, 0x6a, 0xb1, 0x15, 0x1b, 0xf1, 0x2a,
	0x71, 0xbe, 0xf7, 0xd2, 0x28, 0x21, 0x6b, 0xc6, 0xbf, 0x60, 0xdc, 0xe9, 0x03, 0x64, 0xcc, 0x44,
	0x70, 0x52, 0x0b, 0xa9, 0xc5, 0x03, 0xcb, 0x27, 0xb2, 0x83, 0x47, 0x67, 0xfb, 0xfb, 0x72, 0x26,
	0x8b, 0x72, 0xbc, 0x95, 0xe6, 0xc8, 0x74, 0xe1, 0x82, 0x46, 0xe1, 0xa3, 0x1f, 0xc3, 0xce, 0xc8,
	0xc2, 0xe8, 0xff, 0xfb, 0x0e, 0xfb, 0x50, 0x87, 0x4c, 0x36, 0x30, 0x8a, 0x58, 0x80, 0xce, 0xe8,
	0x42, 0x6a, 0x71, 0x5f, 0xb9, 0x6b, 0x52, 0x97, 0xec, 0x6f, 0x86, 0xcc, 0xc3, 0xba, 0x0c, 0x7d,
	0x54, 0x91, 0x33, 0xb6, 0x30, 0xba, 0x38, 0xb5, 0x7c, 0xea, 0x6e, 0xa7, 0x67, 0x37, 0x07, 0x36,
	0x17, 0x84, 0x56, 0x9d, 0xf2, 0x90, 0x3f, 0x05, 0x32, 0xda, 0x52, 0xa1, 0x33, 0x1e, 0x47, 0x31,
	0x4b, 0x7a, 0x94, 0xec, 0xf5, 0xb1, 0xfd, 0x24, 0x17, 0x35, 0xe9, 0x4c, 0x24, 0xc1, 0x7d, 0x6c,
	0xaf, 0x8b, 0x9a, 0xa4, 0x59, 0x32, 0x2e, 0x5b, 0x1a, 0x95, 0x33, 0xb9, 0x90, 0x5a, 0x9c, 0x5a,
	0x76, 0xee, 0x16, 0xb5, 0x9c, 0x6c, 0x9b, 0x5d, 0x21, 0x07, 0x77, 0xc5, 0x37, 0x11, 0xcf, 0x63,
	0x27, 0x96, 0x74, 0x5f, 0xd9, 0x2c, 0xe9, 0x0c, 0x19, 0x6f, 0xb3, 0xb0, 0x85, 0xce, 0x48, 0x8c,
	0x25, 0xc6, 0xc3, 0x23, 0x0f, 0xa5, 0x4e, 0x5d, 0x9e, 0x26, 0xe9, 0x1d, 0x52, 0x51, 0x20, 0xfb,
	0x0b, 0x4a, 0x55, 0x84, 0x8f, 0x35, 0x2e, 0xd0, 0x87, 0x3d, 0x74, 0x8a, 0x4c, 0x16, 0x94, 0x5a,
	0x63, 0x11, 0x42, 0x8a, 0xce, 0x10, 0x88, 0x69, 0xde, 0x68, 0x86, 0xd8, 0x40, 0xa1, 0xd1, 0x87,
	0x11, 0x7a, 0x9c, 0x38, 0x05, 0xa5, 0xca, 0x4c, 0xf8, 0xb2, 0x51, 0x42, 0x81, 0x8a, 0x69, 0xa9,
	0x8a, 0x8c, 0x87, 0xe8, 0xc3, 0x28, 0x9d, 0x25, 0x47, 0x8c, 0x4f, 0x65, 0x3d, 0xbf, 0x93, 0x1b,
	0xb3, 0xe7, 0x6d, 0xa1, 0xe2, 0x2c, 0xe4, 0x4f, 0x33, 0xcd, 0xa5, 0x80, 0x71, 0x7a, 0x84, 0xd0,
	0x82, 0x52, 0x79, 0x8c, 0x86, 0xf0, 0x09, 0x0a, 0x64, 0xaa, 0xa0, 0x54, 0x41, 0xb4, 0x31, 0x94,
	0x4d, 0x84, 0x5f, 0x27, 0xe9, 0x51, 0x32, 0x33, 0x80, 0x54, 0x84, 0x56, 0xad, 0xc8, 0xe4, 0xf4,
	0xdb, 0x24, 0x3d, 0x11, 0x27, 0xd5, 0xa5, 0x5c, 0x99, 0xc7, 0x36, 0xf7, 0xb0, 0x28, 0x5b, 0xc2,
	0x87, 0xdf, 0x27, 0xe9, 0x01, 0xb2, 0x2f, 0xa6, 0x35, 0xd7, 0x1d, 0xb8, 0x96, 0xa6, 0x87, 0xc8,
	0x81, 0x9e, 0xbd, 0x2e, 0x9a, 0x2d, 0x0d, 0xd7, 0xd3, 0x94, 0x92, 0xe9, 0x1e, 0x98, 0x67, 0x9a,
	0xc1, 0x8d, 0x34, 0x9d, 0x21, 0xe9, 0x1e, 0x56, 0xb8, 0xc0, 0x23, 0x1d, 0xc1, 0x77, 0x69, 0x3a,
	0x45, 0x26, 0x0a, 0x4a, 0xb9, 0xa8, 0xe1, 0xb3, 0x0c, 0xbd, 0x87, 0x1c, 0x4f, 0x8c, 0x55, 0x21,
	0x75, 0x1d, 0x55, 0x2e, 0xe4, 0x28, 0x74, 0x4e, 0x0a, 0x81, 0x9e, 0xc9, 0xee, 0xf3, 0x0c, 0x3d,
	0x18, 0xeb, 0xec, 0xa2, 0xde, 0xd2, 0x0a, 0x59, 0x03, 0xbe, 0xc8, 0xd8, 0xea, 0x5c, 0xd4, 0x8f,
	0xb5, 0xb0, 0x85, 0xf0, 0x65, 0x86, 0xa6, 0x09, 0x49, 0x90, 0x3c, 0x67, 0x21, 0x7c, 0x35, 0x00,
	0x6c, 0x72, 0x11, 0xc0, 0xd7, 0x19, 0x5b, 0x85, 0x01, 0x96, 0x37, 0xe1, 0x65, 0x87, 0x1e, 0x21,
	0x07, 0x7b, 0xf6, 0xba, 0x8f, 0x49, 0x75, 0xaf, 0x38, 0x34, 0x13, 0x2b, 0x9a, 0xe0, 0x9b, 0xad,
	0x6a, 0xc8, 0xbd, 0xb3, 0xd8, 0x81, 0x57, 0x1d, 0x3a, 0x4d, 0xf6, 0x9a, 0x6a, 0xda, 0x28, 0x34,
	0xbc, 0x36, 0xdf, 0x55, 0xc1, 0x98, 0x5b, 0xe6, 0xc5, 0x28, 0x78, 0x7d, 0xde, 0xe6, 0x1a, 0x83,
	0xb1, 0x08, 0x6f, 0xcc, 0x5b, 0x61, 0x1e, 0x67, 0x21, 0xf7, 0x93, 0xe6, 0x5c, 0x3c, 0x69, 0x63,
	0xf4, 0xb1, 0x44, 0xc5, 0x67, 0x4e, 0x52, 0x87, 0x1c, 0x1a, 0x22, 0x36, 0x3a, 0x11, 0x86, 0x35,
	0x78, 0xf6, 0xa4, 0x3d, 0x66, 0x93, 0x05, 0x5c, 0x24, 0xc7, 0xdc, 0xce, 0x52, 0x42, 0xc6, 0x4d,
	0xf3, 0xab, 0xf0, 0xfd, 0x69, 0x2b, 0x49, 0xbe, 0x9a, 0x53, 0xc8, 0x34, 0xc2, 0x0f, 0x7d, 0xa4,
	0xd2, 0xf4, 0x0d, 0xf2, 0x63, 0x1f, 0xc9, 0x63, 0x88, 0x1a, 0xe1, 0xa7, 0xd3, 0x56, 0x84, 0x7c,
	0xd5, 0x95, 0xba, 0xce, 0x45, 0x90, 0xb4, 0xfc, 0xe7, 0xd3, 0x56, 0xac, 0x9c, 0xea, 0x34, 0xb5,
	0x84, 0x6f, 0x1e, 0xb1, 0x75, 0x25, 0xf6, 0x16, 0x0f, 0xe0, 0xad, 0x15, 0x7b, 0x9f, 0x7a, 0xd0,
	0x06, 0x8f, 0x1a, 0x4c, 0x7b, 0x75, 0x78, 0x7b, 0xc5, 0x96, 0xd7, 0xa3, 0x8a, 0x52, 0x35, 0x98,
	0x86, 0x77, 0x56, 0xe8, 0xe1, 0xf8, 0x0e, 0x27, 0x44, 0x41, 0x78, 0xe6, 0x17, 0x2e, 0x9e, 0x19,
	0x82, 0xf3, 0x98, 0xc0, 0x7f, 0x9c, 0x19, 0x0a, 0x6a, 0x7a, 0x70, 0x6d, 0xd5, 0xde, 0xa8, 0x1e,
	0x54, 0x42, 0x01, 0xd7, 0x57, 0x87, 0xe2, 0x9d, 0xc5, 0x4e, 0x1e, 0xcd, 0x00, 0x84, 0x1b, 0xab,
	0xb6, 0xbc, 0x5e, 0x22, 0x5e, 0x9d, 0x71, 0x01, 0x9f, 0xae, 0x59, 0x31, 0x57, 0x3d, 0x6f, 0x83,
	0x09, 0x16, 0xa0, 0x82, 0x77, 0x8b, 0x74, 0x96, 0x1c, 0x1e, 0xc2, 0xd6, 0x05, 0xd7, 0xae, 0x39,
	0xe7, 0xbd, 0xa2, 0x0d, 0xdb, 0xe7, 0xf2, 0x55, 0x78, 0xbf, 0x68, 0x9b, 0x35, 0x88, 0x1a, 0x1f,
	0xf8, 0xe0, 0x4e, 0x4c, 0x5e, 0xc9, 0x26, 0x7c, 0x58, 0xb4, 0xa9, 0x0e, 0x32, 0x1b, 0x3c, 0x80,
	0x8f, 0xee, 0x44, 0xe4, 0xb9, 0x82, 0x8f, 0x8b, 0xf4, 0x58, 0x3c, 0x13, 0xfa, 0x84, 0x2b, 0xf5,
	0xa3, 0x4d, 0x34, 0x03, 0xe7, 0x93, 0xa2, 0x55, 0xae, 0x4f, 0xe6, 0x6a, 0x01, 0x5c, 0x2a, 0xd9,
	0xde, 0x0c, 0xc1, 0x2e, 0x6b, 0x20, 0x3c, 0x57, 0xa2, 0xf3, 0x64, 0x76, 0x27, 0xb5, 0xc9, 0xa2,
	0xa8, 0x59, 0x57, 0x66, 0x6c, 0x5d, 0x2e, 0xed, 0xca, 0xdd, 0xf8, 0xa2, 0x86, 0x2b, 0x25, 0x7a,
	0x9c, 0x64, 0x76, 0x32, 0x25, 0xd5, 0xf4, 0xb6, 0x54, 0x1b, 0xae, 0x96, 0x76, 0xa5, 0xb2, 0x26,
	0x35, 0xdc, 0xde, 0x9d, 0xca, 0x9a, 0xd4, 0xb1, 0x4a, 0x7f, 0x96, 0x6c, 0x17, 0x72, 0x52, 0x68,
	0xe6, 0xe9, 0x32, 0x3e, 0x05, 0x57, 0xdc, 0xee, 0x55, 0xe8, 0x61, 0xa6, 0xef, 0x57, 0x5d, 0x1b,
	0x7a, 0x08, 0xde, 0xe0, 0x51, 0x64, 0x9e, 0xf6, 0xf3, 0xae, 0x6d, 0x5d, 0x9f, 0x8d, 0x67, 0x8d,
	0xe1, 0x5e, 0x70, 0x6d, 0x39, 0x7d, 0xce, 0xbe, 0xa8, 0x17, 0x5d, 0x3b, 0x87, 0x8c, 0x62, 0x7f,
	0x55, 0xba, 0xb9, 0xd4, 0x82, 0xee, 0xb1, 0x7f, 0x57, 0xba, 0xf7, 0xaf, 0x16, 0x58, 0x9f, 0x7f,
	0x06, 0xb6, 0x25, 0x23, 0x32, 0x82, 0x7f, 0x2b, 0x76, 0x10, 0x24, 0x33, 0x60, 0x35, 0xe4, 0x2c,
	0x82, 0x9b, 0xe7, 0xec, 0xcd, 0x1b, 0x00, 0xcd, 0x55, 0xfd, 0xe5, 0x9c, 0x95, 0x7f, 0x00, 0x77,
	0x65, 0x8e, 0x09, 0xdf, 0x3c, 0x77, 0x8c, 0x60, 0xfb, 0x0e, 0x1b, 0x92, 0xe7, 0x6b, 0xff, 0x06,
	0x6e, 0x9d, 0x9b, 0x1d, 0xbb, 0xf8, 0xe6, 0xdc, 0x9e, 0xb5, 0xfb, 0xbf, 0xdd, 0x9e, 0x4b, 0x5d,
	0xdb, 0x9e, 0x4b, 0xdd, 0xdc, 0x9e, 0x4b, 0xbd, 0x74, 0x6b, 0x6e, 0xcf, 0x13, 0x73, 0xc9, 0x7f,
	0xa0, 0x46, 0xaf, 0xbe, 0xe4, 0x49, 0x85, 0x4b, 0xc3, 0xdf, 0x26, 0xd5, 0x89, 0xf8, 0xc3, 0xe2,
	0xc1, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xfb, 0xc3, 0x9c, 0xb4, 0x08, 0x00, 0x00,
}
