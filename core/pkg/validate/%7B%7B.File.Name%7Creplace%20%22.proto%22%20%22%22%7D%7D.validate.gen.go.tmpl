// this file was generated by protoc-gen-gotemplate

package {{.File.Name | dir | base}}

{{- $file := .File -}}

{{- range .File.Dependency -}}
  {{- if eq . "pkg/validate/validate.proto" }}

import (
	"github.com/pkg/errors"

	"berty.tech/core/pkg/validate/validator"
	"berty.tech/core/pkg/errorcodes"
)

var (
	_ = errors.New
	_ = validator.IsContactKey
	_ = errorcodes.IsSubCode
)

{{- range $message := $file.MessageType }}
func (m *{{$message.Name}}) Validate() error {
  {{- $disabled := boolMessageExtension 53201 $message }}
  {{- $additional_handler := stringMessageExtension 53202 $message }}
  {{- if $disabled }}
  return nil
  {{- else }}
    if m == nil {
      return nil
    }
    {{- range $field := $message.Field}}
      {{- $fieldName := stringFieldExtension 65004 $field}}{{/* gogoproto.customname */}}
      {{- if empty $fieldName }}{{$fieldName = $field.Name | camelcase}}{{end}}
      {{- $required := boolFieldExtension 53301 $field }}
      {{- $skip := boolFieldExtension 53302 $field }}
      {{- $min_len := int64FieldExtension 53303 $field }}
      {{- $max_len := int64FieldExtension 53304 $field }}
      {{- $min_items := int64FieldExtension 53305 $field }}
      {{- $max_items := int64FieldExtension 53306 $field }}
      {{- $int_gt := int64FieldExtension 53307 $field }}
      {{- $int_lt := int64FieldExtension 53308 $field }}
      {{- $defined_only := boolFieldExtension 53309 $field }}
      {{- $is_contact_key := boolFieldExtension 53310 $field }}

      // handling field: {{$fieldName}} - {{$field}} (is_contact_key={{$is_contact_key}}, defined_only={{$defined_only}}, min_len={{$min_len}}, max_len={{$max_len}}, skip={{$skip}}, required={{$required}}, min_items={{$min_items}}, max_items={{$max_items}})

      {{- if $required }}
        if m.Get{{$fieldName}}() == nil {
          return errors.New("{{$fieldName}} is required")
        }
      {{- end}}

      {{- if and (eq ($field.Type | toString) "TYPE_MESSAGE") (not $skip) }}
        {{ if eq ($field.Label | toString) "TYPE_REPEATED" }}
          if entries := m.Get{{$fieldName}}(); len(entries) > 0 {
            for _, entry := range entries {
              if v, ok := interface{}(entry).(interface{Validate() error}); ok {
                if err := v.Validate(); err != nil {
                  return errors.Wrap(err, "embedded message verification failed: {{$fieldName}}")
                }
              }
            }
          }
        {{ else }}
          if v, ok := interface{}(m.Get{{$fieldName}}()).(interface{Validate() error}); ok {
            if err := v.Validate(); err != nil {
              return errors.Wrap(err, "embedded message verification failed: {{$fieldName}}")
            }
          }
        {{ end }}
      {{- end}}

      {{- if gt $min_len 0}}
        if len(m.Get{{$fieldName}}()) < {{$min_len}} {
          return errors.New("{{$fieldName}} must be longer than {{$min_len}}")
        }
      {{- end}}

      {{- if gt $max_len 0}}
        if len(m.Get{{$fieldName}}()) > {{$max_len}} {
          return errors.New("{{$fieldName}} must not be longer than {{$max_len}}")
        }
      {{- end}}

      {{- if $is_contact_key}}
        if err := validator.IsContactKey(m.Get{{$fieldName}}()); err != nil {
	  return err
	}
      {{- end}}

      {{- if gt $min_items 0}}
        if len(m.Get{{$fieldName}}()) < {{$min_items}} {
          return errors.New("{{$fieldName}} must contain at least {{$min_items}} item(s)")
        }
      {{- end}}

      {{- if gt $max_items 0}}
        if len(m.Get{{$fieldName}}()) > {{$max_items}} {
          return errors.New("{{$fieldName}} must contain at most {{$max_items}} item(s)")
        }
      {{- end}}

      {{- if ne $int_gt 0}}
        if m.Get{{$fieldName}}() < {{$int_gt}} {
          return errors.New("{{$fieldName}} must be greater than {{$int_gt}}")
        }
      {{- end}}

      {{- if ne $int_lt 0}}
        if m.Get{{$fieldName}}() > {{$int_lt}} {
          return errors.New("{{$fieldName}} must be lower than {{$int_gt}}")
        }
      {{- end}}

      {{- if $defined_only}}
        // WARN: $fieldName: the 'defined_only' validator is not yet implemented
      {{- end}}

    {{- end}}

    {{- if $additional_handler }}
    if err := {{$additional_handler}}; err != nil {
      return err
    }
    {{- end}}
  {{- end}}
  return nil
}
{{- end}}

{{- end}}
{{- end}}
