syntax = "proto3";

package berty.node;

import "api/node/kind.proto";
import "entity/event.proto";
import "entity/config.proto";
import "entity/contact.proto";
import "entity/device.proto";
import "entity/sender_alias.proto";
import "entity/device_push_config.proto";
import "entity/device_push_identifier.proto";
import "entity/conversation.proto";
import "entity/message.proto";
import "berty.tech/network/metric/metric.proto";
import "berty.tech/network/metric/peer.proto";
import "pkg/deviceinfo/deviceinfo.proto";
import "pkg/validate/validate.proto";
import "push/push.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";


option go_package = "berty.tech/core/api/node";

service Service {
  // return node current ID
  rpc ID (Void) returns (berty.network.metric.Peer);

  //
  // Storage sync
  //
  rpc CommitLogStream (Void) returns (stream CommitLog);

  //
  // Events
  //

  // yield new events in real-time
  rpc EventStream (EventStreamInput) returns (stream berty.entity.Event);

  // list old events
  rpc EventList (EventListInput) returns (stream berty.entity.Event);

  rpc EventUnseen (EventListInput) returns (stream berty.entity.Event);
  rpc GetEvent (berty.entity.Event) returns (berty.entity.Event);
  rpc EventSeen (berty.entity.Event) returns (Void);
  rpc EventRetry (berty.entity.Event) returns (berty.entity.Event);

  //
  // Config
  //
  rpc Config(Void) returns (berty.entity.Config);
  rpc ConfigPublic (Void) returns (berty.entity.Config);

  rpc ConfigUpdate (berty.entity.Config) returns (berty.entity.Config);

  //
  // Contacts
  //

  rpc ContactRequest (ContactRequestInput) returns (berty.entity.Contact);
  rpc ContactAcceptRequest (ContactAcceptRequestInput) returns (berty.entity.Contact);
  rpc ContactRemove (berty.entity.Contact) returns (berty.entity.Contact);
  rpc ContactUpdate (berty.entity.Contact) returns (berty.entity.Contact);
  rpc ContactList (ContactListInput) returns (stream berty.entity.Contact);
  rpc Contact (berty.entity.Contact) returns (berty.entity.Contact);
  rpc ContactSeen (berty.entity.Contact) returns (berty.entity.Contact);
  rpc ContactCheckPublicKey (berty.entity.Contact) returns (Bool);
  rpc ContactListBadge (Void) returns (Badge);

  //
  // Conversations
  //

  rpc ConversationCreate (ConversationCreateInput) returns (berty.entity.Conversation);
  rpc ConversationUpdate (berty.entity.Conversation) returns (berty.entity.Conversation);
  rpc ConversationList (ConversationListInput) returns (stream berty.entity.Conversation);
  rpc ConversationInvite (ConversationManageMembersInput) returns (berty.entity.Conversation);
  rpc ConversationExclude (ConversationManageMembersInput) returns (berty.entity.Conversation);
  rpc ConversationAddMessage (ConversationAddMessageInput) returns (berty.entity.Event);
  rpc Conversation (berty.entity.Conversation) returns (berty.entity.Conversation);
  rpc ConversationMember (berty.entity.ConversationMember) returns (berty.entity.ConversationMember);
  rpc ConversationRead (berty.entity.Conversation) returns (berty.entity.Conversation);
  rpc ConversationRemove (berty.entity.Conversation) returns (berty.entity.Conversation);
  rpc ConversationLastEvent (berty.entity.Conversation) returns (berty.entity.Event);
  rpc ConversationListBadge (Void) returns (Badge);
  rpc ConversationBadge (berty.entity.Conversation) returns (Badge);

  rpc DevicePushConfigList (Void) returns (stream berty.entity.DevicePushConfig);
  rpc DevicePushConfigCreate (DevicePushConfigCreateInput) returns (berty.entity.DevicePushConfig);
  rpc DevicePushConfigNativeRegister (Void) returns (Void);
  rpc DevicePushConfigNativeUnregister (Void) returns (Void);

  rpc DevicePushConfigRemove (berty.entity.DevicePushConfig) returns (berty.entity.DevicePushConfig);
  rpc DevicePushConfigUpdate (berty.entity.DevicePushConfig) returns (berty.entity.DevicePushConfig);


  //rpc ConversationLeave(berty.entity.Conversation) returns (berty.entity.Conversation);
  //rpc ConversationJoinRequest(berty.entity.Conversation) returns (berty.entity.Conversation);
  //rpc ConverstionAcceptJoinRequest(berty.entity.Conversation) returns (berty.entity.Conversation);

  //
  // Devtools
  //

  // HandleEvent is the unencrypted (and unsafe) version of HandleEnvelope.
  // it's only exposed over the node API, it should be completely deactivated in public releases
  rpc HandleEvent (berty.entity.Event) returns (Void) {
  };

  rpc GenerateFakeData (Void) returns (Void);

  rpc RunIntegrationTests (IntegrationTestInput) returns (IntegrationTestOutput);

  rpc DebugPing (PingDestination) returns (Void);
  rpc DebugRequeueEvent (EventIDInput) returns (berty.entity.Event);

  rpc DebugRequeueAll (Void) returns (Void);

  rpc DeviceInfos (Void) returns (berty.pkg.deviceinfo.DeviceInfos);

  rpc AppVersion (Void) returns (AppVersionOutput);

  rpc Peers (Void) returns (berty.network.metric.Peers);

  rpc Protocols (berty.network.metric.Peer) returns (ProtocolsOutput);

  rpc LogStream (LogStreamInput) returns (stream LogEntry);

  rpc LogfileList (Void) returns (stream LogfileEntry);

  rpc LogfileRead (LogfileReadInput) returns (stream LogEntry);

  rpc TestLogBackgroundError (Void) returns (Void);
  rpc TestLogBackgroundWarn  (Void) returns (Void);
  rpc TestLogBackgroundDebug (Void) returns (Void);
  rpc TestPanic              (Void) returns (Void);
  rpc TestError              (TestErrorInput) returns (Void);

  //
  // Metrics
  //

  // Yield bandwidth in real-time
  rpc MonitorBandwidth (berty.network.metric.BandwidthStats) returns (stream berty.network.metric.BandwidthStats);

  // Yield new peers in real-time
  rpc MonitorPeers (Void) returns (stream berty.network.metric.Peer);

  rpc GetListenAddrs (Void) returns (berty.network.metric.ListAddrs);

  rpc GetListenInterfaceAddrs (Void) returns (berty.network.metric.ListAddrs);

  rpc Libp2PPing (berty.network.metric.PingReq) returns (Bool);
}

message Badge {
  int32 value = 1;
}

message TestErrorInput {
  string kind = 1;
};

message ProtocolsOutput {
  repeated string protocols = 1;
};

message AppVersionOutput {
  string version = 1;
}

message PingDestination {
  string destination = 1;
}

message ContactRequestInput {
  string contact_id = 1 [
    (gogoproto.customname) = "ContactID",
    (validate.is_contact_key) = true
  ];
  string contact_override_display_name = 2;
  string intro_text = 3 [(validate.max_len) = 256];
}

message ContactAcceptRequestInput {
  string contact_id = 1 [
    (gogoproto.customname) = "ContactID",
    (validate.min_len) = 1,
    (validate.is_contact_key) = true
  ];
}

message ConversationAddMessageInput {
  berty.entity.Conversation conversation = 1 [(validate.required) = true, (validate.skip) = false];
  berty.entity.Message message = 2 [(validate.required) = true, (validate.skip) = false];
}

message EventStreamInput {
  berty.entity.Event filter = 1;
}


// Storage sync
message CommitLog {
  enum Operation {
    Create = 0;
    Update = 1;
    Delete = 2;
  }

  message Entity {
    berty.entity.Config config = 101;
    berty.entity.Contact contact = 102;
    berty.entity.Device device = 103;
    berty.entity.Conversation conversation = 104;
    berty.entity.ConversationMember conversation_member = 105;
    berty.entity.Event event = 106;
    berty.entity.DevicePushConfig device_push_config = 107;
    berty.entity.DevicePushIdentifier device_push_identifier = 108;
    berty.entity.EventDispatch event_dispatch = 109;
    berty.entity.SenderAlias sender_alias = 110;
  }

  Operation operation = 1 [(validate.defined_only) = true];
  Entity entity = 2 [(validate.required) = true, (validate.skip) = false];
}

//
// EventList
//
message EventListInput {
  berty.entity.Event filter = 1;
  NullableTrueFalse only_without_acked_at = 2;
  NullableTrueFalse only_without_seen_at = 3;
  Pagination paginate = 99;
}


//
// ContactList
//

message ContactListInput {
  berty.entity.Contact filter = 1;
  Pagination paginate = 99;
}
message ContactInput {
  berty.entity.Contact filter = 1;
}


//
// ConversationList
//

message ConversationListInput {
  berty.entity.Conversation filter = 1;
  Pagination paginate = 99;
}

message ConversationCreateInput {
  repeated berty.entity.Contact contacts = 1 [(validate.min_items) = 1];
  string title = 2;
  string topic = 3;
  berty.entity.Conversation.Kind kind = 4;
}

message ConversationManageMembersInput {
  berty.entity.Conversation conversation = 1 [(validate.required) = true, (validate.skip) = false];
  repeated berty.entity.Contact contacts = 2 [(validate.min_items) = 1];
}

message DevicePushConfigCreateInput {
  string relay_pubkey = 1 [(gogoproto.customname) = "RelayPubkey"];
  bytes push_id = 2 [(gogoproto.customname) = "PushID"];
  berty.push.DevicePushType push_type = 3;
}

//
// common
//

message Pagination {
  // argument definition
  string order_by = 1;
  bool order_desc = 2;

  // feed definition
  int32 first = 11;
  string after = 12;
  int32 last = 13;
  string before = 14;
}

message IntegrationTestInput {
  string name = 1;
}

message IntegrationTestOutput {
  string name = 1;
  bool success = 2;
  string verbose = 3;
  google.protobuf.Timestamp started_at = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  google.protobuf.Timestamp finished_at = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message Void {
  bool T = 1;
}

message Bool {
  bool ret = 1;
}

enum NullableTrueFalse {
  Null = 0;
  True = 1;
  False = 2;
}

message EventIDInput {
  string event_id = 1 [(gogoproto.customname) = "EventID"];
}

//
// Logs
//

message LogStreamInput {
  bool continues = 1;     // stay connected and wait for new lines
  string log_level = 2;   // "debug", "info", "warn", "error"
  string namespaces = 3;  // "core.*", "*", ...
  int32 last = 4;         // number of previous lines to return, capped by the rotating buffer size
}

message LogEntry {
  string line = 1;        // line
  // string log_level = 2;
  // namespace
  // ...
}

message LogfileEntry {
  string path = 1;
  int32 filesize = 2;
  google.protobuf.Timestamp created_at = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
  google.protobuf.Timestamp updated_at = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
}

message LogfileReadInput {
  string path = 1;
  // position
}

//
// Node Event (see kind.proto)
//

// NodeEvent is embedded in a classical entity.Event with entity.Event.Kind = entity.Kind_Node
// we don't need to add base information as the created_at field, as we can already
// read them from the parent entity.Event.
message NodeEvent {
  // Kind is an enum defining the event type.
  Kind kind = 1;

  // Attributes is a nested protobuf message containing per-event-type additional attributes.
  bytes attributes = 2;
}
