syntax = "proto3";

package berty.node;

import "api/protobuf/graphql/graphql.proto";
import "entity/event.proto";
import "api/node/kind.proto";
import "network/metrics.proto";
import "network/peer.proto";
import "entity/config.proto";
import "entity/contact.proto";
import "entity/device.proto";
import "entity/device_push_config.proto";
import "entity/device_push_identifier.proto";
import "entity/conversation.proto";
import "entity/message.proto";
import "push/push.proto";
import "pkg/deviceinfo/deviceinfo.proto";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";


option go_package = "berty.tech/core/api/node";

service Service {
  // return node current ID
  rpc ID (Void) returns (berty.network.Peer) {
    option (gql.graphql_type) = "Query";
  };

  //
  // Storage sync
  //
  rpc CommitLogStream (Void) returns (stream CommitLog) {
    option (gql.graphql_type) = "Subscription";
  }

  //
  // Events
  //

  // yield new events in real-time
  rpc EventStream (EventStreamInput) returns (stream berty.entity.Event) {
    option (gql.graphql_type) = "Subscription";
  };
  // list old events
  rpc EventList (EventListInput) returns (stream berty.entity.Event) {
    option (gql.graphql_output) = ".berty.node.EventListConnection";
    option (gql.graphql_type) = "Query";
  };
  rpc GetEvent (berty.entity.Event) returns (berty.entity.Event) {
    option (gql.graphql_input) = ".gql.Node";
    option (gql.graphql_type) = "Query";
  };
  rpc EventSeen (berty.entity.Event) returns (berty.entity.Event) {
    option (gql.graphql_input) = ".gql.Node";
    option (gql.graphql_type) = "Mutation";
  }

  //
  // Config
  //
  rpc ConfigPublic (Void) returns (berty.entity.Config) {
    option (gql.graphql_type) = "Query";
  }

  rpc ConfigUpdate (berty.entity.Config) returns (berty.entity.Config) {
    option (gql.graphql_type) = "Mutation";
  }

  //
  // Contacts
  //

  rpc ContactRequest (ContactRequestInput) returns (berty.entity.Contact) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ContactAcceptRequest (berty.entity.Contact) returns (berty.entity.Contact) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ContactRemove (berty.entity.Contact) returns (berty.entity.Contact) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ContactUpdate (berty.entity.Contact) returns (berty.entity.Contact) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ContactList (ContactListInput) returns (stream berty.entity.Contact) {
    option (gql.graphql_output) = ".berty.node.ContactListConnection";
    option (gql.graphql_type) = "Query";
  };
  rpc Contact (ContactInput) returns (berty.entity.Contact) {
    option (gql.graphql_type) = "Query";
  };
  rpc ContactCheckPublicKey (ContactInput) returns (Bool) {
    option (gql.graphql_type) = "Query";
  };

  //
  // Conversations
  //

  rpc ConversationCreate (ConversationCreateInput) returns (berty.entity.Conversation) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ConversationList (ConversationListInput) returns (stream berty.entity.Conversation) {
    option (gql.graphql_output) = ".berty.node.ConversationListConnection";
    option (gql.graphql_type) = "Query";
  };
  rpc ConversationInvite (ConversationManageMembersInput) returns (berty.entity.Conversation) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ConversationExclude (ConversationManageMembersInput) returns (berty.entity.Conversation) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc ConversationAddMessage (ConversationAddMessageInput) returns (berty.entity.Event) {
    option (gql.graphql_type) = "Mutation";
  };
  rpc Conversation (berty.entity.Conversation) returns (berty.entity.Conversation) {
    option (gql.graphql_type) = "Query";
  };
  rpc ConversationMember (berty.entity.ConversationMember) returns (berty.entity.ConversationMember) {
    option (gql.graphql_type) = "Query";
  };
  rpc ConversationRead (berty.entity.Conversation) returns (berty.entity.Conversation) {
    option (gql.graphql_input) = ".gql.Node";
    option (gql.graphql_type) = "Mutation";
  }
  rpc ConversationRemove (berty.entity.Conversation) returns (berty.entity.Conversation) {
    option (gql.graphql_input) = ".gql.Node";
    option (gql.graphql_type) = "Mutation";
  }
  rpc ConversationLastEvent (berty.entity.Conversation) returns (berty.entity.Event) {
    option (gql.graphql_input) = ".gql.Node";
    option (gql.graphql_type) = "Query";
  }

  rpc DevicePushConfigList (Void) returns (DevicePushConfigListOutput) {
    option (gql.graphql_type) = "Query";
  };
  rpc DevicePushConfigCreate (DevicePushConfigCreateInput) returns (berty.entity.DevicePushConfig) {
    option (gql.graphql_type) = "Mutation";
  }
  rpc DevicePushConfigNativeRegister (Void) returns (Void) {
    option (gql.graphql_type) = "Mutation";
  }
  rpc DevicePushConfigNativeUnregister (Void) returns (Void) {
    option (gql.graphql_type) = "Mutation";
  }

  rpc DevicePushConfigRemove (berty.entity.DevicePushConfig) returns (berty.entity.DevicePushConfig) {
    option (gql.graphql_input) = ".gql.Node";
    option (gql.graphql_type) = "Mutation";
  }
  rpc DevicePushConfigUpdate (berty.entity.DevicePushConfig) returns (berty.entity.DevicePushConfig) {
    option (gql.graphql_type) = "Mutation";
  }


  //rpc ConversationLeave(berty.entity.Conversation) returns (berty.entity.Conversation);
  //rpc ConversationJoinRequest(berty.entity.Conversation) returns (berty.entity.Conversation);
  //rpc ConverstionAcceptJoinRequest(berty.entity.Conversation) returns (berty.entity.Conversation);

  //
  // Devtools
  //

  // HandleEvent is the unencrypted (and unsafe) version of HandleEnvelope.
  // it's only exposed over the node API, it should be completely deactivated in public releases
  rpc HandleEvent (berty.entity.Event) returns (Void) {
  };

  rpc GenerateFakeData (Void) returns (Void) {
    option (gql.graphql_type) = "Mutation";
  };

  rpc RunIntegrationTests (IntegrationTestInput) returns (IntegrationTestOutput) {
    option (gql.graphql_type) = "Mutation";
  };

  rpc DebugPing (PingDestination) returns (Void) {
  };

  rpc DebugRequeueEvent (EventIDInput) returns (berty.entity.Event) {
    option (gql.graphql_type) = "Mutation";
  };

  rpc DebugRequeueAll (Void) returns (Void) {
    option (gql.graphql_type) = "Mutation";
  };

  rpc DeviceInfos (Void) returns (berty.pkg.deviceinfo.DeviceInfos) {
    option (gql.graphql_type) = "Query";
  };

  rpc AppVersion (Void) returns (AppVersionOutput) {
    option (gql.graphql_type) = "Query";
  };

  rpc Peers (Void) returns (berty.network.Peers) {
    option (gql.graphql_type) = "Query";
  };

  rpc Protocols (berty.network.Peer) returns (ProtocolsOutput) {
    option (gql.graphql_type) = "Query";
  };

  rpc LogStream (LogStreamInput) returns (stream LogEntry) {
    option (gql.graphql_type) = "Subscription";
  };

  rpc LogfileList (Void) returns (stream LogfileEntry) {
    option (gql.graphql_type) = "Query";
  }

  rpc LogfileRead (LogfileReadInput) returns (stream LogEntry) {
    option (gql.graphql_type) = "Subscription";
  }

  rpc TestLogBackgroundError (Void) returns (Void) { option (gql.graphql_type) = "Query"; };
  rpc TestLogBackgroundWarn  (Void) returns (Void) { option (gql.graphql_type) = "Query"; };
  rpc TestLogBackgroundDebug (Void) returns (Void) { option (gql.graphql_type) = "Query"; };
  rpc TestPanic              (Void) returns (Void) { option (gql.graphql_type) = "Query"; };
  rpc TestError              (TestErrorInput) returns (Void) { option (gql.graphql_type) = "Query"; };

  //
  // Metrics
  //

  // Yield bandwidth in real-time
  rpc MonitorBandwidth (berty.network.BandwidthStats) returns (stream berty.network.BandwidthStats) {
    option (gql.graphql_type) = "Subscription";
  };

  // Yield new peers in real-time
  rpc MonitorPeers (Void) returns (stream berty.network.Peer) {
    option (gql.graphql_type) = "Subscription";
  };

  rpc GetListenAddrs (Void) returns (berty.network.ListAddrs) {
    option (gql.graphql_type) = "Query";
  };

  rpc GetListenInterfaceAddrs (Void) returns (berty.network.ListAddrs) {
    option (gql.graphql_type) = "Query";
  };

  rpc Libp2PPing (berty.network.PingReq) returns (Bool) {
    option (gql.graphql_type) = "Query";
  };
}

message TestErrorInput {
  string kind = 1;
};

message ProtocolsOutput {
  repeated string protocols = 1;
};

message AppVersionOutput {
  string version = 1;
}

message PingDestination {
  string destination = 1;
}

message ContactRequestInput {
  berty.entity.Contact contact = 1;
  string intro_text = 2;
}

message ConversationAddMessageInput {
  berty.entity.Conversation conversation = 1;
  berty.entity.Message message = 2;
}

message EventStreamInput {
  berty.entity.Event filter = 1;
}


// Storage sync
message CommitLog {
  enum Operation {
    Create = 0;
    Update = 1;
    Delete = 2;
  }

  message Entity {
    berty.entity.Config config = 101;
    berty.entity.Contact contact = 102;
    berty.entity.Device device = 103;
    berty.entity.Conversation conversation = 104;
    berty.entity.ConversationMember conversation_member = 105;
    berty.entity.Event event = 106;
    berty.entity.DevicePushConfig device_push_config = 107;
    berty.entity.DevicePushIdentifier device_push_identifier = 108;
  }

  Operation operation = 1;
  Entity entity = 2;
}

//
// EventList
//
message EventListInput {
  berty.entity.Event filter = 1;
  NullableTrueFalse only_without_acked_at = 2;
  Pagination paginate = 99 [(gql.graphql_spread) = true];
}
message EventEdge {
  berty.entity.Event node = 1;
  string cursor = 2;
}
message EventListConnection {
  repeated EventEdge edges = 1;
  PageInfo page_info = 99 [(gql.graphql_non_nullable) = true];
}


//
// ContactList
//

message ContactListInput {
  berty.entity.Contact filter = 1;
  Pagination paginate = 99 [(gql.graphql_spread) = true];
}
message ContactEdge {
  berty.entity.Contact node = 1;
  string cursor = 2;
}
message ContactListConnection {
  repeated ContactEdge edges = 1;
  PageInfo page_info = 99 [(gql.graphql_non_nullable) = true];
}
message ContactInput {
  berty.entity.Contact filter = 1;
}


//
// ConversationList
//

message ConversationListInput {
  berty.entity.Conversation filter = 1;
  Pagination paginate = 99 [(gql.graphql_spread) = true];
}
message ConversationEdge {
  berty.entity.Conversation node = 1;
  string cursor = 2;
}
message ConversationListConnection{
  repeated ConversationEdge edges = 1;
  PageInfo page_info = 99 [(gql.graphql_non_nullable) = true];
}

message ConversationCreateInput {
  repeated berty.entity.Contact contacts = 1;
  string title = 2;
  string topic = 3;
}

message ConversationManageMembersInput {
  berty.entity.Conversation conversation = 1;
  repeated berty.entity.ConversationMember members = 2;
}

message DevicePushConfigEdge {
  berty.entity.DevicePushConfig node = 1;
  string cursor = 2;
}
message DevicePushConfigListOutput {
  repeated entity.DevicePushConfig edges = 1;
}

message DevicePushConfigCreateInput {
  string relay_pubkey = 1 [(gql.graphql_nullable) = true, (gogoproto.customname) = "RelayPubkey"];
  bytes push_id = 2 [(gql.graphql_nullable) = true, (gogoproto.customname) = "PushID"];
  berty.push.DevicePushType push_type = 3;
}

//
// common
//

message Pagination {
  // argument definition
  string order_by = 1;
  bool order_desc = 2;

  // feed definition
  int32 first = 11 [(gql.graphql_nullable) = true];
  string after = 12 [(gql.graphql_nullable) = true];
  int32 last = 13 [(gql.graphql_nullable) = true];
  string before = 14 [(gql.graphql_nullable) = true];
}

message PageInfo {
  string start_cursor = 1;
  string end_cursor = 2;
  bool has_next_page = 3;
  bool has_previous_page = 4;

  // non-standard
  uint32 count = 5;
}

message IntegrationTestInput {
  string name = 1;
}

message IntegrationTestOutput {
  string name = 1;
  bool success = 2;
  string verbose = 3;
  google.protobuf.Timestamp started_at = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  google.protobuf.Timestamp finished_at = 5 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

message Void {
  bool T = 1;
}

message Bool {
  bool ret = 1;
}

enum NullableTrueFalse {
  Null = 0;
  True = 1;
  False = 2;
}

message EventIDInput {
  string event_id = 1 [(gql.graphql_id) = true, (gogoproto.customname) = "EventID"];
}

//
// Logs
//

message LogStreamInput {
  bool continues = 1;     // stay connected and wait for new lines
  string log_level = 2;   // "debug", "info", "warn", "error"
  string namespaces = 3;  // "core.*", "*", ...
  int32 last = 4;         // number of previous lines to return, capped by the rotating buffer size
}

message LogEntry {
  string line = 1;        // line
  // string log_level = 2;
  // namespace
  // ...
}

message LogfileEntry {
  string path = 1;
  int32 filesize = 2;
  google.protobuf.Timestamp created_at = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
  google.protobuf.Timestamp updated_at = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = true];
}

message LogfileReadInput {
  string path = 1;
  // position
}

//
// Node Event (see kind.proto)
//

// NodeEvent is embedded in a classical entity.Event with entity.Event.Kind = entity.Kind_Node
// we don't need to add base information as the created_at field, as we can already
// read them from the parent entity.Event.
message NodeEvent {
  // Kind is an enum defining the event type.
  Kind kind = 1;

  // Attributes is a nested protobuf message containing per-event-type additional attributes.
  bytes attributes = 2;
}
