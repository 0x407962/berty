{{- /* Default content */ -}}
{{- if not (getStore "enumHeaderSet") -}}
// GENERATED CODE -- DO NOT EDIT!

{{setStore "enumHeaderSet" true}}
{{- end}}

{{- $EnumPackageName := .File.Package | replace "." "_" | camelCase}}
{{- $EnumFilePackageName := .File.Package | replace "." "/" }}
{{- setStore "enumPackageName" $EnumPackageName}}
{{- setStore "enumFilePackageName" $EnumFilePackageName}}
{{- setStore "enumNamespace" "" }}
{{- setStore "enumGoPackage" (splitArray ";" .File.Options.GoPackage | first) }}

{{- /* Associate GraphQL type with internal Go type */ -}}

{{- define "enumInputName" }}
  {{- $enumType := .}}
  {{- if $enumType}}
    {{- $enumTypeName := .Name | replace "." "_" | camelCase | replace "_" ""}}
    {{- if $enumTypeName | regexMatch ".*Input"}}
      {{- $enumTypeName}}
    {{- else}}
      {{- $enumTypeName}}Input
    {{- end}}
  {{- end}}
{{- end}}


{{- define "enumFormat" }}
  {
    {{- range .Value -}}
      {{ .Name | prettyjson -}}: {{ .Number | prettyjson -}},
    {{- end }}
  }
{{- end}}


{{- define "enumFormatValue" }}
  {
    {{- range .Value -}}
      {{ .Number | prettyjson -}}: {{ .Name | prettyjson -}},
    {{- end }}
  }
{{- end}}


{{- define "enumNestedType"}}
    {{- $EnumPackageName := getStore "enumPackageName"}}
    {{- $EnumGoPackage := getStore "enumGoPackage"}}
    {{- $EnumFilePackageName := getStore "enumFilePackageName"}}
    {{- range .}}
        {{- $enumBackup := getStore "enumNamespace"}}
        {{- $enumName := concat $enumBackup .Name -}}
        {{- setStore "enumName" $enumName }}
        {{- if $enumBackup }}
            {{- $enumName := concat $enumBackup "_" .Name -}}
            {{- setStore "enumName" $enumName }}
        {{- end }}

        {{- $enumName := getStore "enumName"}}
        {{- setStore "enumNamespace" $enumName}}

        {{- $enumPackage := . }}

        {{- range .EnumType }}
          export const {{$EnumPackageName}}{{template "enumInputName" $enumPackage}}{{ .Name }} = {{template "enumFormat" .}}


          export const Value{{$EnumPackageName}}{{template "enumInputName" $enumPackage}}{{ .Name }} = {{template "enumFormatValue" .}}
        {{ end }}

        {{- setStore "enumNamespace" .Name}}
        {{- if .NestedType}}
            {{- template "enumNestedType" .NestedType}}
        {{- end}}
        {{- setStore "enumNamespace" $enumBackup -}}
    {{- end}}
{{- end}}


{{- /* Top level thingy */ -}}
{{- template "enumNestedType" .File.MessageType }}

{{- range .Enum }}
  {{- $EnumPackageName := getStore "enumPackageName"}}
  export const {{$EnumPackageName}}{{template "enumInputName" .}}{{ .Name }} = {{template "enumFormat" .}}


  export const Value{{$EnumPackageName}}{{template "enumInputName" .}}{{ .Name }} = {{template "enumFormatValue" .}}

{{ end }}
