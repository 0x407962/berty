// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	strconv "strconv"
	sync "sync"
	time "time"

	node "berty.tech/core/api/node"
	models "berty.tech/core/api/node/graphql/models"
	graphql1 "berty.tech/core/api/protobuf/graphql"
	entity "berty.tech/core/entity"
	metric "berty.tech/core/network/metric"
	deviceinfo "berty.tech/core/pkg/deviceinfo"
	push "berty.tech/core/push"
	graphql "github.com/99designs/gqlgen/graphql"
	introspection "github.com/99designs/gqlgen/graphql/introspection"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	any "github.com/golang/protobuf/ptypes/any"
	gqlparser "github.com/vektah/gqlparser"
	ast "github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	BertyEntityContact() BertyEntityContactResolver
	BertyEntityConversation() BertyEntityConversationResolver
	BertyEntityConversationMember() BertyEntityConversationMemberResolver
	BertyEntityDevice() BertyEntityDeviceResolver
	BertyEntityDevicePushConfig() BertyEntityDevicePushConfigResolver
	BertyEntityDevicePushIdentifier() BertyEntityDevicePushIdentifierResolver
	BertyEntityEvent() BertyEntityEventResolver
	GoogleProtobufFieldDescriptorProto() GoogleProtobufFieldDescriptorProtoResolver
	GoogleProtobufFieldOptions() GoogleProtobufFieldOptionsResolver
	GoogleProtobufFileOptions() GoogleProtobufFileOptionsResolver
	GoogleProtobufMethodOptions() GoogleProtobufMethodOptionsResolver
	GqlNode() GqlNodeResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	BertyEntityAckAttrs struct {
		Ids    func(childComplexity int) int
		ErrMsg func(childComplexity int) int
	}

	BertyEntityConfig struct {
		Id                         func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
		Myself                     func(childComplexity int) int
		MyselfId                   func(childComplexity int) int
		CurrentDevice              func(childComplexity int) int
		CurrentDeviceId            func(childComplexity int) int
		CryptoParams               func(childComplexity int) int
		PushRelayPubkeyApns        func(childComplexity int) int
		PushRelayPubkeyFcm         func(childComplexity int) int
		NotificationsEnabled       func(childComplexity int) int
		NotificationsPreviews      func(childComplexity int) int
		DebugNotificationVerbosity func(childComplexity int) int
	}

	BertyEntityContact struct {
		Id                    func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		Sigchain              func(childComplexity int) int
		Status                func(childComplexity int) int
		Devices               func(childComplexity int) int
		DisplayName           func(childComplexity int) int
		DisplayStatus         func(childComplexity int) int
		OverrideDisplayName   func(childComplexity int) int
		OverrideDisplayStatus func(childComplexity int) int
	}

	BertyEntityContactRequestAcceptedAttrs struct {
		T func(childComplexity int) int
	}

	BertyEntityContactRequestAttrs struct {
		Me        func(childComplexity int) int
		IntroText func(childComplexity int) int
	}

	BertyEntityContactShareAttrs struct {
		Contact func(childComplexity int) int
	}

	BertyEntityContactShareMeAttrs struct {
		Me func(childComplexity int) int
	}

	BertyEntityConversation struct {
		Id        func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		ReadAt    func(childComplexity int) int
		Title     func(childComplexity int) int
		Topic     func(childComplexity int) int
		Infos     func(childComplexity int) int
		Members   func(childComplexity int) int
	}

	BertyEntityConversationInviteAttrs struct {
		Conversation func(childComplexity int) int
	}

	BertyEntityConversationMember struct {
		Id             func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		Status         func(childComplexity int) int
		Contact        func(childComplexity int) int
		ConversationId func(childComplexity int) int
		ContactId      func(childComplexity int) int
	}

	BertyEntityConversationNewMessageAttrs struct {
		Message func(childComplexity int) int
	}

	BertyEntityConversationReadAttrs struct {
		Conversation func(childComplexity int) int
	}

	BertyEntityConversationUpdateAttrs struct {
		Conversation func(childComplexity int) int
	}

	BertyEntityDevice struct {
		Id              func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		Name            func(childComplexity int) int
		Status          func(childComplexity int) int
		ApiVersion      func(childComplexity int) int
		ContactId       func(childComplexity int) int
		PushIdentifiers func(childComplexity int) int
	}

	BertyEntityDevicePushConfig struct {
		Id          func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		DeviceId    func(childComplexity int) int
		PushType    func(childComplexity int) int
		PushId      func(childComplexity int) int
		RelayPubkey func(childComplexity int) int
	}

	BertyEntityDevicePushIdentifier struct {
		Id          func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		PushInfo    func(childComplexity int) int
		RelayPubkey func(childComplexity int) int
		DeviceId    func(childComplexity int) int
	}

	BertyEntityDevicePushToAttrs struct {
		PushIdentifier func(childComplexity int) int
		Envelope       func(childComplexity int) int
		Priority       func(childComplexity int) int
	}

	BertyEntityDeviceUpdatePushConfigAttrs struct {
		Device func(childComplexity int) int
	}

	BertyEntityDevtoolsMapsetAttrs struct {
		Key func(childComplexity int) int
		Val func(childComplexity int) int
	}

	BertyEntityErr struct {
		ErrMsg func(childComplexity int) int
	}

	BertyEntityEvent struct {
		Id              func(childComplexity int) int
		SourceDeviceId  func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		SentAt          func(childComplexity int) int
		ReceivedAt      func(childComplexity int) int
		AckedAt         func(childComplexity int) int
		Direction       func(childComplexity int) int
		ApiVersion      func(childComplexity int) int
		Kind            func(childComplexity int) int
		Attributes      func(childComplexity int) int
		SeenAt          func(childComplexity int) int
		AckStatus       func(childComplexity int) int
		Dispatches      func(childComplexity int) int
		SourceContactId func(childComplexity int) int
		TargetType      func(childComplexity int) int
		TargetAddr      func(childComplexity int) int
		ErrProxy        func(childComplexity int) int
		Metadata        func(childComplexity int) int
	}

	BertyEntityEventDispatch struct {
		EventId    func(childComplexity int) int
		DeviceId   func(childComplexity int) int
		ContactId  func(childComplexity int) int
		SentAt     func(childComplexity int) int
		AckedAt    func(childComplexity int) int
		SeenAt     func(childComplexity int) int
		AckMedium  func(childComplexity int) int
		SeenMedium func(childComplexity int) int
	}

	BertyEntityMessage struct {
		Text func(childComplexity int) int
	}

	BertyEntityMetadataKeyValue struct {
		Key    func(childComplexity int) int
		Values func(childComplexity int) int
	}

	BertyEntityNodeAttrs struct {
		Kind       func(childComplexity int) int
		Attributes func(childComplexity int) int
	}

	BertyEntityPingAttrs struct {
		T func(childComplexity int) int
	}

	BertyEntitySeenAttrs struct {
		Ids func(childComplexity int) int
	}

	BertyEntitySenderAlias struct {
		Id              func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		Status          func(childComplexity int) int
		OriginDeviceId  func(childComplexity int) int
		ContactId       func(childComplexity int) int
		ConversationId  func(childComplexity int) int
		AliasIdentifier func(childComplexity int) int
		Used            func(childComplexity int) int
	}

	BertyEntitySenderAliasUpdateAttrs struct {
		Aliases func(childComplexity int) int
	}

	BertyEntitySentAttrs struct {
		Ids func(childComplexity int) int
	}

	BertyNetworkMetricBandwidthStats struct {
		Id       func(childComplexity int) int
		TotalIn  func(childComplexity int) int
		TotalOut func(childComplexity int) int
		RateIn   func(childComplexity int) int
		RateOut  func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	BertyNetworkMetricListAddrs struct {
		Addrs func(childComplexity int) int
	}

	BertyNetworkMetricPeer struct {
		Id         func(childComplexity int) int
		Addrs      func(childComplexity int) int
		Connection func(childComplexity int) int
	}

	BertyNetworkMetricPeers struct {
		List func(childComplexity int) int
	}

	BertyNetworkMetricPingReq struct {
		Str func(childComplexity int) int
	}

	BertyNodeAppVersionOutput struct {
		Version func(childComplexity int) int
	}

	BertyNodeBackgroundCriticalAttrs struct {
		ErrMsg func(childComplexity int) int
	}

	BertyNodeBackgroundErrorAttrs struct {
		ErrMsg func(childComplexity int) int
	}

	BertyNodeBackgroundWarnAttrs struct {
		ErrMsg func(childComplexity int) int
	}

	BertyNodeBool struct {
		Ret func(childComplexity int) int
	}

	BertyNodeCommitLog struct {
		Operation func(childComplexity int) int
		Entity    func(childComplexity int) int
	}

	BertyNodeCommitLogEntity struct {
		Config               func(childComplexity int) int
		Contact              func(childComplexity int) int
		Device               func(childComplexity int) int
		Conversation         func(childComplexity int) int
		ConversationMember   func(childComplexity int) int
		Event                func(childComplexity int) int
		DevicePushConfig     func(childComplexity int) int
		DevicePushIdentifier func(childComplexity int) int
	}

	BertyNodeContactEdge struct {
		Node   func(childComplexity int) int
		Cursor func(childComplexity int) int
	}

	BertyNodeContactListConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BertyNodeConversationEdge struct {
		Node   func(childComplexity int) int
		Cursor func(childComplexity int) int
	}

	BertyNodeConversationListConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BertyNodeDebugAttrs struct {
		Msg func(childComplexity int) int
	}

	BertyNodeDevicePushConfigEdge struct {
		Node   func(childComplexity int) int
		Cursor func(childComplexity int) int
	}

	BertyNodeDevicePushConfigListOutput struct {
		Edges func(childComplexity int) int
	}

	BertyNodeEventEdge struct {
		Node   func(childComplexity int) int
		Cursor func(childComplexity int) int
	}

	BertyNodeEventListConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BertyNodeIntegrationTestOutput struct {
		Name       func(childComplexity int) int
		Success    func(childComplexity int) int
		Verbose    func(childComplexity int) int
		StartedAt  func(childComplexity int) int
		FinishedAt func(childComplexity int) int
	}

	BertyNodeLogEntry struct {
		Line func(childComplexity int) int
	}

	BertyNodeLogfileEntry struct {
		Path      func(childComplexity int) int
		Filesize  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	BertyNodeNodeEvent struct {
		Kind       func(childComplexity int) int
		Attributes func(childComplexity int) int
	}

	BertyNodeNodeIsAliveAttrs struct {
		T func(childComplexity int) int
	}

	BertyNodeNodeStartedAttrs struct {
		T func(childComplexity int) int
	}

	BertyNodeNodeStoppedAttrs struct {
		ErrMsg func(childComplexity int) int
	}

	BertyNodePageInfo struct {
		StartCursor     func(childComplexity int) int
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		Count           func(childComplexity int) int
	}

	BertyNodePagination struct {
		OrderBy   func(childComplexity int) int
		OrderDesc func(childComplexity int) int
		First     func(childComplexity int) int
		After     func(childComplexity int) int
		Last      func(childComplexity int) int
		Before    func(childComplexity int) int
	}

	BertyNodePingDestination struct {
		Destination func(childComplexity int) int
	}

	BertyNodeProtocolsOutput struct {
		Protocols func(childComplexity int) int
	}

	BertyNodeStatisticsAttrs struct {
		ErrMsg                func(childComplexity int) int
		TotalNetworkBandwidth func(childComplexity int) int
		PeersCount            func(childComplexity int) int
	}

	BertyNodeVoid struct {
		T func(childComplexity int) int
	}

	BertyPkgDeviceinfoDeviceInfo struct {
		Key      func(childComplexity int) int
		Value    func(childComplexity int) int
		Category func(childComplexity int) int
		Link     func(childComplexity int) int
		Type     func(childComplexity int) int
		ErrMsg   func(childComplexity int) int
		Weight   func(childComplexity int) int
	}

	BertyPkgDeviceinfoDeviceInfos struct {
		Infos func(childComplexity int) int
	}

	BertyPushPushData struct {
		PushIdentifier func(childComplexity int) int
		Envelope       func(childComplexity int) int
		Priority       func(childComplexity int) int
	}

	BertyPushPushDestination struct {
		Nonce    func(childComplexity int) int
		PushType func(childComplexity int) int
		PushId   func(childComplexity int) int
	}

	BertyPushPushNativeIdentifier struct {
		PackageId   func(childComplexity int) int
		DeviceToken func(childComplexity int) int
	}

	GoogleProtobufAny struct {
		TypeUrl func(childComplexity int) int
		Value   func(childComplexity int) int
	}

	GoogleProtobufDescriptorProto struct {
		Name           func(childComplexity int) int
		Field          func(childComplexity int) int
		Extension      func(childComplexity int) int
		NestedType     func(childComplexity int) int
		EnumType       func(childComplexity int) int
		ExtensionRange func(childComplexity int) int
		OneofDecl      func(childComplexity int) int
		Options        func(childComplexity int) int
		ReservedRange  func(childComplexity int) int
		ReservedName   func(childComplexity int) int
	}

	GoogleProtobufDescriptorProtoExtensionRange struct {
		Start   func(childComplexity int) int
		End     func(childComplexity int) int
		Options func(childComplexity int) int
	}

	GoogleProtobufDescriptorProtoReservedRange struct {
		Start func(childComplexity int) int
		End   func(childComplexity int) int
	}

	GoogleProtobufEnumDescriptorProto struct {
		Name          func(childComplexity int) int
		Value         func(childComplexity int) int
		Options       func(childComplexity int) int
		ReservedRange func(childComplexity int) int
		ReservedName  func(childComplexity int) int
	}

	GoogleProtobufEnumDescriptorProtoEnumReservedRange struct {
		Start func(childComplexity int) int
		End   func(childComplexity int) int
	}

	GoogleProtobufEnumOptions struct {
		AllowAlias          func(childComplexity int) int
		Deprecated          func(childComplexity int) int
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufEnumValueDescriptorProto struct {
		Name    func(childComplexity int) int
		Number  func(childComplexity int) int
		Options func(childComplexity int) int
	}

	GoogleProtobufEnumValueOptions struct {
		Deprecated          func(childComplexity int) int
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufExtensionRangeOptions struct {
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufFieldDescriptorProto struct {
		Name         func(childComplexity int) int
		Number       func(childComplexity int) int
		Label        func(childComplexity int) int
		Type         func(childComplexity int) int
		TypeName     func(childComplexity int) int
		Extendee     func(childComplexity int) int
		DefaultValue func(childComplexity int) int
		OneofIndex   func(childComplexity int) int
		JsonName     func(childComplexity int) int
		Options      func(childComplexity int) int
	}

	GoogleProtobufFieldOptions struct {
		Ctype               func(childComplexity int) int
		Packed              func(childComplexity int) int
		Jstype              func(childComplexity int) int
		Lazy                func(childComplexity int) int
		Deprecated          func(childComplexity int) int
		Weak                func(childComplexity int) int
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufFileDescriptorProto struct {
		Name             func(childComplexity int) int
		Package          func(childComplexity int) int
		Dependency       func(childComplexity int) int
		PublicDependency func(childComplexity int) int
		WeakDependency   func(childComplexity int) int
		MessageType      func(childComplexity int) int
		EnumType         func(childComplexity int) int
		Service          func(childComplexity int) int
		Extension        func(childComplexity int) int
		Options          func(childComplexity int) int
		SourceCodeInfo   func(childComplexity int) int
		Syntax           func(childComplexity int) int
	}

	GoogleProtobufFileDescriptorSet struct {
		File func(childComplexity int) int
	}

	GoogleProtobufFileOptions struct {
		JavaPackage               func(childComplexity int) int
		JavaOuterClassname        func(childComplexity int) int
		JavaMultipleFiles         func(childComplexity int) int
		JavaGenerateEqualsAndHash func(childComplexity int) int
		JavaStringCheckUtf8       func(childComplexity int) int
		OptimizeFor               func(childComplexity int) int
		GoPackage                 func(childComplexity int) int
		CcGenericServices         func(childComplexity int) int
		JavaGenericServices       func(childComplexity int) int
		PyGenericServices         func(childComplexity int) int
		PhpGenericServices        func(childComplexity int) int
		Deprecated                func(childComplexity int) int
		CcEnableArenas            func(childComplexity int) int
		ObjcClassPrefix           func(childComplexity int) int
		CsharpNamespace           func(childComplexity int) int
		SwiftPrefix               func(childComplexity int) int
		PhpClassPrefix            func(childComplexity int) int
		PhpNamespace              func(childComplexity int) int
		PhpMetadataNamespace      func(childComplexity int) int
		RubyPackage               func(childComplexity int) int
		UninterpretedOption       func(childComplexity int) int
	}

	GoogleProtobufGeneratedCodeInfo struct {
		Annotation func(childComplexity int) int
	}

	GoogleProtobufGeneratedCodeInfoAnnotation struct {
		Path       func(childComplexity int) int
		SourceFile func(childComplexity int) int
		Begin      func(childComplexity int) int
		End        func(childComplexity int) int
	}

	GoogleProtobufMessageOptions struct {
		MessageSetWireFormat         func(childComplexity int) int
		NoStandardDescriptorAccessor func(childComplexity int) int
		Deprecated                   func(childComplexity int) int
		MapEntry                     func(childComplexity int) int
		UninterpretedOption          func(childComplexity int) int
	}

	GoogleProtobufMethodDescriptorProto struct {
		Name            func(childComplexity int) int
		InputType       func(childComplexity int) int
		OutputType      func(childComplexity int) int
		Options         func(childComplexity int) int
		ClientStreaming func(childComplexity int) int
		ServerStreaming func(childComplexity int) int
	}

	GoogleProtobufMethodOptions struct {
		Deprecated          func(childComplexity int) int
		IdempotencyLevel    func(childComplexity int) int
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufOneofDescriptorProto struct {
		Name    func(childComplexity int) int
		Options func(childComplexity int) int
	}

	GoogleProtobufOneofOptions struct {
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufServiceDescriptorProto struct {
		Name    func(childComplexity int) int
		Method  func(childComplexity int) int
		Options func(childComplexity int) int
	}

	GoogleProtobufServiceOptions struct {
		Deprecated          func(childComplexity int) int
		UninterpretedOption func(childComplexity int) int
	}

	GoogleProtobufSourceCodeInfo struct {
		Location func(childComplexity int) int
	}

	GoogleProtobufSourceCodeInfoLocation struct {
		Path                    func(childComplexity int) int
		Span                    func(childComplexity int) int
		LeadingComments         func(childComplexity int) int
		TrailingComments        func(childComplexity int) int
		LeadingDetachedComments func(childComplexity int) int
	}

	GoogleProtobufUninterpretedOption struct {
		Name             func(childComplexity int) int
		IdentifierValue  func(childComplexity int) int
		PositiveIntValue func(childComplexity int) int
		NegativeIntValue func(childComplexity int) int
		DoubleValue      func(childComplexity int) int
		StringValue      func(childComplexity int) int
		AggregateValue   func(childComplexity int) int
	}

	GoogleProtobufUninterpretedOptionNamePart struct {
		NamePart    func(childComplexity int) int
		IsExtension func(childComplexity int) int
	}

	GqlNode struct {
		Id func(childComplexity int) int
	}

	Mutation struct {
		EventSeen                        func(childComplexity int, id string) int
		ConfigUpdate                     func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, myself *entity.Contact, myselfId string, currentDevice *entity.Device, currentDeviceId string, cryptoParams []byte, pushRelayPubkeyApns string, pushRelayPubkeyFcm string, notificationsEnabled bool, notificationsPreviews bool, debugNotificationVerbosity *int32) int
		ContactRequest                   func(childComplexity int, contactId string, contactOverrideDisplayName string, introText string) int
		ContactAcceptRequest             func(childComplexity int, contactId string) int
		ContactRemove                    func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) int
		ContactUpdate                    func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) int
		ConversationCreate               func(childComplexity int, contacts []*entity.Contact, title string, topic string) int
		ConversationUpdate               func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, readAt *time.Time, title string, topic string, infos string, members []*entity.ConversationMember) int
		ConversationInvite               func(childComplexity int, conversation *entity.Conversation, members []*entity.ConversationMember) int
		ConversationExclude              func(childComplexity int, conversation *entity.Conversation, members []*entity.ConversationMember) int
		ConversationAddMessage           func(childComplexity int, conversation *entity.Conversation, message *entity.Message) int
		ConversationRead                 func(childComplexity int, id string) int
		ConversationRemove               func(childComplexity int, id string) int
		DevicePushConfigCreate           func(childComplexity int, relayPubkey *string, pushId []byte, pushType *int32) int
		DevicePushConfigNativeRegister   func(childComplexity int, T bool) int
		DevicePushConfigNativeUnregister func(childComplexity int, T bool) int
		DevicePushConfigRemove           func(childComplexity int, id string) int
		DevicePushConfigUpdate           func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, deviceId string, pushType *int32, pushId []byte, relayPubkey string) int
		GenerateFakeData                 func(childComplexity int, T bool) int
		RunIntegrationTests              func(childComplexity int, name string) int
		DebugRequeueEvent                func(childComplexity int, eventId string) int
		DebugRequeueAll                  func(childComplexity int, T bool) int
	}

	Query struct {
		Node                    func(childComplexity int, id string) int
		Id                      func(childComplexity int, T bool) int
		EventList               func(childComplexity int, filter *entity.Event, onlyWithoutAckedAt *int32, onlyWithoutSeenAt *int32, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) int
		EventUnseen             func(childComplexity int, filter *entity.Event, onlyWithoutAckedAt *int32, onlyWithoutSeenAt *int32, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) int
		GetEvent                func(childComplexity int, id string) int
		ConfigPublic            func(childComplexity int, T bool) int
		ContactList             func(childComplexity int, filter *entity.Contact, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) int
		Contact                 func(childComplexity int, filter *entity.Contact) int
		ContactCheckPublicKey   func(childComplexity int, filter *entity.Contact) int
		ConversationList        func(childComplexity int, filter *entity.Conversation, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) int
		Conversation            func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, readAt *time.Time, title string, topic string, infos string, members []*entity.ConversationMember) int
		ConversationMember      func(childComplexity int, id string, createdAt *time.Time, updatedAt *time.Time, status *int32, contact *entity.Contact, conversationId string, contactId string) int
		ConversationLastEvent   func(childComplexity int, id string) int
		DevicePushConfigList    func(childComplexity int, T bool) int
		DeviceInfos             func(childComplexity int, T bool) int
		AppVersion              func(childComplexity int, T bool) int
		Peers                   func(childComplexity int, T bool) int
		Protocols               func(childComplexity int, id string, addrs []string, connection *int32) int
		LogfileList             func(childComplexity int, T bool) int
		TestLogBackgroundError  func(childComplexity int, T bool) int
		TestLogBackgroundWarn   func(childComplexity int, T bool) int
		TestLogBackgroundDebug  func(childComplexity int, T bool) int
		TestPanic               func(childComplexity int, T bool) int
		TestError               func(childComplexity int, kind string) int
		GetListenAddrs          func(childComplexity int, T bool) int
		GetListenInterfaceAddrs func(childComplexity int, T bool) int
		Libp2Pping              func(childComplexity int, str string) int
	}

	Subscription struct {
		CommitLogStream  func(childComplexity int, T bool) int
		EventStream      func(childComplexity int, filter *entity.Event) int
		LogStream        func(childComplexity int, continues bool, logLevel string, namespaces string, last int32) int
		LogfileRead      func(childComplexity int, path string) int
		MonitorBandwidth func(childComplexity int, id *string, totalIn *int64, totalOut *int64, rateIn *float64, rateOut *float64, typeArg *int32) int
		MonitorPeers     func(childComplexity int, T bool) int
	}
}

type BertyEntityContactResolver interface {
	ID(ctx context.Context, obj *entity.Contact) (string, error)
}
type BertyEntityConversationResolver interface {
	ID(ctx context.Context, obj *entity.Conversation) (string, error)
}
type BertyEntityConversationMemberResolver interface {
	ID(ctx context.Context, obj *entity.ConversationMember) (string, error)

	ConversationID(ctx context.Context, obj *entity.ConversationMember) (string, error)
	ContactID(ctx context.Context, obj *entity.ConversationMember) (string, error)
}
type BertyEntityDeviceResolver interface {
	ID(ctx context.Context, obj *entity.Device) (string, error)
}
type BertyEntityDevicePushConfigResolver interface {
	ID(ctx context.Context, obj *entity.DevicePushConfig) (string, error)
}
type BertyEntityDevicePushIdentifierResolver interface {
	ID(ctx context.Context, obj *entity.DevicePushIdentifier) (string, error)
}
type BertyEntityEventResolver interface {
	ID(ctx context.Context, obj *entity.Event) (string, error)

	Attributes(ctx context.Context, obj *entity.Event) ([]byte, error)

	TargetAddr(ctx context.Context, obj *entity.Event) (string, error)
}
type GoogleProtobufFieldDescriptorProtoResolver interface {
	Label(ctx context.Context, obj *descriptor.FieldDescriptorProto) (*int32, error)
	Type(ctx context.Context, obj *descriptor.FieldDescriptorProto) (*int32, error)
}
type GoogleProtobufFieldOptionsResolver interface {
	Ctype(ctx context.Context, obj *descriptor.FieldOptions) (*int32, error)

	Jstype(ctx context.Context, obj *descriptor.FieldOptions) (*int32, error)
}
type GoogleProtobufFileOptionsResolver interface {
	OptimizeFor(ctx context.Context, obj *descriptor.FileOptions) (*int32, error)
}
type GoogleProtobufMethodOptionsResolver interface {
	IdempotencyLevel(ctx context.Context, obj *descriptor.MethodOptions) (*int32, error)
}
type GqlNodeResolver interface {
	ID(ctx context.Context, obj *graphql1.Node) (string, error)
}
type MutationResolver interface {
	EventSeen(ctx context.Context, id string) (*entity.Event, error)
	ConfigUpdate(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, myself *entity.Contact, myselfId string, currentDevice *entity.Device, currentDeviceId string, cryptoParams []byte, pushRelayPubkeyApns string, pushRelayPubkeyFcm string, notificationsEnabled bool, notificationsPreviews bool, debugNotificationVerbosity *int32) (*entity.Config, error)
	ContactRequest(ctx context.Context, contactId string, contactOverrideDisplayName string, introText string) (*entity.Contact, error)
	ContactAcceptRequest(ctx context.Context, contactId string) (*entity.Contact, error)
	ContactRemove(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) (*entity.Contact, error)
	ContactUpdate(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, sigchain []byte, status *int32, devices []*entity.Device, displayName string, displayStatus string, overrideDisplayName string, overrideDisplayStatus string) (*entity.Contact, error)
	ConversationCreate(ctx context.Context, contacts []*entity.Contact, title string, topic string) (*entity.Conversation, error)
	ConversationUpdate(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, readAt *time.Time, title string, topic string, infos string, members []*entity.ConversationMember) (*entity.Conversation, error)
	ConversationInvite(ctx context.Context, conversation *entity.Conversation, members []*entity.ConversationMember) (*entity.Conversation, error)
	ConversationExclude(ctx context.Context, conversation *entity.Conversation, members []*entity.ConversationMember) (*entity.Conversation, error)
	ConversationAddMessage(ctx context.Context, conversation *entity.Conversation, message *entity.Message) (*entity.Event, error)
	ConversationRead(ctx context.Context, id string) (*entity.Conversation, error)
	ConversationRemove(ctx context.Context, id string) (*entity.Conversation, error)
	DevicePushConfigCreate(ctx context.Context, relayPubkey *string, pushId []byte, pushType *int32) (*entity.DevicePushConfig, error)
	DevicePushConfigNativeRegister(ctx context.Context, T bool) (*node.Void, error)
	DevicePushConfigNativeUnregister(ctx context.Context, T bool) (*node.Void, error)
	DevicePushConfigRemove(ctx context.Context, id string) (*entity.DevicePushConfig, error)
	DevicePushConfigUpdate(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, deviceId string, pushType *int32, pushId []byte, relayPubkey string) (*entity.DevicePushConfig, error)
	GenerateFakeData(ctx context.Context, T bool) (*node.Void, error)
	RunIntegrationTests(ctx context.Context, name string) (*node.IntegrationTestOutput, error)
	DebugRequeueEvent(ctx context.Context, eventId string) (*entity.Event, error)
	DebugRequeueAll(ctx context.Context, T bool) (*node.Void, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id string) (models.Node, error)
	ID(ctx context.Context, T bool) (*metric.Peer, error)
	EventList(ctx context.Context, filter *entity.Event, onlyWithoutAckedAt *int32, onlyWithoutSeenAt *int32, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) (*node.EventListConnection, error)
	EventUnseen(ctx context.Context, filter *entity.Event, onlyWithoutAckedAt *int32, onlyWithoutSeenAt *int32, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) ([]*entity.Event, error)
	GetEvent(ctx context.Context, id string) (*entity.Event, error)
	ConfigPublic(ctx context.Context, T bool) (*entity.Config, error)
	ContactList(ctx context.Context, filter *entity.Contact, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) (*node.ContactListConnection, error)
	Contact(ctx context.Context, filter *entity.Contact) (*entity.Contact, error)
	ContactCheckPublicKey(ctx context.Context, filter *entity.Contact) (*node.Bool, error)
	ConversationList(ctx context.Context, filter *entity.Conversation, orderBy string, orderDesc bool, first *int32, after *string, last *int32, before *string) (*node.ConversationListConnection, error)
	Conversation(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, readAt *time.Time, title string, topic string, infos string, members []*entity.ConversationMember) (*entity.Conversation, error)
	ConversationMember(ctx context.Context, id string, createdAt *time.Time, updatedAt *time.Time, status *int32, contact *entity.Contact, conversationId string, contactId string) (*entity.ConversationMember, error)
	ConversationLastEvent(ctx context.Context, id string) (*entity.Event, error)
	DevicePushConfigList(ctx context.Context, T bool) (*node.DevicePushConfigListOutput, error)
	DeviceInfos(ctx context.Context, T bool) (*deviceinfo.DeviceInfos, error)
	AppVersion(ctx context.Context, T bool) (*node.AppVersionOutput, error)
	Peers(ctx context.Context, T bool) (*metric.Peers, error)
	Protocols(ctx context.Context, id string, addrs []string, connection *int32) (*node.ProtocolsOutput, error)
	LogfileList(ctx context.Context, T bool) ([]*node.LogfileEntry, error)
	TestLogBackgroundError(ctx context.Context, T bool) (*node.Void, error)
	TestLogBackgroundWarn(ctx context.Context, T bool) (*node.Void, error)
	TestLogBackgroundDebug(ctx context.Context, T bool) (*node.Void, error)
	TestPanic(ctx context.Context, T bool) (*node.Void, error)
	TestError(ctx context.Context, kind string) (*node.Void, error)
	GetListenAddrs(ctx context.Context, T bool) (*metric.ListAddrs, error)
	GetListenInterfaceAddrs(ctx context.Context, T bool) (*metric.ListAddrs, error)
	Libp2PPing(ctx context.Context, str string) (*node.Bool, error)
}
type SubscriptionResolver interface {
	CommitLogStream(ctx context.Context, T bool) (<-chan *node.CommitLog, error)
	EventStream(ctx context.Context, filter *entity.Event) (<-chan *entity.Event, error)
	LogStream(ctx context.Context, continues bool, logLevel string, namespaces string, last int32) (<-chan *node.LogEntry, error)
	LogfileRead(ctx context.Context, path string) (<-chan *node.LogEntry, error)
	MonitorBandwidth(ctx context.Context, id *string, totalIn *int64, totalOut *int64, rateIn *float64, rateOut *float64, typeArg *int32) (<-chan *metric.BandwidthStats, error)
	MonitorPeers(ctx context.Context, T bool) (<-chan *metric.Peer, error)
}

func field_Mutation_EventSeen_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil

}

func field_Mutation_ConfigUpdate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 *entity.Contact
	if tmp, ok := rawArgs["myself"]; ok {
		var err error
		var ptr1 entity.Contact
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityContactInput(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["myself"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["myselfId"]; ok {
		var err error
		arg4, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["myselfId"] = arg4
	var arg5 *entity.Device
	if tmp, ok := rawArgs["currentDevice"]; ok {
		var err error
		var ptr1 entity.Device
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityDeviceInput(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["currentDevice"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["currentDeviceId"]; ok {
		var err error
		arg6, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["currentDeviceId"] = arg6
	var arg7 []byte
	if tmp, ok := rawArgs["cryptoParams"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg7 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg7[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["cryptoParams"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["pushRelayPubkeyApns"]; ok {
		var err error
		arg8, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pushRelayPubkeyApns"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["pushRelayPubkeyFcm"]; ok {
		var err error
		arg9, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pushRelayPubkeyFcm"] = arg9
	var arg10 bool
	if tmp, ok := rawArgs["notificationsEnabled"]; ok {
		var err error
		arg10, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["notificationsEnabled"] = arg10
	var arg11 bool
	if tmp, ok := rawArgs["notificationsPreviews"]; ok {
		var err error
		arg11, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["notificationsPreviews"] = arg11
	var arg12 *int32
	if tmp, ok := rawArgs["debugNotificationVerbosity"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg12 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["debugNotificationVerbosity"] = arg12
	return args, nil

}

func field_Mutation_ContactRequest_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contactOverrideDisplayName"]; ok {
		var err error
		arg1, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactOverrideDisplayName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["introText"]; ok {
		var err error
		arg2, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["introText"] = arg2
	return args, nil

}

func field_Mutation_ContactAcceptRequest_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	return args, nil

}

func field_Mutation_ContactRemove_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 []byte
	if tmp, ok := rawArgs["sigchain"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg3 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg3[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["sigchain"] = arg3
	var arg4 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg4
	var arg5 []*entity.Device
	if tmp, ok := rawArgs["devices"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg5 = make([]*entity.Device, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Device
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
				arg5[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["devices"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["displayName"]; ok {
		var err error
		arg6, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayName"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["displayStatus"]; ok {
		var err error
		arg7, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayStatus"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["overrideDisplayName"]; ok {
		var err error
		arg8, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayName"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["overrideDisplayStatus"]; ok {
		var err error
		arg9, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayStatus"] = arg9
	return args, nil

}

func field_Mutation_ContactUpdate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 []byte
	if tmp, ok := rawArgs["sigchain"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg3 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg3[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["sigchain"] = arg3
	var arg4 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg4
	var arg5 []*entity.Device
	if tmp, ok := rawArgs["devices"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg5 = make([]*entity.Device, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Device
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
				arg5[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["devices"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["displayName"]; ok {
		var err error
		arg6, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayName"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["displayStatus"]; ok {
		var err error
		arg7, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayStatus"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["overrideDisplayName"]; ok {
		var err error
		arg8, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayName"] = arg8
	var arg9 string
	if tmp, ok := rawArgs["overrideDisplayStatus"]; ok {
		var err error
		arg9, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overrideDisplayStatus"] = arg9
	return args, nil

}

func field_Mutation_ConversationCreate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 []*entity.Contact
	if tmp, ok := rawArgs["contacts"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg0 = make([]*entity.Contact, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.Contact
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityContactInput(rawIf1[idx1])
				arg0[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["contacts"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["title"]; ok {
		var err error
		arg1, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["topic"]; ok {
		var err error
		arg2, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topic"] = arg2
	return args, nil

}

func field_Mutation_ConversationUpdate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["readAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["readAt"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["title"]; ok {
		var err error
		arg4, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["topic"]; ok {
		var err error
		arg5, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topic"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["infos"]; ok {
		var err error
		arg6, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["infos"] = arg6
	var arg7 []*entity.ConversationMember
	if tmp, ok := rawArgs["members"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg7 = make([]*entity.ConversationMember, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.ConversationMember
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
				arg7[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["members"] = arg7
	return args, nil

}

func field_Mutation_ConversationInvite_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["conversation"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["conversation"] = arg0
	var arg1 []*entity.ConversationMember
	if tmp, ok := rawArgs["members"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg1 = make([]*entity.ConversationMember, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.ConversationMember
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
				arg1[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["members"] = arg1
	return args, nil

}

func field_Mutation_ConversationExclude_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["conversation"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["conversation"] = arg0
	var arg1 []*entity.ConversationMember
	if tmp, ok := rawArgs["members"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg1 = make([]*entity.ConversationMember, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.ConversationMember
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
				arg1[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["members"] = arg1
	return args, nil

}

func field_Mutation_ConversationAddMessage_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["conversation"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["conversation"] = arg0
	var arg1 *entity.Message
	if tmp, ok := rawArgs["message"]; ok {
		var err error
		var ptr1 entity.Message
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityMessageInput(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["message"] = arg1
	return args, nil

}

func field_Mutation_ConversationRead_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil

}

func field_Mutation_ConversationRemove_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil

}

func field_Mutation_DevicePushConfigCreate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["relayPubkey"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["relayPubkey"] = arg0
	var arg1 []byte
	if tmp, ok := rawArgs["pushId"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg1 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg1[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["pushId"] = arg1
	var arg2 *int32
	if tmp, ok := rawArgs["pushType"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["pushType"] = arg2
	return args, nil

}

func field_Mutation_DevicePushConfigNativeRegister_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Mutation_DevicePushConfigNativeUnregister_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Mutation_DevicePushConfigRemove_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil

}

func field_Mutation_DevicePushConfigUpdate_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["deviceId"]; ok {
		var err error
		arg3, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deviceId"] = arg3
	var arg4 *int32
	if tmp, ok := rawArgs["pushType"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["pushType"] = arg4
	var arg5 []byte
	if tmp, ok := rawArgs["pushId"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg5 = make([]byte, len(rawIf1))
		for idx1 := range rawIf1 {
			arg5[idx1], err = models.UnmarshalByte(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["pushId"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["relayPubkey"]; ok {
		var err error
		arg6, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["relayPubkey"] = arg6
	return args, nil

}

func field_Mutation_GenerateFakeData_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Mutation_RunIntegrationTests_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Mutation_DebugRequeueEvent_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["eventId"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["eventId"] = arg0
	return args, nil

}

func field_Mutation_DebugRequeueAll_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_node_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil

}

func field_Query_ID_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_EventList_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Event
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 entity.Event
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityEventInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int32
	if tmp, ok := rawArgs["onlyWithoutAckedAt"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["onlyWithoutAckedAt"] = arg1
	var arg2 *int32
	if tmp, ok := rawArgs["onlyWithoutSeenAt"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["onlyWithoutSeenAt"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["orderBy"]; ok {
		var err error
		arg3, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 bool
	if tmp, ok := rawArgs["orderDesc"]; ok {
		var err error
		arg4, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDesc"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg6
	var arg7 *int32
	if tmp, ok := rawArgs["last"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg7 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["before"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg8 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg8
	return args, nil

}

func field_Query_EventUnseen_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Event
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 entity.Event
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityEventInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int32
	if tmp, ok := rawArgs["onlyWithoutAckedAt"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["onlyWithoutAckedAt"] = arg1
	var arg2 *int32
	if tmp, ok := rawArgs["onlyWithoutSeenAt"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["onlyWithoutSeenAt"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["orderBy"]; ok {
		var err error
		arg3, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 bool
	if tmp, ok := rawArgs["orderDesc"]; ok {
		var err error
		arg4, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDesc"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg6
	var arg7 *int32
	if tmp, ok := rawArgs["last"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg7 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["before"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg8 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg8
	return args, nil

}

func field_Query_GetEvent_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil

}

func field_Query_ConfigPublic_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_ContactList_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Contact
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 entity.Contact
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityContactInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["orderBy"]; ok {
		var err error
		arg1, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["orderDesc"]; ok {
		var err error
		arg2, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDesc"] = arg2
	var arg3 *int32
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["last"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["before"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg6
	return args, nil

}

func field_Query_Contact_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Contact
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 entity.Contact
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityContactInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil

}

func field_Query_ContactCheckPublicKey_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Contact
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 entity.Contact
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityContactInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil

}

func field_Query_ConversationList_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Conversation
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 entity.Conversation
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityConversationInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["orderBy"]; ok {
		var err error
		arg1, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["orderDesc"]; ok {
		var err error
		arg2, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDesc"] = arg2
	var arg3 *int32
	if tmp, ok := rawArgs["first"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["after"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["after"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["last"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalInt32(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["before"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg6 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["before"] = arg6
	return args, nil

}

func field_Query_Conversation_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 *time.Time
	if tmp, ok := rawArgs["readAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["readAt"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["title"]; ok {
		var err error
		arg4, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["title"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["topic"]; ok {
		var err error
		arg5, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["topic"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["infos"]; ok {
		var err error
		arg6, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["infos"] = arg6
	var arg7 []*entity.ConversationMember
	if tmp, ok := rawArgs["members"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg7 = make([]*entity.ConversationMember, len(rawIf1))
		for idx1 := range rawIf1 {
			var ptr2 entity.ConversationMember
			if rawIf1[idx1] != nil {
				ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
				arg7[idx1] = &ptr2
			}
		}
		if err != nil {
			return nil, err
		}
	}
	args["members"] = arg7
	return args, nil

}

func field_Query_ConversationMember_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *time.Time
	if tmp, ok := rawArgs["createdAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["createdAt"] = arg1
	var arg2 *time.Time
	if tmp, ok := rawArgs["updatedAt"]; ok {
		var err error
		var ptr1 time.Time
		if tmp != nil {
			ptr1, err = models.UnmarshalTime(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["updatedAt"] = arg2
	var arg3 *int32
	if tmp, ok := rawArgs["status"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg3
	var arg4 *entity.Contact
	if tmp, ok := rawArgs["contact"]; ok {
		var err error
		var ptr1 entity.Contact
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityContactInput(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["contact"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["conversationId"]; ok {
		var err error
		arg5, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conversationId"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["contactId"]; ok {
		var err error
		arg6, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg6
	return args, nil

}

func field_Query_ConversationLastEvent_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalID(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil

}

func field_Query_DevicePushConfigList_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_DeviceInfos_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_AppVersion_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_Peers_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_Protocols_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		arg0, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["addrs"]; ok {
		var err error
		var rawIf1 []interface{}
		if tmp != nil {
			if tmp1, ok := tmp.([]interface{}); ok {
				rawIf1 = tmp1
			} else {
				rawIf1 = []interface{}{tmp}
			}
		}
		arg1 = make([]string, len(rawIf1))
		for idx1 := range rawIf1 {
			arg1[idx1], err = models.UnmarshalString(rawIf1[idx1])
		}
		if err != nil {
			return nil, err
		}
	}
	args["addrs"] = arg1
	var arg2 *int32
	if tmp, ok := rawArgs["connection"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["connection"] = arg2
	return args, nil

}

func field_Query_LogfileList_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_TestLogBackgroundError_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_TestLogBackgroundWarn_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_TestLogBackgroundDebug_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_TestPanic_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_TestError_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["kind"]; ok {
		var err error
		arg0, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kind"] = arg0
	return args, nil

}

func field_Query_GetListenAddrs_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_GetListenInterfaceAddrs_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Query_Libp2PPing_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["str"]; ok {
		var err error
		arg0, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["str"] = arg0
	return args, nil

}

func field_Query___type_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field_Subscription_CommitLogStream_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field_Subscription_EventStream_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *entity.Event
	if tmp, ok := rawArgs["filter"]; ok {
		var err error
		var ptr1 entity.Event
		if tmp != nil {
			ptr1, err = UnmarshalBertyEntityEventInput(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil

}

func field_Subscription_LogStream_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["continues"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["continues"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["logLevel"]; ok {
		var err error
		arg1, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["logLevel"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["namespaces"]; ok {
		var err error
		arg2, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["namespaces"] = arg2
	var arg3 int32
	if tmp, ok := rawArgs["last"]; ok {
		var err error
		arg3, err = models.UnmarshalInt32(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["last"] = arg3
	return args, nil

}

func field_Subscription_LogfileRead_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["path"]; ok {
		var err error
		arg0, err = models.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["path"] = arg0
	return args, nil

}

func field_Subscription_MonitorBandwidth_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = models.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["totalIn"]; ok {
		var err error
		var ptr1 int64
		if tmp != nil {
			ptr1, err = models.UnmarshalInt64(tmp)
			arg1 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["totalIn"] = arg1
	var arg2 *int64
	if tmp, ok := rawArgs["totalOut"]; ok {
		var err error
		var ptr1 int64
		if tmp != nil {
			ptr1, err = models.UnmarshalInt64(tmp)
			arg2 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["totalOut"] = arg2
	var arg3 *float64
	if tmp, ok := rawArgs["rateIn"]; ok {
		var err error
		var ptr1 float64
		if tmp != nil {
			ptr1, err = models.UnmarshalDouble(tmp)
			arg3 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["rateIn"] = arg3
	var arg4 *float64
	if tmp, ok := rawArgs["rateOut"]; ok {
		var err error
		var ptr1 float64
		if tmp != nil {
			ptr1, err = models.UnmarshalDouble(tmp)
			arg4 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["rateOut"] = arg4
	var arg5 *int32
	if tmp, ok := rawArgs["type"]; ok {
		var err error
		var ptr1 int32
		if tmp != nil {
			ptr1, err = models.UnmarshalEnum(tmp)
			arg5 = &ptr1
		}

		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg5
	return args, nil

}

func field_Subscription_MonitorPeers_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["T"]; ok {
		var err error
		arg0, err = models.UnmarshalBool(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["T"] = arg0
	return args, nil

}

func field___Type_fields_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

func field___Type_enumValues_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	switch typeName + "." + field {

	case "BertyEntityAckAttrs.ids":
		if e.complexity.BertyEntityAckAttrs.Ids == nil {
			break
		}

		return e.complexity.BertyEntityAckAttrs.Ids(childComplexity), true

	case "BertyEntityAckAttrs.errMsg":
		if e.complexity.BertyEntityAckAttrs.ErrMsg == nil {
			break
		}

		return e.complexity.BertyEntityAckAttrs.ErrMsg(childComplexity), true

	case "BertyEntityConfig.id":
		if e.complexity.BertyEntityConfig.Id == nil {
			break
		}

		return e.complexity.BertyEntityConfig.Id(childComplexity), true

	case "BertyEntityConfig.createdAt":
		if e.complexity.BertyEntityConfig.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConfig.CreatedAt(childComplexity), true

	case "BertyEntityConfig.updatedAt":
		if e.complexity.BertyEntityConfig.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConfig.UpdatedAt(childComplexity), true

	case "BertyEntityConfig.myself":
		if e.complexity.BertyEntityConfig.Myself == nil {
			break
		}

		return e.complexity.BertyEntityConfig.Myself(childComplexity), true

	case "BertyEntityConfig.myselfId":
		if e.complexity.BertyEntityConfig.MyselfId == nil {
			break
		}

		return e.complexity.BertyEntityConfig.MyselfId(childComplexity), true

	case "BertyEntityConfig.currentDevice":
		if e.complexity.BertyEntityConfig.CurrentDevice == nil {
			break
		}

		return e.complexity.BertyEntityConfig.CurrentDevice(childComplexity), true

	case "BertyEntityConfig.currentDeviceId":
		if e.complexity.BertyEntityConfig.CurrentDeviceId == nil {
			break
		}

		return e.complexity.BertyEntityConfig.CurrentDeviceId(childComplexity), true

	case "BertyEntityConfig.cryptoParams":
		if e.complexity.BertyEntityConfig.CryptoParams == nil {
			break
		}

		return e.complexity.BertyEntityConfig.CryptoParams(childComplexity), true

	case "BertyEntityConfig.pushRelayPubkeyApns":
		if e.complexity.BertyEntityConfig.PushRelayPubkeyApns == nil {
			break
		}

		return e.complexity.BertyEntityConfig.PushRelayPubkeyApns(childComplexity), true

	case "BertyEntityConfig.pushRelayPubkeyFcm":
		if e.complexity.BertyEntityConfig.PushRelayPubkeyFcm == nil {
			break
		}

		return e.complexity.BertyEntityConfig.PushRelayPubkeyFcm(childComplexity), true

	case "BertyEntityConfig.notificationsEnabled":
		if e.complexity.BertyEntityConfig.NotificationsEnabled == nil {
			break
		}

		return e.complexity.BertyEntityConfig.NotificationsEnabled(childComplexity), true

	case "BertyEntityConfig.notificationsPreviews":
		if e.complexity.BertyEntityConfig.NotificationsPreviews == nil {
			break
		}

		return e.complexity.BertyEntityConfig.NotificationsPreviews(childComplexity), true

	case "BertyEntityConfig.debugNotificationVerbosity":
		if e.complexity.BertyEntityConfig.DebugNotificationVerbosity == nil {
			break
		}

		return e.complexity.BertyEntityConfig.DebugNotificationVerbosity(childComplexity), true

	case "BertyEntityContact.id":
		if e.complexity.BertyEntityContact.Id == nil {
			break
		}

		return e.complexity.BertyEntityContact.Id(childComplexity), true

	case "BertyEntityContact.createdAt":
		if e.complexity.BertyEntityContact.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityContact.CreatedAt(childComplexity), true

	case "BertyEntityContact.updatedAt":
		if e.complexity.BertyEntityContact.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityContact.UpdatedAt(childComplexity), true

	case "BertyEntityContact.sigchain":
		if e.complexity.BertyEntityContact.Sigchain == nil {
			break
		}

		return e.complexity.BertyEntityContact.Sigchain(childComplexity), true

	case "BertyEntityContact.status":
		if e.complexity.BertyEntityContact.Status == nil {
			break
		}

		return e.complexity.BertyEntityContact.Status(childComplexity), true

	case "BertyEntityContact.devices":
		if e.complexity.BertyEntityContact.Devices == nil {
			break
		}

		return e.complexity.BertyEntityContact.Devices(childComplexity), true

	case "BertyEntityContact.displayName":
		if e.complexity.BertyEntityContact.DisplayName == nil {
			break
		}

		return e.complexity.BertyEntityContact.DisplayName(childComplexity), true

	case "BertyEntityContact.displayStatus":
		if e.complexity.BertyEntityContact.DisplayStatus == nil {
			break
		}

		return e.complexity.BertyEntityContact.DisplayStatus(childComplexity), true

	case "BertyEntityContact.overrideDisplayName":
		if e.complexity.BertyEntityContact.OverrideDisplayName == nil {
			break
		}

		return e.complexity.BertyEntityContact.OverrideDisplayName(childComplexity), true

	case "BertyEntityContact.overrideDisplayStatus":
		if e.complexity.BertyEntityContact.OverrideDisplayStatus == nil {
			break
		}

		return e.complexity.BertyEntityContact.OverrideDisplayStatus(childComplexity), true

	case "BertyEntityContactRequestAcceptedAttrs.T":
		if e.complexity.BertyEntityContactRequestAcceptedAttrs.T == nil {
			break
		}

		return e.complexity.BertyEntityContactRequestAcceptedAttrs.T(childComplexity), true

	case "BertyEntityContactRequestAttrs.me":
		if e.complexity.BertyEntityContactRequestAttrs.Me == nil {
			break
		}

		return e.complexity.BertyEntityContactRequestAttrs.Me(childComplexity), true

	case "BertyEntityContactRequestAttrs.introText":
		if e.complexity.BertyEntityContactRequestAttrs.IntroText == nil {
			break
		}

		return e.complexity.BertyEntityContactRequestAttrs.IntroText(childComplexity), true

	case "BertyEntityContactShareAttrs.contact":
		if e.complexity.BertyEntityContactShareAttrs.Contact == nil {
			break
		}

		return e.complexity.BertyEntityContactShareAttrs.Contact(childComplexity), true

	case "BertyEntityContactShareMeAttrs.me":
		if e.complexity.BertyEntityContactShareMeAttrs.Me == nil {
			break
		}

		return e.complexity.BertyEntityContactShareMeAttrs.Me(childComplexity), true

	case "BertyEntityConversation.id":
		if e.complexity.BertyEntityConversation.Id == nil {
			break
		}

		return e.complexity.BertyEntityConversation.Id(childComplexity), true

	case "BertyEntityConversation.createdAt":
		if e.complexity.BertyEntityConversation.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversation.CreatedAt(childComplexity), true

	case "BertyEntityConversation.updatedAt":
		if e.complexity.BertyEntityConversation.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversation.UpdatedAt(childComplexity), true

	case "BertyEntityConversation.readAt":
		if e.complexity.BertyEntityConversation.ReadAt == nil {
			break
		}

		return e.complexity.BertyEntityConversation.ReadAt(childComplexity), true

	case "BertyEntityConversation.title":
		if e.complexity.BertyEntityConversation.Title == nil {
			break
		}

		return e.complexity.BertyEntityConversation.Title(childComplexity), true

	case "BertyEntityConversation.topic":
		if e.complexity.BertyEntityConversation.Topic == nil {
			break
		}

		return e.complexity.BertyEntityConversation.Topic(childComplexity), true

	case "BertyEntityConversation.infos":
		if e.complexity.BertyEntityConversation.Infos == nil {
			break
		}

		return e.complexity.BertyEntityConversation.Infos(childComplexity), true

	case "BertyEntityConversation.members":
		if e.complexity.BertyEntityConversation.Members == nil {
			break
		}

		return e.complexity.BertyEntityConversation.Members(childComplexity), true

	case "BertyEntityConversationInviteAttrs.conversation":
		if e.complexity.BertyEntityConversationInviteAttrs.Conversation == nil {
			break
		}

		return e.complexity.BertyEntityConversationInviteAttrs.Conversation(childComplexity), true

	case "BertyEntityConversationMember.id":
		if e.complexity.BertyEntityConversationMember.Id == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.Id(childComplexity), true

	case "BertyEntityConversationMember.createdAt":
		if e.complexity.BertyEntityConversationMember.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.CreatedAt(childComplexity), true

	case "BertyEntityConversationMember.updatedAt":
		if e.complexity.BertyEntityConversationMember.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.UpdatedAt(childComplexity), true

	case "BertyEntityConversationMember.status":
		if e.complexity.BertyEntityConversationMember.Status == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.Status(childComplexity), true

	case "BertyEntityConversationMember.contact":
		if e.complexity.BertyEntityConversationMember.Contact == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.Contact(childComplexity), true

	case "BertyEntityConversationMember.conversationId":
		if e.complexity.BertyEntityConversationMember.ConversationId == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.ConversationId(childComplexity), true

	case "BertyEntityConversationMember.contactId":
		if e.complexity.BertyEntityConversationMember.ContactId == nil {
			break
		}

		return e.complexity.BertyEntityConversationMember.ContactId(childComplexity), true

	case "BertyEntityConversationNewMessageAttrs.message":
		if e.complexity.BertyEntityConversationNewMessageAttrs.Message == nil {
			break
		}

		return e.complexity.BertyEntityConversationNewMessageAttrs.Message(childComplexity), true

	case "BertyEntityConversationReadAttrs.conversation":
		if e.complexity.BertyEntityConversationReadAttrs.Conversation == nil {
			break
		}

		return e.complexity.BertyEntityConversationReadAttrs.Conversation(childComplexity), true

	case "BertyEntityConversationUpdateAttrs.conversation":
		if e.complexity.BertyEntityConversationUpdateAttrs.Conversation == nil {
			break
		}

		return e.complexity.BertyEntityConversationUpdateAttrs.Conversation(childComplexity), true

	case "BertyEntityDevice.id":
		if e.complexity.BertyEntityDevice.Id == nil {
			break
		}

		return e.complexity.BertyEntityDevice.Id(childComplexity), true

	case "BertyEntityDevice.createdAt":
		if e.complexity.BertyEntityDevice.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityDevice.CreatedAt(childComplexity), true

	case "BertyEntityDevice.updatedAt":
		if e.complexity.BertyEntityDevice.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityDevice.UpdatedAt(childComplexity), true

	case "BertyEntityDevice.name":
		if e.complexity.BertyEntityDevice.Name == nil {
			break
		}

		return e.complexity.BertyEntityDevice.Name(childComplexity), true

	case "BertyEntityDevice.status":
		if e.complexity.BertyEntityDevice.Status == nil {
			break
		}

		return e.complexity.BertyEntityDevice.Status(childComplexity), true

	case "BertyEntityDevice.apiVersion":
		if e.complexity.BertyEntityDevice.ApiVersion == nil {
			break
		}

		return e.complexity.BertyEntityDevice.ApiVersion(childComplexity), true

	case "BertyEntityDevice.contactId":
		if e.complexity.BertyEntityDevice.ContactId == nil {
			break
		}

		return e.complexity.BertyEntityDevice.ContactId(childComplexity), true

	case "BertyEntityDevice.pushIdentifiers":
		if e.complexity.BertyEntityDevice.PushIdentifiers == nil {
			break
		}

		return e.complexity.BertyEntityDevice.PushIdentifiers(childComplexity), true

	case "BertyEntityDevicePushConfig.id":
		if e.complexity.BertyEntityDevicePushConfig.Id == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushConfig.Id(childComplexity), true

	case "BertyEntityDevicePushConfig.createdAt":
		if e.complexity.BertyEntityDevicePushConfig.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushConfig.CreatedAt(childComplexity), true

	case "BertyEntityDevicePushConfig.updatedAt":
		if e.complexity.BertyEntityDevicePushConfig.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushConfig.UpdatedAt(childComplexity), true

	case "BertyEntityDevicePushConfig.deviceId":
		if e.complexity.BertyEntityDevicePushConfig.DeviceId == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushConfig.DeviceId(childComplexity), true

	case "BertyEntityDevicePushConfig.pushType":
		if e.complexity.BertyEntityDevicePushConfig.PushType == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushConfig.PushType(childComplexity), true

	case "BertyEntityDevicePushConfig.pushId":
		if e.complexity.BertyEntityDevicePushConfig.PushId == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushConfig.PushId(childComplexity), true

	case "BertyEntityDevicePushConfig.relayPubkey":
		if e.complexity.BertyEntityDevicePushConfig.RelayPubkey == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushConfig.RelayPubkey(childComplexity), true

	case "BertyEntityDevicePushIdentifier.id":
		if e.complexity.BertyEntityDevicePushIdentifier.Id == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushIdentifier.Id(childComplexity), true

	case "BertyEntityDevicePushIdentifier.createdAt":
		if e.complexity.BertyEntityDevicePushIdentifier.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushIdentifier.CreatedAt(childComplexity), true

	case "BertyEntityDevicePushIdentifier.updatedAt":
		if e.complexity.BertyEntityDevicePushIdentifier.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushIdentifier.UpdatedAt(childComplexity), true

	case "BertyEntityDevicePushIdentifier.pushInfo":
		if e.complexity.BertyEntityDevicePushIdentifier.PushInfo == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushIdentifier.PushInfo(childComplexity), true

	case "BertyEntityDevicePushIdentifier.relayPubkey":
		if e.complexity.BertyEntityDevicePushIdentifier.RelayPubkey == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushIdentifier.RelayPubkey(childComplexity), true

	case "BertyEntityDevicePushIdentifier.deviceId":
		if e.complexity.BertyEntityDevicePushIdentifier.DeviceId == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushIdentifier.DeviceId(childComplexity), true

	case "BertyEntityDevicePushToAttrs.pushIdentifier":
		if e.complexity.BertyEntityDevicePushToAttrs.PushIdentifier == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushToAttrs.PushIdentifier(childComplexity), true

	case "BertyEntityDevicePushToAttrs.envelope":
		if e.complexity.BertyEntityDevicePushToAttrs.Envelope == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushToAttrs.Envelope(childComplexity), true

	case "BertyEntityDevicePushToAttrs.priority":
		if e.complexity.BertyEntityDevicePushToAttrs.Priority == nil {
			break
		}

		return e.complexity.BertyEntityDevicePushToAttrs.Priority(childComplexity), true

	case "BertyEntityDeviceUpdatePushConfigAttrs.device":
		if e.complexity.BertyEntityDeviceUpdatePushConfigAttrs.Device == nil {
			break
		}

		return e.complexity.BertyEntityDeviceUpdatePushConfigAttrs.Device(childComplexity), true

	case "BertyEntityDevtoolsMapsetAttrs.key":
		if e.complexity.BertyEntityDevtoolsMapsetAttrs.Key == nil {
			break
		}

		return e.complexity.BertyEntityDevtoolsMapsetAttrs.Key(childComplexity), true

	case "BertyEntityDevtoolsMapsetAttrs.val":
		if e.complexity.BertyEntityDevtoolsMapsetAttrs.Val == nil {
			break
		}

		return e.complexity.BertyEntityDevtoolsMapsetAttrs.Val(childComplexity), true

	case "BertyEntityErr.errMsg":
		if e.complexity.BertyEntityErr.ErrMsg == nil {
			break
		}

		return e.complexity.BertyEntityErr.ErrMsg(childComplexity), true

	case "BertyEntityEvent.id":
		if e.complexity.BertyEntityEvent.Id == nil {
			break
		}

		return e.complexity.BertyEntityEvent.Id(childComplexity), true

	case "BertyEntityEvent.sourceDeviceId":
		if e.complexity.BertyEntityEvent.SourceDeviceId == nil {
			break
		}

		return e.complexity.BertyEntityEvent.SourceDeviceId(childComplexity), true

	case "BertyEntityEvent.createdAt":
		if e.complexity.BertyEntityEvent.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntityEvent.CreatedAt(childComplexity), true

	case "BertyEntityEvent.updatedAt":
		if e.complexity.BertyEntityEvent.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntityEvent.UpdatedAt(childComplexity), true

	case "BertyEntityEvent.sentAt":
		if e.complexity.BertyEntityEvent.SentAt == nil {
			break
		}

		return e.complexity.BertyEntityEvent.SentAt(childComplexity), true

	case "BertyEntityEvent.receivedAt":
		if e.complexity.BertyEntityEvent.ReceivedAt == nil {
			break
		}

		return e.complexity.BertyEntityEvent.ReceivedAt(childComplexity), true

	case "BertyEntityEvent.ackedAt":
		if e.complexity.BertyEntityEvent.AckedAt == nil {
			break
		}

		return e.complexity.BertyEntityEvent.AckedAt(childComplexity), true

	case "BertyEntityEvent.direction":
		if e.complexity.BertyEntityEvent.Direction == nil {
			break
		}

		return e.complexity.BertyEntityEvent.Direction(childComplexity), true

	case "BertyEntityEvent.apiVersion":
		if e.complexity.BertyEntityEvent.ApiVersion == nil {
			break
		}

		return e.complexity.BertyEntityEvent.ApiVersion(childComplexity), true

	case "BertyEntityEvent.kind":
		if e.complexity.BertyEntityEvent.Kind == nil {
			break
		}

		return e.complexity.BertyEntityEvent.Kind(childComplexity), true

	case "BertyEntityEvent.attributes":
		if e.complexity.BertyEntityEvent.Attributes == nil {
			break
		}

		return e.complexity.BertyEntityEvent.Attributes(childComplexity), true

	case "BertyEntityEvent.seenAt":
		if e.complexity.BertyEntityEvent.SeenAt == nil {
			break
		}

		return e.complexity.BertyEntityEvent.SeenAt(childComplexity), true

	case "BertyEntityEvent.ackStatus":
		if e.complexity.BertyEntityEvent.AckStatus == nil {
			break
		}

		return e.complexity.BertyEntityEvent.AckStatus(childComplexity), true

	case "BertyEntityEvent.dispatches":
		if e.complexity.BertyEntityEvent.Dispatches == nil {
			break
		}

		return e.complexity.BertyEntityEvent.Dispatches(childComplexity), true

	case "BertyEntityEvent.sourceContactId":
		if e.complexity.BertyEntityEvent.SourceContactId == nil {
			break
		}

		return e.complexity.BertyEntityEvent.SourceContactId(childComplexity), true

	case "BertyEntityEvent.targetType":
		if e.complexity.BertyEntityEvent.TargetType == nil {
			break
		}

		return e.complexity.BertyEntityEvent.TargetType(childComplexity), true

	case "BertyEntityEvent.targetAddr":
		if e.complexity.BertyEntityEvent.TargetAddr == nil {
			break
		}

		return e.complexity.BertyEntityEvent.TargetAddr(childComplexity), true

	case "BertyEntityEvent.errProxy":
		if e.complexity.BertyEntityEvent.ErrProxy == nil {
			break
		}

		return e.complexity.BertyEntityEvent.ErrProxy(childComplexity), true

	case "BertyEntityEvent.metadata":
		if e.complexity.BertyEntityEvent.Metadata == nil {
			break
		}

		return e.complexity.BertyEntityEvent.Metadata(childComplexity), true

	case "BertyEntityEventDispatch.eventId":
		if e.complexity.BertyEntityEventDispatch.EventId == nil {
			break
		}

		return e.complexity.BertyEntityEventDispatch.EventId(childComplexity), true

	case "BertyEntityEventDispatch.deviceId":
		if e.complexity.BertyEntityEventDispatch.DeviceId == nil {
			break
		}

		return e.complexity.BertyEntityEventDispatch.DeviceId(childComplexity), true

	case "BertyEntityEventDispatch.contactId":
		if e.complexity.BertyEntityEventDispatch.ContactId == nil {
			break
		}

		return e.complexity.BertyEntityEventDispatch.ContactId(childComplexity), true

	case "BertyEntityEventDispatch.sentAt":
		if e.complexity.BertyEntityEventDispatch.SentAt == nil {
			break
		}

		return e.complexity.BertyEntityEventDispatch.SentAt(childComplexity), true

	case "BertyEntityEventDispatch.ackedAt":
		if e.complexity.BertyEntityEventDispatch.AckedAt == nil {
			break
		}

		return e.complexity.BertyEntityEventDispatch.AckedAt(childComplexity), true

	case "BertyEntityEventDispatch.seenAt":
		if e.complexity.BertyEntityEventDispatch.SeenAt == nil {
			break
		}

		return e.complexity.BertyEntityEventDispatch.SeenAt(childComplexity), true

	case "BertyEntityEventDispatch.ackMedium":
		if e.complexity.BertyEntityEventDispatch.AckMedium == nil {
			break
		}

		return e.complexity.BertyEntityEventDispatch.AckMedium(childComplexity), true

	case "BertyEntityEventDispatch.seenMedium":
		if e.complexity.BertyEntityEventDispatch.SeenMedium == nil {
			break
		}

		return e.complexity.BertyEntityEventDispatch.SeenMedium(childComplexity), true

	case "BertyEntityMessage.text":
		if e.complexity.BertyEntityMessage.Text == nil {
			break
		}

		return e.complexity.BertyEntityMessage.Text(childComplexity), true

	case "BertyEntityMetadataKeyValue.key":
		if e.complexity.BertyEntityMetadataKeyValue.Key == nil {
			break
		}

		return e.complexity.BertyEntityMetadataKeyValue.Key(childComplexity), true

	case "BertyEntityMetadataKeyValue.values":
		if e.complexity.BertyEntityMetadataKeyValue.Values == nil {
			break
		}

		return e.complexity.BertyEntityMetadataKeyValue.Values(childComplexity), true

	case "BertyEntityNodeAttrs.kind":
		if e.complexity.BertyEntityNodeAttrs.Kind == nil {
			break
		}

		return e.complexity.BertyEntityNodeAttrs.Kind(childComplexity), true

	case "BertyEntityNodeAttrs.attributes":
		if e.complexity.BertyEntityNodeAttrs.Attributes == nil {
			break
		}

		return e.complexity.BertyEntityNodeAttrs.Attributes(childComplexity), true

	case "BertyEntityPingAttrs.T":
		if e.complexity.BertyEntityPingAttrs.T == nil {
			break
		}

		return e.complexity.BertyEntityPingAttrs.T(childComplexity), true

	case "BertyEntitySeenAttrs.ids":
		if e.complexity.BertyEntitySeenAttrs.Ids == nil {
			break
		}

		return e.complexity.BertyEntitySeenAttrs.Ids(childComplexity), true

	case "BertyEntitySenderAlias.id":
		if e.complexity.BertyEntitySenderAlias.Id == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.Id(childComplexity), true

	case "BertyEntitySenderAlias.createdAt":
		if e.complexity.BertyEntitySenderAlias.CreatedAt == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.CreatedAt(childComplexity), true

	case "BertyEntitySenderAlias.updatedAt":
		if e.complexity.BertyEntitySenderAlias.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.UpdatedAt(childComplexity), true

	case "BertyEntitySenderAlias.status":
		if e.complexity.BertyEntitySenderAlias.Status == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.Status(childComplexity), true

	case "BertyEntitySenderAlias.originDeviceId":
		if e.complexity.BertyEntitySenderAlias.OriginDeviceId == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.OriginDeviceId(childComplexity), true

	case "BertyEntitySenderAlias.contactId":
		if e.complexity.BertyEntitySenderAlias.ContactId == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.ContactId(childComplexity), true

	case "BertyEntitySenderAlias.conversationId":
		if e.complexity.BertyEntitySenderAlias.ConversationId == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.ConversationId(childComplexity), true

	case "BertyEntitySenderAlias.aliasIdentifier":
		if e.complexity.BertyEntitySenderAlias.AliasIdentifier == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.AliasIdentifier(childComplexity), true

	case "BertyEntitySenderAlias.used":
		if e.complexity.BertyEntitySenderAlias.Used == nil {
			break
		}

		return e.complexity.BertyEntitySenderAlias.Used(childComplexity), true

	case "BertyEntitySenderAliasUpdateAttrs.aliases":
		if e.complexity.BertyEntitySenderAliasUpdateAttrs.Aliases == nil {
			break
		}

		return e.complexity.BertyEntitySenderAliasUpdateAttrs.Aliases(childComplexity), true

	case "BertyEntitySentAttrs.ids":
		if e.complexity.BertyEntitySentAttrs.Ids == nil {
			break
		}

		return e.complexity.BertyEntitySentAttrs.Ids(childComplexity), true

	case "BertyNetworkMetricBandwidthStats.id":
		if e.complexity.BertyNetworkMetricBandwidthStats.Id == nil {
			break
		}

		return e.complexity.BertyNetworkMetricBandwidthStats.Id(childComplexity), true

	case "BertyNetworkMetricBandwidthStats.totalIn":
		if e.complexity.BertyNetworkMetricBandwidthStats.TotalIn == nil {
			break
		}

		return e.complexity.BertyNetworkMetricBandwidthStats.TotalIn(childComplexity), true

	case "BertyNetworkMetricBandwidthStats.totalOut":
		if e.complexity.BertyNetworkMetricBandwidthStats.TotalOut == nil {
			break
		}

		return e.complexity.BertyNetworkMetricBandwidthStats.TotalOut(childComplexity), true

	case "BertyNetworkMetricBandwidthStats.rateIn":
		if e.complexity.BertyNetworkMetricBandwidthStats.RateIn == nil {
			break
		}

		return e.complexity.BertyNetworkMetricBandwidthStats.RateIn(childComplexity), true

	case "BertyNetworkMetricBandwidthStats.rateOut":
		if e.complexity.BertyNetworkMetricBandwidthStats.RateOut == nil {
			break
		}

		return e.complexity.BertyNetworkMetricBandwidthStats.RateOut(childComplexity), true

	case "BertyNetworkMetricBandwidthStats.type":
		if e.complexity.BertyNetworkMetricBandwidthStats.Type == nil {
			break
		}

		return e.complexity.BertyNetworkMetricBandwidthStats.Type(childComplexity), true

	case "BertyNetworkMetricListAddrs.addrs":
		if e.complexity.BertyNetworkMetricListAddrs.Addrs == nil {
			break
		}

		return e.complexity.BertyNetworkMetricListAddrs.Addrs(childComplexity), true

	case "BertyNetworkMetricPeer.id":
		if e.complexity.BertyNetworkMetricPeer.Id == nil {
			break
		}

		return e.complexity.BertyNetworkMetricPeer.Id(childComplexity), true

	case "BertyNetworkMetricPeer.addrs":
		if e.complexity.BertyNetworkMetricPeer.Addrs == nil {
			break
		}

		return e.complexity.BertyNetworkMetricPeer.Addrs(childComplexity), true

	case "BertyNetworkMetricPeer.connection":
		if e.complexity.BertyNetworkMetricPeer.Connection == nil {
			break
		}

		return e.complexity.BertyNetworkMetricPeer.Connection(childComplexity), true

	case "BertyNetworkMetricPeers.list":
		if e.complexity.BertyNetworkMetricPeers.List == nil {
			break
		}

		return e.complexity.BertyNetworkMetricPeers.List(childComplexity), true

	case "BertyNetworkMetricPingReq.str":
		if e.complexity.BertyNetworkMetricPingReq.Str == nil {
			break
		}

		return e.complexity.BertyNetworkMetricPingReq.Str(childComplexity), true

	case "BertyNodeAppVersionOutput.version":
		if e.complexity.BertyNodeAppVersionOutput.Version == nil {
			break
		}

		return e.complexity.BertyNodeAppVersionOutput.Version(childComplexity), true

	case "BertyNodeBackgroundCriticalAttrs.errMsg":
		if e.complexity.BertyNodeBackgroundCriticalAttrs.ErrMsg == nil {
			break
		}

		return e.complexity.BertyNodeBackgroundCriticalAttrs.ErrMsg(childComplexity), true

	case "BertyNodeBackgroundErrorAttrs.errMsg":
		if e.complexity.BertyNodeBackgroundErrorAttrs.ErrMsg == nil {
			break
		}

		return e.complexity.BertyNodeBackgroundErrorAttrs.ErrMsg(childComplexity), true

	case "BertyNodeBackgroundWarnAttrs.errMsg":
		if e.complexity.BertyNodeBackgroundWarnAttrs.ErrMsg == nil {
			break
		}

		return e.complexity.BertyNodeBackgroundWarnAttrs.ErrMsg(childComplexity), true

	case "BertyNodeBool.ret":
		if e.complexity.BertyNodeBool.Ret == nil {
			break
		}

		return e.complexity.BertyNodeBool.Ret(childComplexity), true

	case "BertyNodeCommitLog.operation":
		if e.complexity.BertyNodeCommitLog.Operation == nil {
			break
		}

		return e.complexity.BertyNodeCommitLog.Operation(childComplexity), true

	case "BertyNodeCommitLog.entity":
		if e.complexity.BertyNodeCommitLog.Entity == nil {
			break
		}

		return e.complexity.BertyNodeCommitLog.Entity(childComplexity), true

	case "BertyNodeCommitLogEntity.config":
		if e.complexity.BertyNodeCommitLogEntity.Config == nil {
			break
		}

		return e.complexity.BertyNodeCommitLogEntity.Config(childComplexity), true

	case "BertyNodeCommitLogEntity.contact":
		if e.complexity.BertyNodeCommitLogEntity.Contact == nil {
			break
		}

		return e.complexity.BertyNodeCommitLogEntity.Contact(childComplexity), true

	case "BertyNodeCommitLogEntity.device":
		if e.complexity.BertyNodeCommitLogEntity.Device == nil {
			break
		}

		return e.complexity.BertyNodeCommitLogEntity.Device(childComplexity), true

	case "BertyNodeCommitLogEntity.conversation":
		if e.complexity.BertyNodeCommitLogEntity.Conversation == nil {
			break
		}

		return e.complexity.BertyNodeCommitLogEntity.Conversation(childComplexity), true

	case "BertyNodeCommitLogEntity.conversationMember":
		if e.complexity.BertyNodeCommitLogEntity.ConversationMember == nil {
			break
		}

		return e.complexity.BertyNodeCommitLogEntity.ConversationMember(childComplexity), true

	case "BertyNodeCommitLogEntity.event":
		if e.complexity.BertyNodeCommitLogEntity.Event == nil {
			break
		}

		return e.complexity.BertyNodeCommitLogEntity.Event(childComplexity), true

	case "BertyNodeCommitLogEntity.devicePushConfig":
		if e.complexity.BertyNodeCommitLogEntity.DevicePushConfig == nil {
			break
		}

		return e.complexity.BertyNodeCommitLogEntity.DevicePushConfig(childComplexity), true

	case "BertyNodeCommitLogEntity.devicePushIdentifier":
		if e.complexity.BertyNodeCommitLogEntity.DevicePushIdentifier == nil {
			break
		}

		return e.complexity.BertyNodeCommitLogEntity.DevicePushIdentifier(childComplexity), true

	case "BertyNodeContactEdge.node":
		if e.complexity.BertyNodeContactEdge.Node == nil {
			break
		}

		return e.complexity.BertyNodeContactEdge.Node(childComplexity), true

	case "BertyNodeContactEdge.cursor":
		if e.complexity.BertyNodeContactEdge.Cursor == nil {
			break
		}

		return e.complexity.BertyNodeContactEdge.Cursor(childComplexity), true

	case "BertyNodeContactListConnection.edges":
		if e.complexity.BertyNodeContactListConnection.Edges == nil {
			break
		}

		return e.complexity.BertyNodeContactListConnection.Edges(childComplexity), true

	case "BertyNodeContactListConnection.pageInfo":
		if e.complexity.BertyNodeContactListConnection.PageInfo == nil {
			break
		}

		return e.complexity.BertyNodeContactListConnection.PageInfo(childComplexity), true

	case "BertyNodeConversationEdge.node":
		if e.complexity.BertyNodeConversationEdge.Node == nil {
			break
		}

		return e.complexity.BertyNodeConversationEdge.Node(childComplexity), true

	case "BertyNodeConversationEdge.cursor":
		if e.complexity.BertyNodeConversationEdge.Cursor == nil {
			break
		}

		return e.complexity.BertyNodeConversationEdge.Cursor(childComplexity), true

	case "BertyNodeConversationListConnection.edges":
		if e.complexity.BertyNodeConversationListConnection.Edges == nil {
			break
		}

		return e.complexity.BertyNodeConversationListConnection.Edges(childComplexity), true

	case "BertyNodeConversationListConnection.pageInfo":
		if e.complexity.BertyNodeConversationListConnection.PageInfo == nil {
			break
		}

		return e.complexity.BertyNodeConversationListConnection.PageInfo(childComplexity), true

	case "BertyNodeDebugAttrs.msg":
		if e.complexity.BertyNodeDebugAttrs.Msg == nil {
			break
		}

		return e.complexity.BertyNodeDebugAttrs.Msg(childComplexity), true

	case "BertyNodeDevicePushConfigEdge.node":
		if e.complexity.BertyNodeDevicePushConfigEdge.Node == nil {
			break
		}

		return e.complexity.BertyNodeDevicePushConfigEdge.Node(childComplexity), true

	case "BertyNodeDevicePushConfigEdge.cursor":
		if e.complexity.BertyNodeDevicePushConfigEdge.Cursor == nil {
			break
		}

		return e.complexity.BertyNodeDevicePushConfigEdge.Cursor(childComplexity), true

	case "BertyNodeDevicePushConfigListOutput.edges":
		if e.complexity.BertyNodeDevicePushConfigListOutput.Edges == nil {
			break
		}

		return e.complexity.BertyNodeDevicePushConfigListOutput.Edges(childComplexity), true

	case "BertyNodeEventEdge.node":
		if e.complexity.BertyNodeEventEdge.Node == nil {
			break
		}

		return e.complexity.BertyNodeEventEdge.Node(childComplexity), true

	case "BertyNodeEventEdge.cursor":
		if e.complexity.BertyNodeEventEdge.Cursor == nil {
			break
		}

		return e.complexity.BertyNodeEventEdge.Cursor(childComplexity), true

	case "BertyNodeEventListConnection.edges":
		if e.complexity.BertyNodeEventListConnection.Edges == nil {
			break
		}

		return e.complexity.BertyNodeEventListConnection.Edges(childComplexity), true

	case "BertyNodeEventListConnection.pageInfo":
		if e.complexity.BertyNodeEventListConnection.PageInfo == nil {
			break
		}

		return e.complexity.BertyNodeEventListConnection.PageInfo(childComplexity), true

	case "BertyNodeIntegrationTestOutput.name":
		if e.complexity.BertyNodeIntegrationTestOutput.Name == nil {
			break
		}

		return e.complexity.BertyNodeIntegrationTestOutput.Name(childComplexity), true

	case "BertyNodeIntegrationTestOutput.success":
		if e.complexity.BertyNodeIntegrationTestOutput.Success == nil {
			break
		}

		return e.complexity.BertyNodeIntegrationTestOutput.Success(childComplexity), true

	case "BertyNodeIntegrationTestOutput.verbose":
		if e.complexity.BertyNodeIntegrationTestOutput.Verbose == nil {
			break
		}

		return e.complexity.BertyNodeIntegrationTestOutput.Verbose(childComplexity), true

	case "BertyNodeIntegrationTestOutput.startedAt":
		if e.complexity.BertyNodeIntegrationTestOutput.StartedAt == nil {
			break
		}

		return e.complexity.BertyNodeIntegrationTestOutput.StartedAt(childComplexity), true

	case "BertyNodeIntegrationTestOutput.finishedAt":
		if e.complexity.BertyNodeIntegrationTestOutput.FinishedAt == nil {
			break
		}

		return e.complexity.BertyNodeIntegrationTestOutput.FinishedAt(childComplexity), true

	case "BertyNodeLogEntry.line":
		if e.complexity.BertyNodeLogEntry.Line == nil {
			break
		}

		return e.complexity.BertyNodeLogEntry.Line(childComplexity), true

	case "BertyNodeLogfileEntry.path":
		if e.complexity.BertyNodeLogfileEntry.Path == nil {
			break
		}

		return e.complexity.BertyNodeLogfileEntry.Path(childComplexity), true

	case "BertyNodeLogfileEntry.filesize":
		if e.complexity.BertyNodeLogfileEntry.Filesize == nil {
			break
		}

		return e.complexity.BertyNodeLogfileEntry.Filesize(childComplexity), true

	case "BertyNodeLogfileEntry.createdAt":
		if e.complexity.BertyNodeLogfileEntry.CreatedAt == nil {
			break
		}

		return e.complexity.BertyNodeLogfileEntry.CreatedAt(childComplexity), true

	case "BertyNodeLogfileEntry.updatedAt":
		if e.complexity.BertyNodeLogfileEntry.UpdatedAt == nil {
			break
		}

		return e.complexity.BertyNodeLogfileEntry.UpdatedAt(childComplexity), true

	case "BertyNodeNodeEvent.kind":
		if e.complexity.BertyNodeNodeEvent.Kind == nil {
			break
		}

		return e.complexity.BertyNodeNodeEvent.Kind(childComplexity), true

	case "BertyNodeNodeEvent.attributes":
		if e.complexity.BertyNodeNodeEvent.Attributes == nil {
			break
		}

		return e.complexity.BertyNodeNodeEvent.Attributes(childComplexity), true

	case "BertyNodeNodeIsAliveAttrs.T":
		if e.complexity.BertyNodeNodeIsAliveAttrs.T == nil {
			break
		}

		return e.complexity.BertyNodeNodeIsAliveAttrs.T(childComplexity), true

	case "BertyNodeNodeStartedAttrs.T":
		if e.complexity.BertyNodeNodeStartedAttrs.T == nil {
			break
		}

		return e.complexity.BertyNodeNodeStartedAttrs.T(childComplexity), true

	case "BertyNodeNodeStoppedAttrs.errMsg":
		if e.complexity.BertyNodeNodeStoppedAttrs.ErrMsg == nil {
			break
		}

		return e.complexity.BertyNodeNodeStoppedAttrs.ErrMsg(childComplexity), true

	case "BertyNodePageInfo.startCursor":
		if e.complexity.BertyNodePageInfo.StartCursor == nil {
			break
		}

		return e.complexity.BertyNodePageInfo.StartCursor(childComplexity), true

	case "BertyNodePageInfo.endCursor":
		if e.complexity.BertyNodePageInfo.EndCursor == nil {
			break
		}

		return e.complexity.BertyNodePageInfo.EndCursor(childComplexity), true

	case "BertyNodePageInfo.hasNextPage":
		if e.complexity.BertyNodePageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.BertyNodePageInfo.HasNextPage(childComplexity), true

	case "BertyNodePageInfo.hasPreviousPage":
		if e.complexity.BertyNodePageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.BertyNodePageInfo.HasPreviousPage(childComplexity), true

	case "BertyNodePageInfo.count":
		if e.complexity.BertyNodePageInfo.Count == nil {
			break
		}

		return e.complexity.BertyNodePageInfo.Count(childComplexity), true

	case "BertyNodePagination.orderBy":
		if e.complexity.BertyNodePagination.OrderBy == nil {
			break
		}

		return e.complexity.BertyNodePagination.OrderBy(childComplexity), true

	case "BertyNodePagination.orderDesc":
		if e.complexity.BertyNodePagination.OrderDesc == nil {
			break
		}

		return e.complexity.BertyNodePagination.OrderDesc(childComplexity), true

	case "BertyNodePagination.first":
		if e.complexity.BertyNodePagination.First == nil {
			break
		}

		return e.complexity.BertyNodePagination.First(childComplexity), true

	case "BertyNodePagination.after":
		if e.complexity.BertyNodePagination.After == nil {
			break
		}

		return e.complexity.BertyNodePagination.After(childComplexity), true

	case "BertyNodePagination.last":
		if e.complexity.BertyNodePagination.Last == nil {
			break
		}

		return e.complexity.BertyNodePagination.Last(childComplexity), true

	case "BertyNodePagination.before":
		if e.complexity.BertyNodePagination.Before == nil {
			break
		}

		return e.complexity.BertyNodePagination.Before(childComplexity), true

	case "BertyNodePingDestination.destination":
		if e.complexity.BertyNodePingDestination.Destination == nil {
			break
		}

		return e.complexity.BertyNodePingDestination.Destination(childComplexity), true

	case "BertyNodeProtocolsOutput.protocols":
		if e.complexity.BertyNodeProtocolsOutput.Protocols == nil {
			break
		}

		return e.complexity.BertyNodeProtocolsOutput.Protocols(childComplexity), true

	case "BertyNodeStatisticsAttrs.errMsg":
		if e.complexity.BertyNodeStatisticsAttrs.ErrMsg == nil {
			break
		}

		return e.complexity.BertyNodeStatisticsAttrs.ErrMsg(childComplexity), true

	case "BertyNodeStatisticsAttrs.totalNetworkBandwidth":
		if e.complexity.BertyNodeStatisticsAttrs.TotalNetworkBandwidth == nil {
			break
		}

		return e.complexity.BertyNodeStatisticsAttrs.TotalNetworkBandwidth(childComplexity), true

	case "BertyNodeStatisticsAttrs.peersCount":
		if e.complexity.BertyNodeStatisticsAttrs.PeersCount == nil {
			break
		}

		return e.complexity.BertyNodeStatisticsAttrs.PeersCount(childComplexity), true

	case "BertyNodeVoid.T":
		if e.complexity.BertyNodeVoid.T == nil {
			break
		}

		return e.complexity.BertyNodeVoid.T(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfo.key":
		if e.complexity.BertyPkgDeviceinfoDeviceInfo.Key == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfo.Key(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfo.value":
		if e.complexity.BertyPkgDeviceinfoDeviceInfo.Value == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfo.Value(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfo.category":
		if e.complexity.BertyPkgDeviceinfoDeviceInfo.Category == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfo.Category(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfo.link":
		if e.complexity.BertyPkgDeviceinfoDeviceInfo.Link == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfo.Link(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfo.type":
		if e.complexity.BertyPkgDeviceinfoDeviceInfo.Type == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfo.Type(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfo.errMsg":
		if e.complexity.BertyPkgDeviceinfoDeviceInfo.ErrMsg == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfo.ErrMsg(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfo.weight":
		if e.complexity.BertyPkgDeviceinfoDeviceInfo.Weight == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfo.Weight(childComplexity), true

	case "BertyPkgDeviceinfoDeviceInfos.infos":
		if e.complexity.BertyPkgDeviceinfoDeviceInfos.Infos == nil {
			break
		}

		return e.complexity.BertyPkgDeviceinfoDeviceInfos.Infos(childComplexity), true

	case "BertyPushPushData.pushIdentifier":
		if e.complexity.BertyPushPushData.PushIdentifier == nil {
			break
		}

		return e.complexity.BertyPushPushData.PushIdentifier(childComplexity), true

	case "BertyPushPushData.envelope":
		if e.complexity.BertyPushPushData.Envelope == nil {
			break
		}

		return e.complexity.BertyPushPushData.Envelope(childComplexity), true

	case "BertyPushPushData.priority":
		if e.complexity.BertyPushPushData.Priority == nil {
			break
		}

		return e.complexity.BertyPushPushData.Priority(childComplexity), true

	case "BertyPushPushDestination.nonce":
		if e.complexity.BertyPushPushDestination.Nonce == nil {
			break
		}

		return e.complexity.BertyPushPushDestination.Nonce(childComplexity), true

	case "BertyPushPushDestination.pushType":
		if e.complexity.BertyPushPushDestination.PushType == nil {
			break
		}

		return e.complexity.BertyPushPushDestination.PushType(childComplexity), true

	case "BertyPushPushDestination.pushId":
		if e.complexity.BertyPushPushDestination.PushId == nil {
			break
		}

		return e.complexity.BertyPushPushDestination.PushId(childComplexity), true

	case "BertyPushPushNativeIdentifier.packageId":
		if e.complexity.BertyPushPushNativeIdentifier.PackageId == nil {
			break
		}

		return e.complexity.BertyPushPushNativeIdentifier.PackageId(childComplexity), true

	case "BertyPushPushNativeIdentifier.deviceToken":
		if e.complexity.BertyPushPushNativeIdentifier.DeviceToken == nil {
			break
		}

		return e.complexity.BertyPushPushNativeIdentifier.DeviceToken(childComplexity), true

	case "GoogleProtobufAny.typeUrl":
		if e.complexity.GoogleProtobufAny.TypeUrl == nil {
			break
		}

		return e.complexity.GoogleProtobufAny.TypeUrl(childComplexity), true

	case "GoogleProtobufAny.value":
		if e.complexity.GoogleProtobufAny.Value == nil {
			break
		}

		return e.complexity.GoogleProtobufAny.Value(childComplexity), true

	case "GoogleProtobufDescriptorProto.name":
		if e.complexity.GoogleProtobufDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufDescriptorProto.field":
		if e.complexity.GoogleProtobufDescriptorProto.Field == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.Field(childComplexity), true

	case "GoogleProtobufDescriptorProto.extension":
		if e.complexity.GoogleProtobufDescriptorProto.Extension == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.Extension(childComplexity), true

	case "GoogleProtobufDescriptorProto.nestedType":
		if e.complexity.GoogleProtobufDescriptorProto.NestedType == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.NestedType(childComplexity), true

	case "GoogleProtobufDescriptorProto.enumType":
		if e.complexity.GoogleProtobufDescriptorProto.EnumType == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.EnumType(childComplexity), true

	case "GoogleProtobufDescriptorProto.extensionRange":
		if e.complexity.GoogleProtobufDescriptorProto.ExtensionRange == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.ExtensionRange(childComplexity), true

	case "GoogleProtobufDescriptorProto.oneofDecl":
		if e.complexity.GoogleProtobufDescriptorProto.OneofDecl == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.OneofDecl(childComplexity), true

	case "GoogleProtobufDescriptorProto.options":
		if e.complexity.GoogleProtobufDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufDescriptorProto.reservedRange":
		if e.complexity.GoogleProtobufDescriptorProto.ReservedRange == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.ReservedRange(childComplexity), true

	case "GoogleProtobufDescriptorProto.reservedName":
		if e.complexity.GoogleProtobufDescriptorProto.ReservedName == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProto.ReservedName(childComplexity), true

	case "GoogleProtobufDescriptorProtoExtensionRange.start":
		if e.complexity.GoogleProtobufDescriptorProtoExtensionRange.Start == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProtoExtensionRange.Start(childComplexity), true

	case "GoogleProtobufDescriptorProtoExtensionRange.end":
		if e.complexity.GoogleProtobufDescriptorProtoExtensionRange.End == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProtoExtensionRange.End(childComplexity), true

	case "GoogleProtobufDescriptorProtoExtensionRange.options":
		if e.complexity.GoogleProtobufDescriptorProtoExtensionRange.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProtoExtensionRange.Options(childComplexity), true

	case "GoogleProtobufDescriptorProtoReservedRange.start":
		if e.complexity.GoogleProtobufDescriptorProtoReservedRange.Start == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProtoReservedRange.Start(childComplexity), true

	case "GoogleProtobufDescriptorProtoReservedRange.end":
		if e.complexity.GoogleProtobufDescriptorProtoReservedRange.End == nil {
			break
		}

		return e.complexity.GoogleProtobufDescriptorProtoReservedRange.End(childComplexity), true

	case "GoogleProtobufEnumDescriptorProto.name":
		if e.complexity.GoogleProtobufEnumDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufEnumDescriptorProto.value":
		if e.complexity.GoogleProtobufEnumDescriptorProto.Value == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProto.Value(childComplexity), true

	case "GoogleProtobufEnumDescriptorProto.options":
		if e.complexity.GoogleProtobufEnumDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufEnumDescriptorProto.reservedRange":
		if e.complexity.GoogleProtobufEnumDescriptorProto.ReservedRange == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProto.ReservedRange(childComplexity), true

	case "GoogleProtobufEnumDescriptorProto.reservedName":
		if e.complexity.GoogleProtobufEnumDescriptorProto.ReservedName == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProto.ReservedName(childComplexity), true

	case "GoogleProtobufEnumDescriptorProtoEnumReservedRange.start":
		if e.complexity.GoogleProtobufEnumDescriptorProtoEnumReservedRange.Start == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProtoEnumReservedRange.Start(childComplexity), true

	case "GoogleProtobufEnumDescriptorProtoEnumReservedRange.end":
		if e.complexity.GoogleProtobufEnumDescriptorProtoEnumReservedRange.End == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumDescriptorProtoEnumReservedRange.End(childComplexity), true

	case "GoogleProtobufEnumOptions.allowAlias":
		if e.complexity.GoogleProtobufEnumOptions.AllowAlias == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumOptions.AllowAlias(childComplexity), true

	case "GoogleProtobufEnumOptions.deprecated":
		if e.complexity.GoogleProtobufEnumOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumOptions.Deprecated(childComplexity), true

	case "GoogleProtobufEnumOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufEnumOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufEnumValueDescriptorProto.name":
		if e.complexity.GoogleProtobufEnumValueDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumValueDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufEnumValueDescriptorProto.number":
		if e.complexity.GoogleProtobufEnumValueDescriptorProto.Number == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumValueDescriptorProto.Number(childComplexity), true

	case "GoogleProtobufEnumValueDescriptorProto.options":
		if e.complexity.GoogleProtobufEnumValueDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumValueDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufEnumValueOptions.deprecated":
		if e.complexity.GoogleProtobufEnumValueOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumValueOptions.Deprecated(childComplexity), true

	case "GoogleProtobufEnumValueOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufEnumValueOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufEnumValueOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufExtensionRangeOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufExtensionRangeOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufExtensionRangeOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.name":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.number":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Number == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Number(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.label":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Label == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Label(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.type":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Type == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Type(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.typeName":
		if e.complexity.GoogleProtobufFieldDescriptorProto.TypeName == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.TypeName(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.extendee":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Extendee == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Extendee(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.defaultValue":
		if e.complexity.GoogleProtobufFieldDescriptorProto.DefaultValue == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.DefaultValue(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.oneofIndex":
		if e.complexity.GoogleProtobufFieldDescriptorProto.OneofIndex == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.OneofIndex(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.jsonName":
		if e.complexity.GoogleProtobufFieldDescriptorProto.JsonName == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.JsonName(childComplexity), true

	case "GoogleProtobufFieldDescriptorProto.options":
		if e.complexity.GoogleProtobufFieldDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufFieldOptions.ctype":
		if e.complexity.GoogleProtobufFieldOptions.Ctype == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Ctype(childComplexity), true

	case "GoogleProtobufFieldOptions.packed":
		if e.complexity.GoogleProtobufFieldOptions.Packed == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Packed(childComplexity), true

	case "GoogleProtobufFieldOptions.jstype":
		if e.complexity.GoogleProtobufFieldOptions.Jstype == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Jstype(childComplexity), true

	case "GoogleProtobufFieldOptions.lazy":
		if e.complexity.GoogleProtobufFieldOptions.Lazy == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Lazy(childComplexity), true

	case "GoogleProtobufFieldOptions.deprecated":
		if e.complexity.GoogleProtobufFieldOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Deprecated(childComplexity), true

	case "GoogleProtobufFieldOptions.weak":
		if e.complexity.GoogleProtobufFieldOptions.Weak == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.Weak(childComplexity), true

	case "GoogleProtobufFieldOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufFieldOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufFieldOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.name":
		if e.complexity.GoogleProtobufFileDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.package":
		if e.complexity.GoogleProtobufFileDescriptorProto.Package == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Package(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.dependency":
		if e.complexity.GoogleProtobufFileDescriptorProto.Dependency == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Dependency(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.publicDependency":
		if e.complexity.GoogleProtobufFileDescriptorProto.PublicDependency == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.PublicDependency(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.weakDependency":
		if e.complexity.GoogleProtobufFileDescriptorProto.WeakDependency == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.WeakDependency(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.messageType":
		if e.complexity.GoogleProtobufFileDescriptorProto.MessageType == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.MessageType(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.enumType":
		if e.complexity.GoogleProtobufFileDescriptorProto.EnumType == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.EnumType(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.service":
		if e.complexity.GoogleProtobufFileDescriptorProto.Service == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Service(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.extension":
		if e.complexity.GoogleProtobufFileDescriptorProto.Extension == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Extension(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.options":
		if e.complexity.GoogleProtobufFileDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.sourceCodeInfo":
		if e.complexity.GoogleProtobufFileDescriptorProto.SourceCodeInfo == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.SourceCodeInfo(childComplexity), true

	case "GoogleProtobufFileDescriptorProto.syntax":
		if e.complexity.GoogleProtobufFileDescriptorProto.Syntax == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorProto.Syntax(childComplexity), true

	case "GoogleProtobufFileDescriptorSet.file":
		if e.complexity.GoogleProtobufFileDescriptorSet.File == nil {
			break
		}

		return e.complexity.GoogleProtobufFileDescriptorSet.File(childComplexity), true

	case "GoogleProtobufFileOptions.javaPackage":
		if e.complexity.GoogleProtobufFileOptions.JavaPackage == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaPackage(childComplexity), true

	case "GoogleProtobufFileOptions.javaOuterClassname":
		if e.complexity.GoogleProtobufFileOptions.JavaOuterClassname == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaOuterClassname(childComplexity), true

	case "GoogleProtobufFileOptions.javaMultipleFiles":
		if e.complexity.GoogleProtobufFileOptions.JavaMultipleFiles == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaMultipleFiles(childComplexity), true

	case "GoogleProtobufFileOptions.javaGenerateEqualsAndHash":
		if e.complexity.GoogleProtobufFileOptions.JavaGenerateEqualsAndHash == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaGenerateEqualsAndHash(childComplexity), true

	case "GoogleProtobufFileOptions.javaStringCheckUtf8":
		if e.complexity.GoogleProtobufFileOptions.JavaStringCheckUtf8 == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaStringCheckUtf8(childComplexity), true

	case "GoogleProtobufFileOptions.optimizeFor":
		if e.complexity.GoogleProtobufFileOptions.OptimizeFor == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.OptimizeFor(childComplexity), true

	case "GoogleProtobufFileOptions.goPackage":
		if e.complexity.GoogleProtobufFileOptions.GoPackage == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.GoPackage(childComplexity), true

	case "GoogleProtobufFileOptions.ccGenericServices":
		if e.complexity.GoogleProtobufFileOptions.CcGenericServices == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.CcGenericServices(childComplexity), true

	case "GoogleProtobufFileOptions.javaGenericServices":
		if e.complexity.GoogleProtobufFileOptions.JavaGenericServices == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.JavaGenericServices(childComplexity), true

	case "GoogleProtobufFileOptions.pyGenericServices":
		if e.complexity.GoogleProtobufFileOptions.PyGenericServices == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.PyGenericServices(childComplexity), true

	case "GoogleProtobufFileOptions.phpGenericServices":
		if e.complexity.GoogleProtobufFileOptions.PhpGenericServices == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.PhpGenericServices(childComplexity), true

	case "GoogleProtobufFileOptions.deprecated":
		if e.complexity.GoogleProtobufFileOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.Deprecated(childComplexity), true

	case "GoogleProtobufFileOptions.ccEnableArenas":
		if e.complexity.GoogleProtobufFileOptions.CcEnableArenas == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.CcEnableArenas(childComplexity), true

	case "GoogleProtobufFileOptions.objcClassPrefix":
		if e.complexity.GoogleProtobufFileOptions.ObjcClassPrefix == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.ObjcClassPrefix(childComplexity), true

	case "GoogleProtobufFileOptions.csharpNamespace":
		if e.complexity.GoogleProtobufFileOptions.CsharpNamespace == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.CsharpNamespace(childComplexity), true

	case "GoogleProtobufFileOptions.swiftPrefix":
		if e.complexity.GoogleProtobufFileOptions.SwiftPrefix == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.SwiftPrefix(childComplexity), true

	case "GoogleProtobufFileOptions.phpClassPrefix":
		if e.complexity.GoogleProtobufFileOptions.PhpClassPrefix == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.PhpClassPrefix(childComplexity), true

	case "GoogleProtobufFileOptions.phpNamespace":
		if e.complexity.GoogleProtobufFileOptions.PhpNamespace == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.PhpNamespace(childComplexity), true

	case "GoogleProtobufFileOptions.phpMetadataNamespace":
		if e.complexity.GoogleProtobufFileOptions.PhpMetadataNamespace == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.PhpMetadataNamespace(childComplexity), true

	case "GoogleProtobufFileOptions.rubyPackage":
		if e.complexity.GoogleProtobufFileOptions.RubyPackage == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.RubyPackage(childComplexity), true

	case "GoogleProtobufFileOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufFileOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufFileOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufGeneratedCodeInfo.annotation":
		if e.complexity.GoogleProtobufGeneratedCodeInfo.Annotation == nil {
			break
		}

		return e.complexity.GoogleProtobufGeneratedCodeInfo.Annotation(childComplexity), true

	case "GoogleProtobufGeneratedCodeInfoAnnotation.path":
		if e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.Path == nil {
			break
		}

		return e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.Path(childComplexity), true

	case "GoogleProtobufGeneratedCodeInfoAnnotation.sourceFile":
		if e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.SourceFile == nil {
			break
		}

		return e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.SourceFile(childComplexity), true

	case "GoogleProtobufGeneratedCodeInfoAnnotation.begin":
		if e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.Begin == nil {
			break
		}

		return e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.Begin(childComplexity), true

	case "GoogleProtobufGeneratedCodeInfoAnnotation.end":
		if e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.End == nil {
			break
		}

		return e.complexity.GoogleProtobufGeneratedCodeInfoAnnotation.End(childComplexity), true

	case "GoogleProtobufMessageOptions.messageSetWireFormat":
		if e.complexity.GoogleProtobufMessageOptions.MessageSetWireFormat == nil {
			break
		}

		return e.complexity.GoogleProtobufMessageOptions.MessageSetWireFormat(childComplexity), true

	case "GoogleProtobufMessageOptions.noStandardDescriptorAccessor":
		if e.complexity.GoogleProtobufMessageOptions.NoStandardDescriptorAccessor == nil {
			break
		}

		return e.complexity.GoogleProtobufMessageOptions.NoStandardDescriptorAccessor(childComplexity), true

	case "GoogleProtobufMessageOptions.deprecated":
		if e.complexity.GoogleProtobufMessageOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufMessageOptions.Deprecated(childComplexity), true

	case "GoogleProtobufMessageOptions.mapEntry":
		if e.complexity.GoogleProtobufMessageOptions.MapEntry == nil {
			break
		}

		return e.complexity.GoogleProtobufMessageOptions.MapEntry(childComplexity), true

	case "GoogleProtobufMessageOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufMessageOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufMessageOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.name":
		if e.complexity.GoogleProtobufMethodDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.inputType":
		if e.complexity.GoogleProtobufMethodDescriptorProto.InputType == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.InputType(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.outputType":
		if e.complexity.GoogleProtobufMethodDescriptorProto.OutputType == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.OutputType(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.options":
		if e.complexity.GoogleProtobufMethodDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.clientStreaming":
		if e.complexity.GoogleProtobufMethodDescriptorProto.ClientStreaming == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.ClientStreaming(childComplexity), true

	case "GoogleProtobufMethodDescriptorProto.serverStreaming":
		if e.complexity.GoogleProtobufMethodDescriptorProto.ServerStreaming == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodDescriptorProto.ServerStreaming(childComplexity), true

	case "GoogleProtobufMethodOptions.deprecated":
		if e.complexity.GoogleProtobufMethodOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodOptions.Deprecated(childComplexity), true

	case "GoogleProtobufMethodOptions.idempotencyLevel":
		if e.complexity.GoogleProtobufMethodOptions.IdempotencyLevel == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodOptions.IdempotencyLevel(childComplexity), true

	case "GoogleProtobufMethodOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufMethodOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufMethodOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufOneofDescriptorProto.name":
		if e.complexity.GoogleProtobufOneofDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufOneofDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufOneofDescriptorProto.options":
		if e.complexity.GoogleProtobufOneofDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufOneofDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufOneofOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufOneofOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufOneofOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufServiceDescriptorProto.name":
		if e.complexity.GoogleProtobufServiceDescriptorProto.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufServiceDescriptorProto.Name(childComplexity), true

	case "GoogleProtobufServiceDescriptorProto.method":
		if e.complexity.GoogleProtobufServiceDescriptorProto.Method == nil {
			break
		}

		return e.complexity.GoogleProtobufServiceDescriptorProto.Method(childComplexity), true

	case "GoogleProtobufServiceDescriptorProto.options":
		if e.complexity.GoogleProtobufServiceDescriptorProto.Options == nil {
			break
		}

		return e.complexity.GoogleProtobufServiceDescriptorProto.Options(childComplexity), true

	case "GoogleProtobufServiceOptions.deprecated":
		if e.complexity.GoogleProtobufServiceOptions.Deprecated == nil {
			break
		}

		return e.complexity.GoogleProtobufServiceOptions.Deprecated(childComplexity), true

	case "GoogleProtobufServiceOptions.uninterpretedOption":
		if e.complexity.GoogleProtobufServiceOptions.UninterpretedOption == nil {
			break
		}

		return e.complexity.GoogleProtobufServiceOptions.UninterpretedOption(childComplexity), true

	case "GoogleProtobufSourceCodeInfo.location":
		if e.complexity.GoogleProtobufSourceCodeInfo.Location == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfo.Location(childComplexity), true

	case "GoogleProtobufSourceCodeInfoLocation.path":
		if e.complexity.GoogleProtobufSourceCodeInfoLocation.Path == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfoLocation.Path(childComplexity), true

	case "GoogleProtobufSourceCodeInfoLocation.span":
		if e.complexity.GoogleProtobufSourceCodeInfoLocation.Span == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfoLocation.Span(childComplexity), true

	case "GoogleProtobufSourceCodeInfoLocation.leadingComments":
		if e.complexity.GoogleProtobufSourceCodeInfoLocation.LeadingComments == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfoLocation.LeadingComments(childComplexity), true

	case "GoogleProtobufSourceCodeInfoLocation.trailingComments":
		if e.complexity.GoogleProtobufSourceCodeInfoLocation.TrailingComments == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfoLocation.TrailingComments(childComplexity), true

	case "GoogleProtobufSourceCodeInfoLocation.leadingDetachedComments":
		if e.complexity.GoogleProtobufSourceCodeInfoLocation.LeadingDetachedComments == nil {
			break
		}

		return e.complexity.GoogleProtobufSourceCodeInfoLocation.LeadingDetachedComments(childComplexity), true

	case "GoogleProtobufUninterpretedOption.name":
		if e.complexity.GoogleProtobufUninterpretedOption.Name == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.Name(childComplexity), true

	case "GoogleProtobufUninterpretedOption.identifierValue":
		if e.complexity.GoogleProtobufUninterpretedOption.IdentifierValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.IdentifierValue(childComplexity), true

	case "GoogleProtobufUninterpretedOption.positiveIntValue":
		if e.complexity.GoogleProtobufUninterpretedOption.PositiveIntValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.PositiveIntValue(childComplexity), true

	case "GoogleProtobufUninterpretedOption.negativeIntValue":
		if e.complexity.GoogleProtobufUninterpretedOption.NegativeIntValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.NegativeIntValue(childComplexity), true

	case "GoogleProtobufUninterpretedOption.doubleValue":
		if e.complexity.GoogleProtobufUninterpretedOption.DoubleValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.DoubleValue(childComplexity), true

	case "GoogleProtobufUninterpretedOption.stringValue":
		if e.complexity.GoogleProtobufUninterpretedOption.StringValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.StringValue(childComplexity), true

	case "GoogleProtobufUninterpretedOption.aggregateValue":
		if e.complexity.GoogleProtobufUninterpretedOption.AggregateValue == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOption.AggregateValue(childComplexity), true

	case "GoogleProtobufUninterpretedOptionNamePart.namePart":
		if e.complexity.GoogleProtobufUninterpretedOptionNamePart.NamePart == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOptionNamePart.NamePart(childComplexity), true

	case "GoogleProtobufUninterpretedOptionNamePart.isExtension":
		if e.complexity.GoogleProtobufUninterpretedOptionNamePart.IsExtension == nil {
			break
		}

		return e.complexity.GoogleProtobufUninterpretedOptionNamePart.IsExtension(childComplexity), true

	case "GqlNode.id":
		if e.complexity.GqlNode.Id == nil {
			break
		}

		return e.complexity.GqlNode.Id(childComplexity), true

	case "Mutation.EventSeen":
		if e.complexity.Mutation.EventSeen == nil {
			break
		}

		args, err := field_Mutation_EventSeen_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EventSeen(childComplexity, args["id"].(string)), true

	case "Mutation.ConfigUpdate":
		if e.complexity.Mutation.ConfigUpdate == nil {
			break
		}

		args, err := field_Mutation_ConfigUpdate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigUpdate(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["myself"].(*entity.Contact), args["myselfId"].(string), args["currentDevice"].(*entity.Device), args["currentDeviceId"].(string), args["cryptoParams"].([]byte), args["pushRelayPubkeyApns"].(string), args["pushRelayPubkeyFcm"].(string), args["notificationsEnabled"].(bool), args["notificationsPreviews"].(bool), args["debugNotificationVerbosity"].(*int32)), true

	case "Mutation.ContactRequest":
		if e.complexity.Mutation.ContactRequest == nil {
			break
		}

		args, err := field_Mutation_ContactRequest_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactRequest(childComplexity, args["contactId"].(string), args["contactOverrideDisplayName"].(string), args["introText"].(string)), true

	case "Mutation.ContactAcceptRequest":
		if e.complexity.Mutation.ContactAcceptRequest == nil {
			break
		}

		args, err := field_Mutation_ContactAcceptRequest_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactAcceptRequest(childComplexity, args["contactId"].(string)), true

	case "Mutation.ContactRemove":
		if e.complexity.Mutation.ContactRemove == nil {
			break
		}

		args, err := field_Mutation_ContactRemove_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactRemove(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string)), true

	case "Mutation.ContactUpdate":
		if e.complexity.Mutation.ContactUpdate == nil {
			break
		}

		args, err := field_Mutation_ContactUpdate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactUpdate(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string)), true

	case "Mutation.ConversationCreate":
		if e.complexity.Mutation.ConversationCreate == nil {
			break
		}

		args, err := field_Mutation_ConversationCreate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConversationCreate(childComplexity, args["contacts"].([]*entity.Contact), args["title"].(string), args["topic"].(string)), true

	case "Mutation.ConversationUpdate":
		if e.complexity.Mutation.ConversationUpdate == nil {
			break
		}

		args, err := field_Mutation_ConversationUpdate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConversationUpdate(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["readAt"].(*time.Time), args["title"].(string), args["topic"].(string), args["infos"].(string), args["members"].([]*entity.ConversationMember)), true

	case "Mutation.ConversationInvite":
		if e.complexity.Mutation.ConversationInvite == nil {
			break
		}

		args, err := field_Mutation_ConversationInvite_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConversationInvite(childComplexity, args["conversation"].(*entity.Conversation), args["members"].([]*entity.ConversationMember)), true

	case "Mutation.ConversationExclude":
		if e.complexity.Mutation.ConversationExclude == nil {
			break
		}

		args, err := field_Mutation_ConversationExclude_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConversationExclude(childComplexity, args["conversation"].(*entity.Conversation), args["members"].([]*entity.ConversationMember)), true

	case "Mutation.ConversationAddMessage":
		if e.complexity.Mutation.ConversationAddMessage == nil {
			break
		}

		args, err := field_Mutation_ConversationAddMessage_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConversationAddMessage(childComplexity, args["conversation"].(*entity.Conversation), args["message"].(*entity.Message)), true

	case "Mutation.ConversationRead":
		if e.complexity.Mutation.ConversationRead == nil {
			break
		}

		args, err := field_Mutation_ConversationRead_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConversationRead(childComplexity, args["id"].(string)), true

	case "Mutation.ConversationRemove":
		if e.complexity.Mutation.ConversationRemove == nil {
			break
		}

		args, err := field_Mutation_ConversationRemove_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConversationRemove(childComplexity, args["id"].(string)), true

	case "Mutation.DevicePushConfigCreate":
		if e.complexity.Mutation.DevicePushConfigCreate == nil {
			break
		}

		args, err := field_Mutation_DevicePushConfigCreate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DevicePushConfigCreate(childComplexity, args["relayPubkey"].(*string), args["pushId"].([]byte), args["pushType"].(*int32)), true

	case "Mutation.DevicePushConfigNativeRegister":
		if e.complexity.Mutation.DevicePushConfigNativeRegister == nil {
			break
		}

		args, err := field_Mutation_DevicePushConfigNativeRegister_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DevicePushConfigNativeRegister(childComplexity, args["T"].(bool)), true

	case "Mutation.DevicePushConfigNativeUnregister":
		if e.complexity.Mutation.DevicePushConfigNativeUnregister == nil {
			break
		}

		args, err := field_Mutation_DevicePushConfigNativeUnregister_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DevicePushConfigNativeUnregister(childComplexity, args["T"].(bool)), true

	case "Mutation.DevicePushConfigRemove":
		if e.complexity.Mutation.DevicePushConfigRemove == nil {
			break
		}

		args, err := field_Mutation_DevicePushConfigRemove_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DevicePushConfigRemove(childComplexity, args["id"].(string)), true

	case "Mutation.DevicePushConfigUpdate":
		if e.complexity.Mutation.DevicePushConfigUpdate == nil {
			break
		}

		args, err := field_Mutation_DevicePushConfigUpdate_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DevicePushConfigUpdate(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deviceId"].(string), args["pushType"].(*int32), args["pushId"].([]byte), args["relayPubkey"].(string)), true

	case "Mutation.GenerateFakeData":
		if e.complexity.Mutation.GenerateFakeData == nil {
			break
		}

		args, err := field_Mutation_GenerateFakeData_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GenerateFakeData(childComplexity, args["T"].(bool)), true

	case "Mutation.RunIntegrationTests":
		if e.complexity.Mutation.RunIntegrationTests == nil {
			break
		}

		args, err := field_Mutation_RunIntegrationTests_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RunIntegrationTests(childComplexity, args["name"].(string)), true

	case "Mutation.DebugRequeueEvent":
		if e.complexity.Mutation.DebugRequeueEvent == nil {
			break
		}

		args, err := field_Mutation_DebugRequeueEvent_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DebugRequeueEvent(childComplexity, args["eventId"].(string)), true

	case "Mutation.DebugRequeueAll":
		if e.complexity.Mutation.DebugRequeueAll == nil {
			break
		}

		args, err := field_Mutation_DebugRequeueAll_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DebugRequeueAll(childComplexity, args["T"].(bool)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := field_Query_node_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.ID":
		if e.complexity.Query.Id == nil {
			break
		}

		args, err := field_Query_ID_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Id(childComplexity, args["T"].(bool)), true

	case "Query.EventList":
		if e.complexity.Query.EventList == nil {
			break
		}

		args, err := field_Query_EventList_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EventList(childComplexity, args["filter"].(*entity.Event), args["onlyWithoutAckedAt"].(*int32), args["onlyWithoutSeenAt"].(*int32), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string)), true

	case "Query.EventUnseen":
		if e.complexity.Query.EventUnseen == nil {
			break
		}

		args, err := field_Query_EventUnseen_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EventUnseen(childComplexity, args["filter"].(*entity.Event), args["onlyWithoutAckedAt"].(*int32), args["onlyWithoutSeenAt"].(*int32), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string)), true

	case "Query.GetEvent":
		if e.complexity.Query.GetEvent == nil {
			break
		}

		args, err := field_Query_GetEvent_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetEvent(childComplexity, args["id"].(string)), true

	case "Query.ConfigPublic":
		if e.complexity.Query.ConfigPublic == nil {
			break
		}

		args, err := field_Query_ConfigPublic_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConfigPublic(childComplexity, args["T"].(bool)), true

	case "Query.ContactList":
		if e.complexity.Query.ContactList == nil {
			break
		}

		args, err := field_Query_ContactList_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContactList(childComplexity, args["filter"].(*entity.Contact), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string)), true

	case "Query.Contact":
		if e.complexity.Query.Contact == nil {
			break
		}

		args, err := field_Query_Contact_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contact(childComplexity, args["filter"].(*entity.Contact)), true

	case "Query.ContactCheckPublicKey":
		if e.complexity.Query.ContactCheckPublicKey == nil {
			break
		}

		args, err := field_Query_ContactCheckPublicKey_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContactCheckPublicKey(childComplexity, args["filter"].(*entity.Contact)), true

	case "Query.ConversationList":
		if e.complexity.Query.ConversationList == nil {
			break
		}

		args, err := field_Query_ConversationList_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConversationList(childComplexity, args["filter"].(*entity.Conversation), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string)), true

	case "Query.Conversation":
		if e.complexity.Query.Conversation == nil {
			break
		}

		args, err := field_Query_Conversation_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Conversation(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["readAt"].(*time.Time), args["title"].(string), args["topic"].(string), args["infos"].(string), args["members"].([]*entity.ConversationMember)), true

	case "Query.ConversationMember":
		if e.complexity.Query.ConversationMember == nil {
			break
		}

		args, err := field_Query_ConversationMember_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConversationMember(childComplexity, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["status"].(*int32), args["contact"].(*entity.Contact), args["conversationId"].(string), args["contactId"].(string)), true

	case "Query.ConversationLastEvent":
		if e.complexity.Query.ConversationLastEvent == nil {
			break
		}

		args, err := field_Query_ConversationLastEvent_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConversationLastEvent(childComplexity, args["id"].(string)), true

	case "Query.DevicePushConfigList":
		if e.complexity.Query.DevicePushConfigList == nil {
			break
		}

		args, err := field_Query_DevicePushConfigList_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DevicePushConfigList(childComplexity, args["T"].(bool)), true

	case "Query.DeviceInfos":
		if e.complexity.Query.DeviceInfos == nil {
			break
		}

		args, err := field_Query_DeviceInfos_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeviceInfos(childComplexity, args["T"].(bool)), true

	case "Query.AppVersion":
		if e.complexity.Query.AppVersion == nil {
			break
		}

		args, err := field_Query_AppVersion_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppVersion(childComplexity, args["T"].(bool)), true

	case "Query.Peers":
		if e.complexity.Query.Peers == nil {
			break
		}

		args, err := field_Query_Peers_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Peers(childComplexity, args["T"].(bool)), true

	case "Query.Protocols":
		if e.complexity.Query.Protocols == nil {
			break
		}

		args, err := field_Query_Protocols_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Protocols(childComplexity, args["id"].(string), args["addrs"].([]string), args["connection"].(*int32)), true

	case "Query.LogfileList":
		if e.complexity.Query.LogfileList == nil {
			break
		}

		args, err := field_Query_LogfileList_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LogfileList(childComplexity, args["T"].(bool)), true

	case "Query.TestLogBackgroundError":
		if e.complexity.Query.TestLogBackgroundError == nil {
			break
		}

		args, err := field_Query_TestLogBackgroundError_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TestLogBackgroundError(childComplexity, args["T"].(bool)), true

	case "Query.TestLogBackgroundWarn":
		if e.complexity.Query.TestLogBackgroundWarn == nil {
			break
		}

		args, err := field_Query_TestLogBackgroundWarn_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TestLogBackgroundWarn(childComplexity, args["T"].(bool)), true

	case "Query.TestLogBackgroundDebug":
		if e.complexity.Query.TestLogBackgroundDebug == nil {
			break
		}

		args, err := field_Query_TestLogBackgroundDebug_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TestLogBackgroundDebug(childComplexity, args["T"].(bool)), true

	case "Query.TestPanic":
		if e.complexity.Query.TestPanic == nil {
			break
		}

		args, err := field_Query_TestPanic_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TestPanic(childComplexity, args["T"].(bool)), true

	case "Query.TestError":
		if e.complexity.Query.TestError == nil {
			break
		}

		args, err := field_Query_TestError_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TestError(childComplexity, args["kind"].(string)), true

	case "Query.GetListenAddrs":
		if e.complexity.Query.GetListenAddrs == nil {
			break
		}

		args, err := field_Query_GetListenAddrs_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetListenAddrs(childComplexity, args["T"].(bool)), true

	case "Query.GetListenInterfaceAddrs":
		if e.complexity.Query.GetListenInterfaceAddrs == nil {
			break
		}

		args, err := field_Query_GetListenInterfaceAddrs_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetListenInterfaceAddrs(childComplexity, args["T"].(bool)), true

	case "Query.Libp2PPing":
		if e.complexity.Query.Libp2Pping == nil {
			break
		}

		args, err := field_Query_Libp2PPing_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Libp2Pping(childComplexity, args["str"].(string)), true

	case "Subscription.CommitLogStream":
		if e.complexity.Subscription.CommitLogStream == nil {
			break
		}

		args, err := field_Subscription_CommitLogStream_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.CommitLogStream(childComplexity, args["T"].(bool)), true

	case "Subscription.EventStream":
		if e.complexity.Subscription.EventStream == nil {
			break
		}

		args, err := field_Subscription_EventStream_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.EventStream(childComplexity, args["filter"].(*entity.Event)), true

	case "Subscription.LogStream":
		if e.complexity.Subscription.LogStream == nil {
			break
		}

		args, err := field_Subscription_LogStream_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.LogStream(childComplexity, args["continues"].(bool), args["logLevel"].(string), args["namespaces"].(string), args["last"].(int32)), true

	case "Subscription.LogfileRead":
		if e.complexity.Subscription.LogfileRead == nil {
			break
		}

		args, err := field_Subscription_LogfileRead_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.LogfileRead(childComplexity, args["path"].(string)), true

	case "Subscription.MonitorBandwidth":
		if e.complexity.Subscription.MonitorBandwidth == nil {
			break
		}

		args, err := field_Subscription_MonitorBandwidth_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MonitorBandwidth(childComplexity, args["id"].(*string), args["totalIn"].(*int64), args["totalOut"].(*int64), args["rateIn"].(*float64), args["rateOut"].(*float64), args["type"].(*int32)), true

	case "Subscription.MonitorPeers":
		if e.complexity.Subscription.MonitorPeers == nil {
			break
		}

		args, err := field_Subscription_MonitorPeers_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.MonitorPeers(childComplexity, args["T"].(bool)), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	next := ec._Subscription(ctx, op.SelectionSet)
	if ec.Errors != nil {
		return graphql.OneShot(&graphql.Response{Data: []byte("null"), Errors: ec.Errors})
	}

	var buf bytes.Buffer
	return func() *graphql.Response {
		buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)
			return buf.Bytes()
		})

		if buf == nil {
			return nil
		}

		return &graphql.Response{
			Data:       buf,
			Errors:     ec.Errors,
			Extensions: ec.Extensions,
		}
	}
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var bertyEntityAckAttrsImplementors = []string{"BertyEntityAckAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityAckAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.AckAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityAckAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityAckAttrs")
		case "ids":
			out.Values[i] = ec._BertyEntityAckAttrs_ids(ctx, field, obj)
		case "errMsg":
			out.Values[i] = ec._BertyEntityAckAttrs_errMsg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityAckAttrs_ids(ctx context.Context, field graphql.CollectedField, obj *entity.AckAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityAckAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityAckAttrs_errMsg(ctx context.Context, field graphql.CollectedField, obj *entity.AckAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityAckAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrMsg, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityConfigImplementors = []string{"BertyEntityConfig"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConfig(ctx context.Context, sel ast.SelectionSet, obj *entity.Config) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConfigImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConfig")
		case "id":
			out.Values[i] = ec._BertyEntityConfig_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createdAt":
			out.Values[i] = ec._BertyEntityConfig_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConfig_updatedAt(ctx, field, obj)
		case "myself":
			out.Values[i] = ec._BertyEntityConfig_myself(ctx, field, obj)
		case "myselfId":
			out.Values[i] = ec._BertyEntityConfig_myselfId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "currentDevice":
			out.Values[i] = ec._BertyEntityConfig_currentDevice(ctx, field, obj)
		case "currentDeviceId":
			out.Values[i] = ec._BertyEntityConfig_currentDeviceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "cryptoParams":
			out.Values[i] = ec._BertyEntityConfig_cryptoParams(ctx, field, obj)
		case "pushRelayPubkeyApns":
			out.Values[i] = ec._BertyEntityConfig_pushRelayPubkeyApns(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "pushRelayPubkeyFcm":
			out.Values[i] = ec._BertyEntityConfig_pushRelayPubkeyFcm(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "notificationsEnabled":
			out.Values[i] = ec._BertyEntityConfig_notificationsEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "notificationsPreviews":
			out.Values[i] = ec._BertyEntityConfig_notificationsPreviews(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "debugNotificationVerbosity":
			out.Values[i] = ec._BertyEntityConfig_debugNotificationVerbosity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_id(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_myself(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Myself, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_myselfId(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MyselfID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_currentDevice(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentDevice, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Device)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityDevice(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_currentDeviceId(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentDeviceID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_cryptoParams(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CryptoParams, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_pushRelayPubkeyApns(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushRelayPubkeyAPNS, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_pushRelayPubkeyFcm(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushRelayPubkeyFCM, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_notificationsEnabled(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationsEnabled, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_notificationsPreviews(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationsPreviews, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConfig_debugNotificationVerbosity(ctx context.Context, field graphql.CollectedField, obj *entity.Config) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DebugNotificationVerbosity, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.DebugVerbosity)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

var bertyEntityContactImplementors = []string{"BertyEntityContact", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityContact(ctx context.Context, sel ast.SelectionSet, obj *entity.Contact) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityContactImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityContact")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityContact_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityContact_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityContact_updatedAt(ctx, field, obj)
		case "sigchain":
			out.Values[i] = ec._BertyEntityContact_sigchain(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityContact_status(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._BertyEntityContact_devices(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._BertyEntityContact_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "displayStatus":
			out.Values[i] = ec._BertyEntityContact_displayStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "overrideDisplayName":
			out.Values[i] = ec._BertyEntityContact_overrideDisplayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "overrideDisplayStatus":
			out.Values[i] = ec._BertyEntityContact_overrideDisplayStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_id(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityContact().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_sigchain(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sigchain, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_status(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Contact_Status)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_devices(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Device)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntityDevice(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_displayName(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_displayStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayStatus, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_overrideDisplayName(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverrideDisplayName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContact_overrideDisplayStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Contact) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContact",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverrideDisplayStatus, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityContactRequestAcceptedAttrsImplementors = []string{"BertyEntityContactRequestAcceptedAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityContactRequestAcceptedAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.ContactRequestAcceptedAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityContactRequestAcceptedAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityContactRequestAcceptedAttrs")
		case "T":
			out.Values[i] = ec._BertyEntityContactRequestAcceptedAttrs_T(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactRequestAcceptedAttrs_T(ctx context.Context, field graphql.CollectedField, obj *entity.ContactRequestAcceptedAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactRequestAcceptedAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.T, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyEntityContactRequestAttrsImplementors = []string{"BertyEntityContactRequestAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityContactRequestAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.ContactRequestAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityContactRequestAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityContactRequestAttrs")
		case "me":
			out.Values[i] = ec._BertyEntityContactRequestAttrs_me(ctx, field, obj)
		case "introText":
			out.Values[i] = ec._BertyEntityContactRequestAttrs_introText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactRequestAttrs_me(ctx context.Context, field graphql.CollectedField, obj *entity.ContactRequestAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactRequestAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Me, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactRequestAttrs_introText(ctx context.Context, field graphql.CollectedField, obj *entity.ContactRequestAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactRequestAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntroText, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityContactShareAttrsImplementors = []string{"BertyEntityContactShareAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityContactShareAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.ContactShareAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityContactShareAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityContactShareAttrs")
		case "contact":
			out.Values[i] = ec._BertyEntityContactShareAttrs_contact(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactShareAttrs_contact(ctx context.Context, field graphql.CollectedField, obj *entity.ContactShareAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactShareAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

var bertyEntityContactShareMeAttrsImplementors = []string{"BertyEntityContactShareMeAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityContactShareMeAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.ContactShareMeAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityContactShareMeAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityContactShareMeAttrs")
		case "me":
			out.Values[i] = ec._BertyEntityContactShareMeAttrs_me(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityContactShareMeAttrs_me(ctx context.Context, field graphql.CollectedField, obj *entity.ContactShareMeAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityContactShareMeAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Me, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

var bertyEntityConversationImplementors = []string{"BertyEntityConversation", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversation(ctx context.Context, sel ast.SelectionSet, obj *entity.Conversation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversation")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityConversation_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversation_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversation_updatedAt(ctx, field, obj)
		case "readAt":
			out.Values[i] = ec._BertyEntityConversation_readAt(ctx, field, obj)
		case "title":
			out.Values[i] = ec._BertyEntityConversation_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "topic":
			out.Values[i] = ec._BertyEntityConversation_topic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "infos":
			out.Values[i] = ec._BertyEntityConversation_infos(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "members":
			out.Values[i] = ec._BertyEntityConversation_members(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_id(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityConversation().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_readAt(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_title(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_topic(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Topic, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_infos(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Infos, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversation_members(ctx context.Context, field graphql.CollectedField, obj *entity.Conversation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Members, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.ConversationMember)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntityConversationMember(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyEntityConversationInviteAttrsImplementors = []string{"BertyEntityConversationInviteAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationInviteAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.ConversationInviteAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationInviteAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationInviteAttrs")
		case "conversation":
			out.Values[i] = ec._BertyEntityConversationInviteAttrs_conversation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationInviteAttrs_conversation(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationInviteAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationInviteAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

var bertyEntityConversationMemberImplementors = []string{"BertyEntityConversationMember", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationMember(ctx context.Context, sel ast.SelectionSet, obj *entity.ConversationMember) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationMemberImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationMember")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityConversationMember_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityConversationMember_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityConversationMember_updatedAt(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntityConversationMember_status(ctx, field, obj)
		case "contact":
			out.Values[i] = ec._BertyEntityConversationMember_contact(ctx, field, obj)
		case "conversationId":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityConversationMember_conversationId(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "contactId":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityConversationMember_contactId(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_id(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityConversationMember().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_status(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.ConversationMember_Status)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_contact(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_conversationId(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityConversationMember().ConversationID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationMember_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationMember) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationMember",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityConversationMember().ContactID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

var bertyEntityConversationNewMessageAttrsImplementors = []string{"BertyEntityConversationNewMessageAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationNewMessageAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.ConversationNewMessageAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationNewMessageAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationNewMessageAttrs")
		case "message":
			out.Values[i] = ec._BertyEntityConversationNewMessageAttrs_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationNewMessageAttrs_message(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationNewMessageAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationNewMessageAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Message)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityMessage(ctx, field.Selections, res)
}

var bertyEntityConversationReadAttrsImplementors = []string{"BertyEntityConversationReadAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationReadAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.ConversationReadAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationReadAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationReadAttrs")
		case "conversation":
			out.Values[i] = ec._BertyEntityConversationReadAttrs_conversation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationReadAttrs_conversation(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationReadAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationReadAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

var bertyEntityConversationUpdateAttrsImplementors = []string{"BertyEntityConversationUpdateAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityConversationUpdateAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.ConversationUpdateAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityConversationUpdateAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityConversationUpdateAttrs")
		case "conversation":
			out.Values[i] = ec._BertyEntityConversationUpdateAttrs_conversation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityConversationUpdateAttrs_conversation(ctx context.Context, field graphql.CollectedField, obj *entity.ConversationUpdateAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityConversationUpdateAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

var bertyEntityDeviceImplementors = []string{"BertyEntityDevice", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityDevice(ctx context.Context, sel ast.SelectionSet, obj *entity.Device) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityDeviceImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityDevice")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityDevice_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityDevice_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityDevice_updatedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._BertyEntityDevice_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "status":
			out.Values[i] = ec._BertyEntityDevice_status(ctx, field, obj)
		case "apiVersion":
			out.Values[i] = ec._BertyEntityDevice_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "contactId":
			out.Values[i] = ec._BertyEntityDevice_contactId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "pushIdentifiers":
			out.Values[i] = ec._BertyEntityDevice_pushIdentifiers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_id(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityDevice().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_name(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_status(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Device_Status)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_apiVersion(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApiVersion, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	rctx.Result = res
	return models.MarshalUint32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevice_pushIdentifiers(ctx context.Context, field graphql.CollectedField, obj *entity.Device) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevice",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushIdentifiers, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.DevicePushIdentifier)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntityDevicePushIdentifier(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyEntityDevicePushConfigImplementors = []string{"BertyEntityDevicePushConfig", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityDevicePushConfig(ctx context.Context, sel ast.SelectionSet, obj *entity.DevicePushConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityDevicePushConfigImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityDevicePushConfig")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityDevicePushConfig_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityDevicePushConfig_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityDevicePushConfig_updatedAt(ctx, field, obj)
		case "deviceId":
			out.Values[i] = ec._BertyEntityDevicePushConfig_deviceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "pushType":
			out.Values[i] = ec._BertyEntityDevicePushConfig_pushType(ctx, field, obj)
		case "pushId":
			out.Values[i] = ec._BertyEntityDevicePushConfig_pushId(ctx, field, obj)
		case "relayPubkey":
			out.Values[i] = ec._BertyEntityDevicePushConfig_relayPubkey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushConfig_id(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushConfig) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityDevicePushConfig().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushConfig_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushConfig) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushConfig_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushConfig) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushConfig_deviceId(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushConfig) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushConfig_pushType(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushConfig) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(push.DevicePushType)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushConfig_pushId(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushConfig) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushConfig_relayPubkey(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushConfig) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushConfig",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelayPubkey, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityDevicePushIdentifierImplementors = []string{"BertyEntityDevicePushIdentifier", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityDevicePushIdentifier(ctx context.Context, sel ast.SelectionSet, obj *entity.DevicePushIdentifier) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityDevicePushIdentifierImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityDevicePushIdentifier")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityDevicePushIdentifier_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "createdAt":
			out.Values[i] = ec._BertyEntityDevicePushIdentifier_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityDevicePushIdentifier_updatedAt(ctx, field, obj)
		case "pushInfo":
			out.Values[i] = ec._BertyEntityDevicePushIdentifier_pushInfo(ctx, field, obj)
		case "relayPubkey":
			out.Values[i] = ec._BertyEntityDevicePushIdentifier_relayPubkey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deviceId":
			out.Values[i] = ec._BertyEntityDevicePushIdentifier_deviceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushIdentifier_id(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushIdentifier) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushIdentifier",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityDevicePushIdentifier().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushIdentifier_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushIdentifier) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushIdentifier",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushIdentifier_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushIdentifier) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushIdentifier",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushIdentifier_pushInfo(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushIdentifier) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushIdentifier",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushInfo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushIdentifier_relayPubkey(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushIdentifier) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushIdentifier",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelayPubkey, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushIdentifier_deviceId(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushIdentifier) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushIdentifier",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityDevicePushToAttrsImplementors = []string{"BertyEntityDevicePushToAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityDevicePushToAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.DevicePushToAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityDevicePushToAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityDevicePushToAttrs")
		case "pushIdentifier":
			out.Values[i] = ec._BertyEntityDevicePushToAttrs_pushIdentifier(ctx, field, obj)
		case "envelope":
			out.Values[i] = ec._BertyEntityDevicePushToAttrs_envelope(ctx, field, obj)
		case "priority":
			out.Values[i] = ec._BertyEntityDevicePushToAttrs_priority(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushToAttrs_pushIdentifier(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushToAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushToAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushIdentifier, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushToAttrs_envelope(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushToAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushToAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Envelope, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevicePushToAttrs_priority(ctx context.Context, field graphql.CollectedField, obj *entity.DevicePushToAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevicePushToAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(push.Priority)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

var bertyEntityDeviceUpdatePushConfigAttrsImplementors = []string{"BertyEntityDeviceUpdatePushConfigAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityDeviceUpdatePushConfigAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.DeviceUpdatePushConfigAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityDeviceUpdatePushConfigAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityDeviceUpdatePushConfigAttrs")
		case "device":
			out.Values[i] = ec._BertyEntityDeviceUpdatePushConfigAttrs_device(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDeviceUpdatePushConfigAttrs_device(ctx context.Context, field graphql.CollectedField, obj *entity.DeviceUpdatePushConfigAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDeviceUpdatePushConfigAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Device, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Device)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityDevice(ctx, field.Selections, res)
}

var bertyEntityDevtoolsMapsetAttrsImplementors = []string{"BertyEntityDevtoolsMapsetAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityDevtoolsMapsetAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.DevtoolsMapsetAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityDevtoolsMapsetAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityDevtoolsMapsetAttrs")
		case "key":
			out.Values[i] = ec._BertyEntityDevtoolsMapsetAttrs_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "val":
			out.Values[i] = ec._BertyEntityDevtoolsMapsetAttrs_val(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevtoolsMapsetAttrs_key(ctx context.Context, field graphql.CollectedField, obj *entity.DevtoolsMapsetAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevtoolsMapsetAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityDevtoolsMapsetAttrs_val(ctx context.Context, field graphql.CollectedField, obj *entity.DevtoolsMapsetAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityDevtoolsMapsetAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Val, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityErrImplementors = []string{"BertyEntityErr"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityErr(ctx context.Context, sel ast.SelectionSet, obj *entity.Err) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityErrImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityErr")
		case "errMsg":
			out.Values[i] = ec._BertyEntityErr_errMsg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityErr_errMsg(ctx context.Context, field graphql.CollectedField, obj *entity.Err) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityErr",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrMsg, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityEventImplementors = []string{"BertyEntityEvent", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityEvent(ctx context.Context, sel ast.SelectionSet, obj *entity.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityEventImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityEvent")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityEvent_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "sourceDeviceId":
			out.Values[i] = ec._BertyEntityEvent_sourceDeviceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createdAt":
			out.Values[i] = ec._BertyEntityEvent_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntityEvent_updatedAt(ctx, field, obj)
		case "sentAt":
			out.Values[i] = ec._BertyEntityEvent_sentAt(ctx, field, obj)
		case "receivedAt":
			out.Values[i] = ec._BertyEntityEvent_receivedAt(ctx, field, obj)
		case "ackedAt":
			out.Values[i] = ec._BertyEntityEvent_ackedAt(ctx, field, obj)
		case "direction":
			out.Values[i] = ec._BertyEntityEvent_direction(ctx, field, obj)
		case "apiVersion":
			out.Values[i] = ec._BertyEntityEvent_apiVersion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "kind":
			out.Values[i] = ec._BertyEntityEvent_kind(ctx, field, obj)
		case "attributes":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityEvent_attributes(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "seenAt":
			out.Values[i] = ec._BertyEntityEvent_seenAt(ctx, field, obj)
		case "ackStatus":
			out.Values[i] = ec._BertyEntityEvent_ackStatus(ctx, field, obj)
		case "dispatches":
			out.Values[i] = ec._BertyEntityEvent_dispatches(ctx, field, obj)
		case "sourceContactId":
			out.Values[i] = ec._BertyEntityEvent_sourceContactId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "targetType":
			out.Values[i] = ec._BertyEntityEvent_targetType(ctx, field, obj)
		case "targetAddr":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._BertyEntityEvent_targetAddr(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "errProxy":
			out.Values[i] = ec._BertyEntityEvent_errProxy(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._BertyEntityEvent_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_id(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityEvent().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_sourceDeviceId(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceDeviceID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_sentAt(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SentAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_receivedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceivedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_ackedAt(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AckedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_direction(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direction, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Event_Direction)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_apiVersion(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIVersion, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	rctx.Result = res
	return models.MarshalUint32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_kind(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Kind)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_attributes(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityEvent().Attributes(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_seenAt(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeenAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_ackStatus(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AckStatus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Event_AckStatus)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_dispatches(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dispatches, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.EventDispatch)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntityEventDispatch(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_sourceContactId(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceContactID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_targetType(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.Event_TargetType)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_targetAddr(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BertyEntityEvent().TargetAddr(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_errProxy(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrProxy, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Err)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityErr(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEvent_metadata(ctx context.Context, field graphql.CollectedField, obj *entity.Event) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.MetadataKeyValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntityMetadataKeyValue(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyEntityEventDispatchImplementors = []string{"BertyEntityEventDispatch"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityEventDispatch(ctx context.Context, sel ast.SelectionSet, obj *entity.EventDispatch) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityEventDispatchImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityEventDispatch")
		case "eventId":
			out.Values[i] = ec._BertyEntityEventDispatch_eventId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deviceId":
			out.Values[i] = ec._BertyEntityEventDispatch_deviceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "contactId":
			out.Values[i] = ec._BertyEntityEventDispatch_contactId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "sentAt":
			out.Values[i] = ec._BertyEntityEventDispatch_sentAt(ctx, field, obj)
		case "ackedAt":
			out.Values[i] = ec._BertyEntityEventDispatch_ackedAt(ctx, field, obj)
		case "seenAt":
			out.Values[i] = ec._BertyEntityEventDispatch_seenAt(ctx, field, obj)
		case "ackMedium":
			out.Values[i] = ec._BertyEntityEventDispatch_ackMedium(ctx, field, obj)
		case "seenMedium":
			out.Values[i] = ec._BertyEntityEventDispatch_seenMedium(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEventDispatch_eventId(ctx context.Context, field graphql.CollectedField, obj *entity.EventDispatch) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEventDispatch",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEventDispatch_deviceId(ctx context.Context, field graphql.CollectedField, obj *entity.EventDispatch) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEventDispatch",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEventDispatch_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.EventDispatch) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEventDispatch",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEventDispatch_sentAt(ctx context.Context, field graphql.CollectedField, obj *entity.EventDispatch) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEventDispatch",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SentAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEventDispatch_ackedAt(ctx context.Context, field graphql.CollectedField, obj *entity.EventDispatch) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEventDispatch",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AckedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEventDispatch_seenAt(ctx context.Context, field graphql.CollectedField, obj *entity.EventDispatch) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEventDispatch",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeenAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEventDispatch_ackMedium(ctx context.Context, field graphql.CollectedField, obj *entity.EventDispatch) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEventDispatch",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AckMedium, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.EventDispatch_Medium)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityEventDispatch_seenMedium(ctx context.Context, field graphql.CollectedField, obj *entity.EventDispatch) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityEventDispatch",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeenMedium, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.EventDispatch_Medium)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

var bertyEntityMessageImplementors = []string{"BertyEntityMessage"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityMessage(ctx context.Context, sel ast.SelectionSet, obj *entity.Message) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityMessageImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityMessage")
		case "text":
			out.Values[i] = ec._BertyEntityMessage_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityMessage_text(ctx context.Context, field graphql.CollectedField, obj *entity.Message) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityMessage",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyEntityMetadataKeyValueImplementors = []string{"BertyEntityMetadataKeyValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityMetadataKeyValue(ctx context.Context, sel ast.SelectionSet, obj *entity.MetadataKeyValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityMetadataKeyValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityMetadataKeyValue")
		case "key":
			out.Values[i] = ec._BertyEntityMetadataKeyValue_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "values":
			out.Values[i] = ec._BertyEntityMetadataKeyValue_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityMetadataKeyValue_key(ctx context.Context, field graphql.CollectedField, obj *entity.MetadataKeyValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityMetadataKeyValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityMetadataKeyValue_values(ctx context.Context, field graphql.CollectedField, obj *entity.MetadataKeyValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityMetadataKeyValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var bertyEntityNodeAttrsImplementors = []string{"BertyEntityNodeAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityNodeAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.NodeAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityNodeAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityNodeAttrs")
		case "kind":
			out.Values[i] = ec._BertyEntityNodeAttrs_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "attributes":
			out.Values[i] = ec._BertyEntityNodeAttrs_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityNodeAttrs_kind(ctx context.Context, field graphql.CollectedField, obj *entity.NodeAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityNodeAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	rctx.Result = res
	return models.MarshalInt32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityNodeAttrs_attributes(ctx context.Context, field graphql.CollectedField, obj *entity.NodeAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityNodeAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

var bertyEntityPingAttrsImplementors = []string{"BertyEntityPingAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntityPingAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.PingAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntityPingAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntityPingAttrs")
		case "T":
			out.Values[i] = ec._BertyEntityPingAttrs_T(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntityPingAttrs_T(ctx context.Context, field graphql.CollectedField, obj *entity.PingAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntityPingAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.T, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyEntitySeenAttrsImplementors = []string{"BertyEntitySeenAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntitySeenAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.SeenAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntitySeenAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntitySeenAttrs")
		case "ids":
			out.Values[i] = ec._BertyEntitySeenAttrs_ids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySeenAttrs_ids(ctx context.Context, field graphql.CollectedField, obj *entity.SeenAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySeenAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var bertyEntitySenderAliasImplementors = []string{"BertyEntitySenderAlias"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntitySenderAlias(ctx context.Context, sel ast.SelectionSet, obj *entity.SenderAlias) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntitySenderAliasImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntitySenderAlias")
		case "id":
			out.Values[i] = ec._BertyEntitySenderAlias_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createdAt":
			out.Values[i] = ec._BertyEntitySenderAlias_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyEntitySenderAlias_updatedAt(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BertyEntitySenderAlias_status(ctx, field, obj)
		case "originDeviceId":
			out.Values[i] = ec._BertyEntitySenderAlias_originDeviceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "contactId":
			out.Values[i] = ec._BertyEntitySenderAlias_contactId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "conversationId":
			out.Values[i] = ec._BertyEntitySenderAlias_conversationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "aliasIdentifier":
			out.Values[i] = ec._BertyEntitySenderAlias_aliasIdentifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "used":
			out.Values[i] = ec._BertyEntitySenderAlias_used(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_id(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_createdAt(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_status(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(entity.SenderAlias_Status)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_originDeviceId(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginDeviceID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_contactId(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_conversationId(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConversationID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_aliasIdentifier(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AliasIdentifier, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAlias_used(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAlias) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAlias",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Used, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyEntitySenderAliasUpdateAttrsImplementors = []string{"BertyEntitySenderAliasUpdateAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntitySenderAliasUpdateAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.SenderAliasUpdateAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntitySenderAliasUpdateAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntitySenderAliasUpdateAttrs")
		case "aliases":
			out.Values[i] = ec._BertyEntitySenderAliasUpdateAttrs_aliases(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySenderAliasUpdateAttrs_aliases(ctx context.Context, field graphql.CollectedField, obj *entity.SenderAliasUpdateAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySenderAliasUpdateAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aliases, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.SenderAlias)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntitySenderAlias(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyEntitySentAttrsImplementors = []string{"BertyEntitySentAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyEntitySentAttrs(ctx context.Context, sel ast.SelectionSet, obj *entity.SentAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyEntitySentAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyEntitySentAttrs")
		case "ids":
			out.Values[i] = ec._BertyEntitySentAttrs_ids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyEntitySentAttrs_ids(ctx context.Context, field graphql.CollectedField, obj *entity.SentAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyEntitySentAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var bertyNetworkMetricBandwidthStatsImplementors = []string{"BertyNetworkMetricBandwidthStats"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNetworkMetricBandwidthStats(ctx context.Context, sel ast.SelectionSet, obj *metric.BandwidthStats) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNetworkMetricBandwidthStatsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNetworkMetricBandwidthStats")
		case "id":
			out.Values[i] = ec._BertyNetworkMetricBandwidthStats_id(ctx, field, obj)
		case "totalIn":
			out.Values[i] = ec._BertyNetworkMetricBandwidthStats_totalIn(ctx, field, obj)
		case "totalOut":
			out.Values[i] = ec._BertyNetworkMetricBandwidthStats_totalOut(ctx, field, obj)
		case "rateIn":
			out.Values[i] = ec._BertyNetworkMetricBandwidthStats_rateIn(ctx, field, obj)
		case "rateOut":
			out.Values[i] = ec._BertyNetworkMetricBandwidthStats_rateOut(ctx, field, obj)
		case "type":
			out.Values[i] = ec._BertyNetworkMetricBandwidthStats_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricBandwidthStats_id(ctx context.Context, field graphql.CollectedField, obj *metric.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricBandwidthStats_totalIn(ctx context.Context, field graphql.CollectedField, obj *metric.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalIn, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	return models.MarshalInt64(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricBandwidthStats_totalOut(ctx context.Context, field graphql.CollectedField, obj *metric.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalOut, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	rctx.Result = res
	return models.MarshalInt64(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricBandwidthStats_rateIn(ctx context.Context, field graphql.CollectedField, obj *metric.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateIn, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	return models.MarshalDouble(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricBandwidthStats_rateOut(ctx context.Context, field graphql.CollectedField, obj *metric.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateOut, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	return models.MarshalDouble(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricBandwidthStats_type(ctx context.Context, field graphql.CollectedField, obj *metric.BandwidthStats) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricBandwidthStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(metric.MetricsType)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

var bertyNetworkMetricListAddrsImplementors = []string{"BertyNetworkMetricListAddrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNetworkMetricListAddrs(ctx context.Context, sel ast.SelectionSet, obj *metric.ListAddrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNetworkMetricListAddrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNetworkMetricListAddrs")
		case "addrs":
			out.Values[i] = ec._BertyNetworkMetricListAddrs_addrs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricListAddrs_addrs(ctx context.Context, field graphql.CollectedField, obj *metric.ListAddrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricListAddrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Addrs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var bertyNetworkMetricPeerImplementors = []string{"BertyNetworkMetricPeer"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNetworkMetricPeer(ctx context.Context, sel ast.SelectionSet, obj *metric.Peer) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNetworkMetricPeerImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNetworkMetricPeer")
		case "id":
			out.Values[i] = ec._BertyNetworkMetricPeer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "addrs":
			out.Values[i] = ec._BertyNetworkMetricPeer_addrs(ctx, field, obj)
		case "connection":
			out.Values[i] = ec._BertyNetworkMetricPeer_connection(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricPeer_id(ctx context.Context, field graphql.CollectedField, obj *metric.Peer) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricPeer",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricPeer_addrs(ctx context.Context, field graphql.CollectedField, obj *metric.Peer) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricPeer",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Addrs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricPeer_connection(ctx context.Context, field graphql.CollectedField, obj *metric.Peer) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricPeer",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Connection, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(metric.ConnectionType)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

var bertyNetworkMetricPeersImplementors = []string{"BertyNetworkMetricPeers"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNetworkMetricPeers(ctx context.Context, sel ast.SelectionSet, obj *metric.Peers) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNetworkMetricPeersImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNetworkMetricPeers")
		case "list":
			out.Values[i] = ec._BertyNetworkMetricPeers_list(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricPeers_list(ctx context.Context, field graphql.CollectedField, obj *metric.Peers) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricPeers",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*metric.Peer)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyNetworkMetricPeer(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyNetworkMetricPingReqImplementors = []string{"BertyNetworkMetricPingReq"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNetworkMetricPingReq(ctx context.Context, sel ast.SelectionSet, obj *metric.PingReq) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNetworkMetricPingReqImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNetworkMetricPingReq")
		case "str":
			out.Values[i] = ec._BertyNetworkMetricPingReq_str(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNetworkMetricPingReq_str(ctx context.Context, field graphql.CollectedField, obj *metric.PingReq) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNetworkMetricPingReq",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Str, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeAppVersionOutputImplementors = []string{"BertyNodeAppVersionOutput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeAppVersionOutput(ctx context.Context, sel ast.SelectionSet, obj *node.AppVersionOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeAppVersionOutputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeAppVersionOutput")
		case "version":
			out.Values[i] = ec._BertyNodeAppVersionOutput_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeAppVersionOutput_version(ctx context.Context, field graphql.CollectedField, obj *node.AppVersionOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeAppVersionOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeBackgroundCriticalAttrsImplementors = []string{"BertyNodeBackgroundCriticalAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeBackgroundCriticalAttrs(ctx context.Context, sel ast.SelectionSet, obj *node.BackgroundCriticalAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeBackgroundCriticalAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeBackgroundCriticalAttrs")
		case "errMsg":
			out.Values[i] = ec._BertyNodeBackgroundCriticalAttrs_errMsg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeBackgroundCriticalAttrs_errMsg(ctx context.Context, field graphql.CollectedField, obj *node.BackgroundCriticalAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeBackgroundCriticalAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrMsg, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeBackgroundErrorAttrsImplementors = []string{"BertyNodeBackgroundErrorAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeBackgroundErrorAttrs(ctx context.Context, sel ast.SelectionSet, obj *node.BackgroundErrorAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeBackgroundErrorAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeBackgroundErrorAttrs")
		case "errMsg":
			out.Values[i] = ec._BertyNodeBackgroundErrorAttrs_errMsg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeBackgroundErrorAttrs_errMsg(ctx context.Context, field graphql.CollectedField, obj *node.BackgroundErrorAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeBackgroundErrorAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrMsg, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeBackgroundWarnAttrsImplementors = []string{"BertyNodeBackgroundWarnAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeBackgroundWarnAttrs(ctx context.Context, sel ast.SelectionSet, obj *node.BackgroundWarnAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeBackgroundWarnAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeBackgroundWarnAttrs")
		case "errMsg":
			out.Values[i] = ec._BertyNodeBackgroundWarnAttrs_errMsg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeBackgroundWarnAttrs_errMsg(ctx context.Context, field graphql.CollectedField, obj *node.BackgroundWarnAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeBackgroundWarnAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrMsg, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeBoolImplementors = []string{"BertyNodeBool"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeBool(ctx context.Context, sel ast.SelectionSet, obj *node.Bool) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeBoolImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeBool")
		case "ret":
			out.Values[i] = ec._BertyNodeBool_ret(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeBool_ret(ctx context.Context, field graphql.CollectedField, obj *node.Bool) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeBool",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ret, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyNodeCommitLogImplementors = []string{"BertyNodeCommitLog"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeCommitLog(ctx context.Context, sel ast.SelectionSet, obj *node.CommitLog) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeCommitLogImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeCommitLog")
		case "operation":
			out.Values[i] = ec._BertyNodeCommitLog_operation(ctx, field, obj)
		case "entity":
			out.Values[i] = ec._BertyNodeCommitLog_entity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeCommitLog_operation(ctx context.Context, field graphql.CollectedField, obj *node.CommitLog) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeCommitLog",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(node.CommitLog_Operation)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeCommitLog_entity(ctx context.Context, field graphql.CollectedField, obj *node.CommitLog) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeCommitLog",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entity, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.CommitLog_Entity)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeCommitLogEntity(ctx, field.Selections, res)
}

var bertyNodeCommitLogEntityImplementors = []string{"BertyNodeCommitLogEntity"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeCommitLogEntity(ctx context.Context, sel ast.SelectionSet, obj *node.CommitLog_Entity) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeCommitLogEntityImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeCommitLogEntity")
		case "config":
			out.Values[i] = ec._BertyNodeCommitLogEntity_config(ctx, field, obj)
		case "contact":
			out.Values[i] = ec._BertyNodeCommitLogEntity_contact(ctx, field, obj)
		case "device":
			out.Values[i] = ec._BertyNodeCommitLogEntity_device(ctx, field, obj)
		case "conversation":
			out.Values[i] = ec._BertyNodeCommitLogEntity_conversation(ctx, field, obj)
		case "conversationMember":
			out.Values[i] = ec._BertyNodeCommitLogEntity_conversationMember(ctx, field, obj)
		case "event":
			out.Values[i] = ec._BertyNodeCommitLogEntity_event(ctx, field, obj)
		case "devicePushConfig":
			out.Values[i] = ec._BertyNodeCommitLogEntity_devicePushConfig(ctx, field, obj)
		case "devicePushIdentifier":
			out.Values[i] = ec._BertyNodeCommitLogEntity_devicePushIdentifier(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeCommitLogEntity_config(ctx context.Context, field graphql.CollectedField, obj *node.CommitLog_Entity) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeCommitLogEntity",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Config, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Config)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConfig(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeCommitLogEntity_contact(ctx context.Context, field graphql.CollectedField, obj *node.CommitLog_Entity) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeCommitLogEntity",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeCommitLogEntity_device(ctx context.Context, field graphql.CollectedField, obj *node.CommitLog_Entity) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeCommitLogEntity",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Device, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Device)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityDevice(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeCommitLogEntity_conversation(ctx context.Context, field graphql.CollectedField, obj *node.CommitLog_Entity) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeCommitLogEntity",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conversation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeCommitLogEntity_conversationMember(ctx context.Context, field graphql.CollectedField, obj *node.CommitLog_Entity) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeCommitLogEntity",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConversationMember, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.ConversationMember)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversationMember(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeCommitLogEntity_event(ctx context.Context, field graphql.CollectedField, obj *node.CommitLog_Entity) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeCommitLogEntity",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Event)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityEvent(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeCommitLogEntity_devicePushConfig(ctx context.Context, field graphql.CollectedField, obj *node.CommitLog_Entity) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeCommitLogEntity",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DevicePushConfig, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.DevicePushConfig)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityDevicePushConfig(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeCommitLogEntity_devicePushIdentifier(ctx context.Context, field graphql.CollectedField, obj *node.CommitLog_Entity) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeCommitLogEntity",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DevicePushIdentifier, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.DevicePushIdentifier)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityDevicePushIdentifier(ctx, field.Selections, res)
}

var bertyNodeContactEdgeImplementors = []string{"BertyNodeContactEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeContactEdge(ctx context.Context, sel ast.SelectionSet, obj *node.ContactEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeContactEdgeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeContactEdge")
		case "node":
			out.Values[i] = ec._BertyNodeContactEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._BertyNodeContactEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeContactEdge_node(ctx context.Context, field graphql.CollectedField, obj *node.ContactEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeContactEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeContactEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *node.ContactEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeContactEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeContactListConnectionImplementors = []string{"BertyNodeContactListConnection"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeContactListConnection(ctx context.Context, sel ast.SelectionSet, obj *node.ContactListConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeContactListConnectionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeContactListConnection")
		case "edges":
			out.Values[i] = ec._BertyNodeContactListConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BertyNodeContactListConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeContactListConnection_edges(ctx context.Context, field graphql.CollectedField, obj *node.ContactListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeContactListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*node.ContactEdge)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyNodeContactEdge(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeContactListConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *node.ContactListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeContactListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*node.PageInfo)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec._BertyNodePageInfo(ctx, field.Selections, res)
}

var bertyNodeConversationEdgeImplementors = []string{"BertyNodeConversationEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeConversationEdge(ctx context.Context, sel ast.SelectionSet, obj *node.ConversationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeConversationEdgeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeConversationEdge")
		case "node":
			out.Values[i] = ec._BertyNodeConversationEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._BertyNodeConversationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeConversationEdge_node(ctx context.Context, field graphql.CollectedField, obj *node.ConversationEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeConversationEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeConversationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *node.ConversationEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeConversationEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeConversationListConnectionImplementors = []string{"BertyNodeConversationListConnection"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeConversationListConnection(ctx context.Context, sel ast.SelectionSet, obj *node.ConversationListConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeConversationListConnectionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeConversationListConnection")
		case "edges":
			out.Values[i] = ec._BertyNodeConversationListConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BertyNodeConversationListConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeConversationListConnection_edges(ctx context.Context, field graphql.CollectedField, obj *node.ConversationListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeConversationListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*node.ConversationEdge)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyNodeConversationEdge(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeConversationListConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *node.ConversationListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeConversationListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*node.PageInfo)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec._BertyNodePageInfo(ctx, field.Selections, res)
}

var bertyNodeDebugAttrsImplementors = []string{"BertyNodeDebugAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeDebugAttrs(ctx context.Context, sel ast.SelectionSet, obj *node.DebugAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeDebugAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeDebugAttrs")
		case "msg":
			out.Values[i] = ec._BertyNodeDebugAttrs_msg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeDebugAttrs_msg(ctx context.Context, field graphql.CollectedField, obj *node.DebugAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeDebugAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeDevicePushConfigEdgeImplementors = []string{"BertyNodeDevicePushConfigEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeDevicePushConfigEdge(ctx context.Context, sel ast.SelectionSet, obj *node.DevicePushConfigEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeDevicePushConfigEdgeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeDevicePushConfigEdge")
		case "node":
			out.Values[i] = ec._BertyNodeDevicePushConfigEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._BertyNodeDevicePushConfigEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeDevicePushConfigEdge_node(ctx context.Context, field graphql.CollectedField, obj *node.DevicePushConfigEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeDevicePushConfigEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.DevicePushConfig)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityDevicePushConfig(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeDevicePushConfigEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *node.DevicePushConfigEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeDevicePushConfigEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeDevicePushConfigListOutputImplementors = []string{"BertyNodeDevicePushConfigListOutput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeDevicePushConfigListOutput(ctx context.Context, sel ast.SelectionSet, obj *node.DevicePushConfigListOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeDevicePushConfigListOutputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeDevicePushConfigListOutput")
		case "edges":
			out.Values[i] = ec._BertyNodeDevicePushConfigListOutput_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeDevicePushConfigListOutput_edges(ctx context.Context, field graphql.CollectedField, obj *node.DevicePushConfigListOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeDevicePushConfigListOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.DevicePushConfig)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntityDevicePushConfig(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyNodeEventEdgeImplementors = []string{"BertyNodeEventEdge"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeEventEdge(ctx context.Context, sel ast.SelectionSet, obj *node.EventEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeEventEdgeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeEventEdge")
		case "node":
			out.Values[i] = ec._BertyNodeEventEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._BertyNodeEventEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeEventEdge_node(ctx context.Context, field graphql.CollectedField, obj *node.EventEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeEventEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Event)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityEvent(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeEventEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *node.EventEdge) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeEventEdge",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeEventListConnectionImplementors = []string{"BertyNodeEventListConnection"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeEventListConnection(ctx context.Context, sel ast.SelectionSet, obj *node.EventListConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeEventListConnectionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeEventListConnection")
		case "edges":
			out.Values[i] = ec._BertyNodeEventListConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BertyNodeEventListConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeEventListConnection_edges(ctx context.Context, field graphql.CollectedField, obj *node.EventListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeEventListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*node.EventEdge)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyNodeEventEdge(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeEventListConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *node.EventListConnection) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeEventListConnection",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*node.PageInfo)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec._BertyNodePageInfo(ctx, field.Selections, res)
}

var bertyNodeIntegrationTestOutputImplementors = []string{"BertyNodeIntegrationTestOutput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeIntegrationTestOutput(ctx context.Context, sel ast.SelectionSet, obj *node.IntegrationTestOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeIntegrationTestOutputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeIntegrationTestOutput")
		case "name":
			out.Values[i] = ec._BertyNodeIntegrationTestOutput_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "success":
			out.Values[i] = ec._BertyNodeIntegrationTestOutput_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "verbose":
			out.Values[i] = ec._BertyNodeIntegrationTestOutput_verbose(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "startedAt":
			out.Values[i] = ec._BertyNodeIntegrationTestOutput_startedAt(ctx, field, obj)
		case "finishedAt":
			out.Values[i] = ec._BertyNodeIntegrationTestOutput_finishedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeIntegrationTestOutput_name(ctx context.Context, field graphql.CollectedField, obj *node.IntegrationTestOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeIntegrationTestOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeIntegrationTestOutput_success(ctx context.Context, field graphql.CollectedField, obj *node.IntegrationTestOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeIntegrationTestOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeIntegrationTestOutput_verbose(ctx context.Context, field graphql.CollectedField, obj *node.IntegrationTestOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeIntegrationTestOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Verbose, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeIntegrationTestOutput_startedAt(ctx context.Context, field graphql.CollectedField, obj *node.IntegrationTestOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeIntegrationTestOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeIntegrationTestOutput_finishedAt(ctx context.Context, field graphql.CollectedField, obj *node.IntegrationTestOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeIntegrationTestOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	return models.MarshalTime(res)
}

var bertyNodeLogEntryImplementors = []string{"BertyNodeLogEntry"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeLogEntry(ctx context.Context, sel ast.SelectionSet, obj *node.LogEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeLogEntryImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeLogEntry")
		case "line":
			out.Values[i] = ec._BertyNodeLogEntry_line(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeLogEntry_line(ctx context.Context, field graphql.CollectedField, obj *node.LogEntry) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeLogEntry",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Line, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeLogfileEntryImplementors = []string{"BertyNodeLogfileEntry"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeLogfileEntry(ctx context.Context, sel ast.SelectionSet, obj *node.LogfileEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeLogfileEntryImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeLogfileEntry")
		case "path":
			out.Values[i] = ec._BertyNodeLogfileEntry_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "filesize":
			out.Values[i] = ec._BertyNodeLogfileEntry_filesize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "createdAt":
			out.Values[i] = ec._BertyNodeLogfileEntry_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._BertyNodeLogfileEntry_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeLogfileEntry_path(ctx context.Context, field graphql.CollectedField, obj *node.LogfileEntry) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeLogfileEntry",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeLogfileEntry_filesize(ctx context.Context, field graphql.CollectedField, obj *node.LogfileEntry) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeLogfileEntry",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filesize, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	rctx.Result = res
	return models.MarshalInt32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeLogfileEntry_createdAt(ctx context.Context, field graphql.CollectedField, obj *node.LogfileEntry) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeLogfileEntry",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeLogfileEntry_updatedAt(ctx context.Context, field graphql.CollectedField, obj *node.LogfileEntry) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeLogfileEntry",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalTime(*res)
}

var bertyNodeNodeEventImplementors = []string{"BertyNodeNodeEvent"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeNodeEvent(ctx context.Context, sel ast.SelectionSet, obj *node.NodeEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeNodeEventImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeNodeEvent")
		case "kind":
			out.Values[i] = ec._BertyNodeNodeEvent_kind(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._BertyNodeNodeEvent_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeNodeEvent_kind(ctx context.Context, field graphql.CollectedField, obj *node.NodeEvent) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeNodeEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(node.Kind)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeNodeEvent_attributes(ctx context.Context, field graphql.CollectedField, obj *node.NodeEvent) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeNodeEvent",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

var bertyNodeNodeIsAliveAttrsImplementors = []string{"BertyNodeNodeIsAliveAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeNodeIsAliveAttrs(ctx context.Context, sel ast.SelectionSet, obj *node.NodeIsAliveAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeNodeIsAliveAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeNodeIsAliveAttrs")
		case "T":
			out.Values[i] = ec._BertyNodeNodeIsAliveAttrs_T(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeNodeIsAliveAttrs_T(ctx context.Context, field graphql.CollectedField, obj *node.NodeIsAliveAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeNodeIsAliveAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.T, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyNodeNodeStartedAttrsImplementors = []string{"BertyNodeNodeStartedAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeNodeStartedAttrs(ctx context.Context, sel ast.SelectionSet, obj *node.NodeStartedAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeNodeStartedAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeNodeStartedAttrs")
		case "T":
			out.Values[i] = ec._BertyNodeNodeStartedAttrs_T(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeNodeStartedAttrs_T(ctx context.Context, field graphql.CollectedField, obj *node.NodeStartedAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeNodeStartedAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.T, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyNodeNodeStoppedAttrsImplementors = []string{"BertyNodeNodeStoppedAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeNodeStoppedAttrs(ctx context.Context, sel ast.SelectionSet, obj *node.NodeStoppedAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeNodeStoppedAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeNodeStoppedAttrs")
		case "errMsg":
			out.Values[i] = ec._BertyNodeNodeStoppedAttrs_errMsg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeNodeStoppedAttrs_errMsg(ctx context.Context, field graphql.CollectedField, obj *node.NodeStoppedAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeNodeStoppedAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrMsg, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodePageInfoImplementors = []string{"BertyNodePageInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodePageInfo(ctx context.Context, sel ast.SelectionSet, obj *node.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodePageInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodePageInfo")
		case "startCursor":
			out.Values[i] = ec._BertyNodePageInfo_startCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "endCursor":
			out.Values[i] = ec._BertyNodePageInfo_endCursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "hasNextPage":
			out.Values[i] = ec._BertyNodePageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "hasPreviousPage":
			out.Values[i] = ec._BertyNodePageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "count":
			out.Values[i] = ec._BertyNodePageInfo_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *node.PageInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *node.PageInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *node.PageInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *node.PageInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePageInfo_count(ctx context.Context, field graphql.CollectedField, obj *node.PageInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePageInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint32)
	rctx.Result = res
	return models.MarshalUint32(res)
}

var bertyNodePaginationImplementors = []string{"BertyNodePagination"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodePagination(ctx context.Context, sel ast.SelectionSet, obj *node.Pagination) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodePaginationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodePagination")
		case "orderBy":
			out.Values[i] = ec._BertyNodePagination_orderBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "orderDesc":
			out.Values[i] = ec._BertyNodePagination_orderDesc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "first":
			out.Values[i] = ec._BertyNodePagination_first(ctx, field, obj)
		case "after":
			out.Values[i] = ec._BertyNodePagination_after(ctx, field, obj)
		case "last":
			out.Values[i] = ec._BertyNodePagination_last(ctx, field, obj)
		case "before":
			out.Values[i] = ec._BertyNodePagination_before(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_orderBy(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderBy, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_orderDesc(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderDesc, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_first(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.First, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	rctx.Result = res
	return models.MarshalInt32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_after(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.After, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_last(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Last, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int32)
	rctx.Result = res
	return models.MarshalInt32(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePagination_before(ctx context.Context, field graphql.CollectedField, obj *node.Pagination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePagination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Before, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodePingDestinationImplementors = []string{"BertyNodePingDestination"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodePingDestination(ctx context.Context, sel ast.SelectionSet, obj *node.PingDestination) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodePingDestinationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodePingDestination")
		case "destination":
			out.Values[i] = ec._BertyNodePingDestination_destination(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodePingDestination_destination(ctx context.Context, field graphql.CollectedField, obj *node.PingDestination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodePingDestination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Destination, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var bertyNodeProtocolsOutputImplementors = []string{"BertyNodeProtocolsOutput"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeProtocolsOutput(ctx context.Context, sel ast.SelectionSet, obj *node.ProtocolsOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeProtocolsOutputImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeProtocolsOutput")
		case "protocols":
			out.Values[i] = ec._BertyNodeProtocolsOutput_protocols(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeProtocolsOutput_protocols(ctx context.Context, field graphql.CollectedField, obj *node.ProtocolsOutput) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeProtocolsOutput",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Protocols, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var bertyNodeStatisticsAttrsImplementors = []string{"BertyNodeStatisticsAttrs"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeStatisticsAttrs(ctx context.Context, sel ast.SelectionSet, obj *node.StatisticsAttrs) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeStatisticsAttrsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeStatisticsAttrs")
		case "errMsg":
			out.Values[i] = ec._BertyNodeStatisticsAttrs_errMsg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "totalNetworkBandwidth":
			out.Values[i] = ec._BertyNodeStatisticsAttrs_totalNetworkBandwidth(ctx, field, obj)
		case "peersCount":
			out.Values[i] = ec._BertyNodeStatisticsAttrs_peersCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeStatisticsAttrs_errMsg(ctx context.Context, field graphql.CollectedField, obj *node.StatisticsAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeStatisticsAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrMsg, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeStatisticsAttrs_totalNetworkBandwidth(ctx context.Context, field graphql.CollectedField, obj *node.StatisticsAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeStatisticsAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNetworkBandwidth, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*metric.BandwidthStats)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNetworkMetricBandwidthStats(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeStatisticsAttrs_peersCount(ctx context.Context, field graphql.CollectedField, obj *node.StatisticsAttrs) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeStatisticsAttrs",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeersCount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	rctx.Result = res
	return models.MarshalInt32(res)
}

var bertyNodeVoidImplementors = []string{"BertyNodeVoid"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyNodeVoid(ctx context.Context, sel ast.SelectionSet, obj *node.Void) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyNodeVoidImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyNodeVoid")
		case "T":
			out.Values[i] = ec._BertyNodeVoid_T(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyNodeVoid_T(ctx context.Context, field graphql.CollectedField, obj *node.Void) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyNodeVoid",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.T, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return models.MarshalBool(res)
}

var bertyPkgDeviceinfoDeviceInfoImplementors = []string{"BertyPkgDeviceinfoDeviceInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfo(ctx context.Context, sel ast.SelectionSet, obj *deviceinfo.DeviceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyPkgDeviceinfoDeviceInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyPkgDeviceinfoDeviceInfo")
		case "key":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfo_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfo_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "category":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfo_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "link":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfo_link(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfo_type(ctx, field, obj)
		case "errMsg":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfo_errMsg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "weight":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfo_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfo_key(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfo_value(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfo_category(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfo_link(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfo_type(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(deviceinfo.Type)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfo_errMsg(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrMsg, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfo_weight(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int32)
	rctx.Result = res
	return models.MarshalInt32(res)
}

var bertyPkgDeviceinfoDeviceInfosImplementors = []string{"BertyPkgDeviceinfoDeviceInfos"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfos(ctx context.Context, sel ast.SelectionSet, obj *deviceinfo.DeviceInfos) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyPkgDeviceinfoDeviceInfosImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyPkgDeviceinfoDeviceInfos")
		case "infos":
			out.Values[i] = ec._BertyPkgDeviceinfoDeviceInfos_infos(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyPkgDeviceinfoDeviceInfos_infos(ctx context.Context, field graphql.CollectedField, obj *deviceinfo.DeviceInfos) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPkgDeviceinfoDeviceInfos",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Infos, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*deviceinfo.DeviceInfo)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyPkgDeviceinfoDeviceInfo(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var bertyPushPushDataImplementors = []string{"BertyPushPushData"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyPushPushData(ctx context.Context, sel ast.SelectionSet, obj *push.PushData) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyPushPushDataImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyPushPushData")
		case "pushIdentifier":
			out.Values[i] = ec._BertyPushPushData_pushIdentifier(ctx, field, obj)
		case "envelope":
			out.Values[i] = ec._BertyPushPushData_envelope(ctx, field, obj)
		case "priority":
			out.Values[i] = ec._BertyPushPushData_priority(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyPushPushData_pushIdentifier(ctx context.Context, field graphql.CollectedField, obj *push.PushData) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPushPushData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushIdentifier, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyPushPushData_envelope(ctx context.Context, field graphql.CollectedField, obj *push.PushData) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPushPushData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Envelope, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyPushPushData_priority(ctx context.Context, field graphql.CollectedField, obj *push.PushData) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPushPushData",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(push.Priority)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

var bertyPushPushDestinationImplementors = []string{"BertyPushPushDestination"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyPushPushDestination(ctx context.Context, sel ast.SelectionSet, obj *push.PushDestination) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyPushPushDestinationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyPushPushDestination")
		case "nonce":
			out.Values[i] = ec._BertyPushPushDestination_nonce(ctx, field, obj)
		case "pushType":
			out.Values[i] = ec._BertyPushPushDestination_pushType(ctx, field, obj)
		case "pushId":
			out.Values[i] = ec._BertyPushPushDestination_pushId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyPushPushDestination_nonce(ctx context.Context, field graphql.CollectedField, obj *push.PushDestination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPushPushDestination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nonce, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _BertyPushPushDestination_pushType(ctx context.Context, field graphql.CollectedField, obj *push.PushDestination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPushPushDestination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(push.DevicePushType)
	rctx.Result = res
	return models.MarshalEnum(int32(res))
}

// nolint: vetshadow
func (ec *executionContext) _BertyPushPushDestination_pushId(ctx context.Context, field graphql.CollectedField, obj *push.PushDestination) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPushPushDestination",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushId, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

var bertyPushPushNativeIdentifierImplementors = []string{"BertyPushPushNativeIdentifier"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _BertyPushPushNativeIdentifier(ctx context.Context, sel ast.SelectionSet, obj *push.PushNativeIdentifier) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, bertyPushPushNativeIdentifierImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BertyPushPushNativeIdentifier")
		case "packageId":
			out.Values[i] = ec._BertyPushPushNativeIdentifier_packageId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deviceToken":
			out.Values[i] = ec._BertyPushPushNativeIdentifier_deviceToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _BertyPushPushNativeIdentifier_packageId(ctx context.Context, field graphql.CollectedField, obj *push.PushNativeIdentifier) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPushPushNativeIdentifier",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackageID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _BertyPushPushNativeIdentifier_deviceToken(ctx context.Context, field graphql.CollectedField, obj *push.PushNativeIdentifier) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "BertyPushPushNativeIdentifier",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceToken, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

var googleProtobufAnyImplementors = []string{"GoogleProtobufAny"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufAny(ctx context.Context, sel ast.SelectionSet, obj *any.Any) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufAnyImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufAny")
		case "typeUrl":
			out.Values[i] = ec._GoogleProtobufAny_typeUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._GoogleProtobufAny_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufAny_typeUrl(ctx context.Context, field graphql.CollectedField, obj *any.Any) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufAny",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeUrl, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufAny_value(ctx context.Context, field graphql.CollectedField, obj *any.Any) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufAny",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

var googleProtobufDescriptorProtoImplementors = []string{"GoogleProtobufDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.DescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "field":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_field(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_extension(ctx, field, obj)
		case "nestedType":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_nestedType(ctx, field, obj)
		case "enumType":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_enumType(ctx, field, obj)
		case "extensionRange":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_extensionRange(ctx, field, obj)
		case "oneofDecl":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_oneofDecl(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_options(ctx, field, obj)
		case "reservedRange":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_reservedRange(ctx, field, obj)
		case "reservedName":
			out.Values[i] = ec._GoogleProtobufDescriptorProto_reservedName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_field(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FieldDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_extension(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FieldDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_nestedType(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NestedType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_enumType(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufEnumDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_extensionRange(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExtensionRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto_ExtensionRange)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufDescriptorProtoExtensionRange(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_oneofDecl(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OneofDecl, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.OneofDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufOneofDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.MessageOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufMessageOptions(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_reservedRange(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto_ReservedRange)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufDescriptorProtoReservedRange(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProto_reservedName(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var googleProtobufDescriptorProtoExtensionRangeImplementors = []string{"GoogleProtobufDescriptorProtoExtensionRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange(ctx context.Context, sel ast.SelectionSet, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoExtensionRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProtoExtensionRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "end":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_end(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "options":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoExtensionRange_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_start(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProtoExtensionRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProtoExtensionRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProtoExtensionRange_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ExtensionRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProtoExtensionRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.ExtensionRangeOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufExtensionRangeOptions(ctx, field.Selections, res)
}

var googleProtobufDescriptorProtoReservedRangeImplementors = []string{"GoogleProtobufDescriptorProtoReservedRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange(ctx context.Context, sel ast.SelectionSet, obj *descriptor.DescriptorProto_ReservedRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufDescriptorProtoReservedRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufDescriptorProtoReservedRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoReservedRange_start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "end":
			out.Values[i] = ec._GoogleProtobufDescriptorProtoReservedRange_end(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange_start(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ReservedRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProtoReservedRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufDescriptorProtoReservedRange_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.DescriptorProto_ReservedRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufDescriptorProtoReservedRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

var googleProtobufEnumDescriptorProtoImplementors = []string{"GoogleProtobufEnumDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "value":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_value(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_options(ctx, field, obj)
		case "reservedRange":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_reservedRange(ctx, field, obj)
		case "reservedName":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProto_reservedName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_value(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumValueDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufEnumValueDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.EnumOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufEnumOptions(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_reservedRange(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedRange, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumDescriptorProto_EnumReservedRange)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProto_reservedName(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var googleProtobufEnumDescriptorProtoEnumReservedRangeImplementors = []string{"GoogleProtobufEnumDescriptorProtoEnumReservedRange"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumDescriptorProto_EnumReservedRange) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumDescriptorProtoEnumReservedRangeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumDescriptorProtoEnumReservedRange")
		case "start":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange_start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "end":
			out.Values[i] = ec._GoogleProtobufEnumDescriptorProtoEnumReservedRange_end(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange_start(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto_EnumReservedRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProtoEnumReservedRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumDescriptorProtoEnumReservedRange_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumDescriptorProto_EnumReservedRange) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumDescriptorProtoEnumReservedRange",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

var googleProtobufEnumOptionsImplementors = []string{"GoogleProtobufEnumOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumOptions")
		case "allowAlias":
			out.Values[i] = ec._GoogleProtobufEnumOptions_allowAlias(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufEnumOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufEnumOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumOptions_allowAlias(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowAlias, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufEnumValueDescriptorProtoImplementors = []string{"GoogleProtobufEnumValueDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumValueDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumValueDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "number":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "options":
			out.Values[i] = ec._GoogleProtobufEnumValueDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumValueDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_number(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumValueDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumValueDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumValueDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.EnumValueOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufEnumValueOptions(ctx, field.Selections, res)
}

var googleProtobufEnumValueOptionsImplementors = []string{"GoogleProtobufEnumValueOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufEnumValueOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.EnumValueOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufEnumValueOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufEnumValueOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufEnumValueOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufEnumValueOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumValueOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumValueOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufEnumValueOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.EnumValueOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufEnumValueOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufExtensionRangeOptionsImplementors = []string{"GoogleProtobufExtensionRangeOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufExtensionRangeOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.ExtensionRangeOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufExtensionRangeOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufExtensionRangeOptions")
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufExtensionRangeOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufExtensionRangeOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.ExtensionRangeOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufExtensionRangeOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufFieldDescriptorProtoImplementors = []string{"GoogleProtobufFieldDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFieldDescriptorProtoImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFieldDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "number":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "label":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_label(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "type":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_type(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "typeName":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_typeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "extendee":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_extendee(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultValue":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_defaultValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "oneofIndex":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_oneofIndex(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "jsonName":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_jsonName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "options":
			out.Values[i] = ec._GoogleProtobufFieldDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_number(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_label(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFieldDescriptorProto().Label(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_type(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFieldDescriptorProto().Type(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_typeName(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_extendee(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extendee, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_defaultValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_oneofIndex(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OneofIndex, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_jsonName(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JsonName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.FieldOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufFieldOptions(ctx, field.Selections, res)
}

var googleProtobufFieldOptionsImplementors = []string{"GoogleProtobufFieldOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFieldOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FieldOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFieldOptionsImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFieldOptions")
		case "ctype":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFieldOptions_ctype(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "packed":
			out.Values[i] = ec._GoogleProtobufFieldOptions_packed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "jstype":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFieldOptions_jstype(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "lazy":
			out.Values[i] = ec._GoogleProtobufFieldOptions_lazy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufFieldOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "weak":
			out.Values[i] = ec._GoogleProtobufFieldOptions_weak(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufFieldOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_ctype(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFieldOptions().Ctype(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_packed(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Packed, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_jstype(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFieldOptions().Jstype(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_lazy(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lazy, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_weak(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weak, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFieldOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.FieldOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFieldOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufFileDescriptorProtoImplementors = []string{"GoogleProtobufFileDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "package":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_package(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "dependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_dependency(ctx, field, obj)
		case "publicDependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_publicDependency(ctx, field, obj)
		case "weakDependency":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_weakDependency(ctx, field, obj)
		case "messageType":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_messageType(ctx, field, obj)
		case "enumType":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_enumType(ctx, field, obj)
		case "service":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_service(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_extension(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_options(ctx, field, obj)
		case "sourceCodeInfo":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_sourceCodeInfo(ctx, field, obj)
		case "syntax":
			out.Values[i] = ec._GoogleProtobufFileDescriptorProto_syntax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_package(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Package, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_dependency(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_publicDependency(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicDependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalInt32(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_weakDependency(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeakDependency, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalInt32(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_messageType(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.DescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_enumType(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.EnumDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufEnumDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_service(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Service, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.ServiceDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufServiceDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_extension(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FieldDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufFieldDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.FileOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufFileOptions(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_sourceCodeInfo(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceCodeInfo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.SourceCodeInfo)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufSourceCodeInfo(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorProto_syntax(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Syntax, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

var googleProtobufFileDescriptorSetImplementors = []string{"GoogleProtobufFileDescriptorSet"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileDescriptorSet(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FileDescriptorSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileDescriptorSetImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileDescriptorSet")
		case "file":
			out.Values[i] = ec._GoogleProtobufFileDescriptorSet_file(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileDescriptorSet_file(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileDescriptorSet) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileDescriptorSet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.File, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.FileDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufFileDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufFileOptionsImplementors = []string{"GoogleProtobufFileOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufFileOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.FileOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufFileOptionsImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufFileOptions")
		case "javaPackage":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaPackage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "javaOuterClassname":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaOuterClassname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "javaMultipleFiles":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaMultipleFiles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "javaGenerateEqualsAndHash":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaGenerateEqualsAndHash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "javaStringCheckUtf8":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaStringCheckUtf8(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "optimizeFor":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufFileOptions_optimizeFor(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "goPackage":
			out.Values[i] = ec._GoogleProtobufFileOptions_goPackage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "ccGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_ccGenericServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "javaGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_javaGenericServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "pyGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_pyGenericServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "phpGenericServices":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpGenericServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufFileOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "ccEnableArenas":
			out.Values[i] = ec._GoogleProtobufFileOptions_ccEnableArenas(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "objcClassPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_objcClassPrefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "csharpNamespace":
			out.Values[i] = ec._GoogleProtobufFileOptions_csharpNamespace(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "swiftPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_swiftPrefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "phpClassPrefix":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpClassPrefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "phpNamespace":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpNamespace(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "phpMetadataNamespace":
			out.Values[i] = ec._GoogleProtobufFileOptions_phpMetadataNamespace(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "rubyPackage":
			out.Values[i] = ec._GoogleProtobufFileOptions_rubyPackage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufFileOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaPackage(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaPackage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaOuterClassname(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaOuterClassname, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaMultipleFiles(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaMultipleFiles, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaGenerateEqualsAndHash(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaGenerateEqualsAndHash, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaStringCheckUtf8(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaStringCheckUtf8, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_optimizeFor(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufFileOptions().OptimizeFor(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_goPackage(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GoPackage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_ccGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcGenericServices, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_javaGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JavaGenericServices, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_pyGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PyGenericServices, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_phpGenericServices(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhpGenericServices, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_ccEnableArenas(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcEnableArenas, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_objcClassPrefix(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjcClassPrefix, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_csharpNamespace(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CsharpNamespace, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_swiftPrefix(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SwiftPrefix, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_phpClassPrefix(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhpClassPrefix, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_phpNamespace(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhpNamespace, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_phpMetadataNamespace(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhpMetadataNamespace, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_rubyPackage(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RubyPackage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufFileOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.FileOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufFileOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufGeneratedCodeInfoImplementors = []string{"GoogleProtobufGeneratedCodeInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfo(ctx context.Context, sel ast.SelectionSet, obj *descriptor.GeneratedCodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufGeneratedCodeInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufGeneratedCodeInfo")
		case "annotation":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfo_annotation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfo_annotation(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufGeneratedCodeInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.GeneratedCodeInfo_Annotation)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufGeneratedCodeInfoAnnotation(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufGeneratedCodeInfoAnnotationImplementors = []string{"GoogleProtobufGeneratedCodeInfoAnnotation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation(ctx context.Context, sel ast.SelectionSet, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufGeneratedCodeInfoAnnotationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufGeneratedCodeInfoAnnotation")
		case "path":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_path(ctx, field, obj)
		case "sourceFile":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_sourceFile(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "begin":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_begin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "end":
			out.Values[i] = ec._GoogleProtobufGeneratedCodeInfoAnnotation_end(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_path(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufGeneratedCodeInfoAnnotation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalInt32(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_sourceFile(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufGeneratedCodeInfoAnnotation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceFile, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_begin(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufGeneratedCodeInfoAnnotation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Begin, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufGeneratedCodeInfoAnnotation_end(ctx context.Context, field graphql.CollectedField, obj *descriptor.GeneratedCodeInfo_Annotation) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufGeneratedCodeInfoAnnotation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt32(*res)
}

var googleProtobufMessageOptionsImplementors = []string{"GoogleProtobufMessageOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMessageOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.MessageOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMessageOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMessageOptions")
		case "messageSetWireFormat":
			out.Values[i] = ec._GoogleProtobufMessageOptions_messageSetWireFormat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "noStandardDescriptorAccessor":
			out.Values[i] = ec._GoogleProtobufMessageOptions_noStandardDescriptorAccessor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufMessageOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "mapEntry":
			out.Values[i] = ec._GoogleProtobufMessageOptions_mapEntry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufMessageOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMessageOptions_messageSetWireFormat(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMessageOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageSetWireFormat, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMessageOptions_noStandardDescriptorAccessor(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMessageOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoStandardDescriptorAccessor, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMessageOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMessageOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMessageOptions_mapEntry(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMessageOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MapEntry, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMessageOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.MessageOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMessageOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufMethodDescriptorProtoImplementors = []string{"GoogleProtobufMethodDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMethodDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMethodDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "inputType":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_inputType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "outputType":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_outputType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "options":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_options(ctx, field, obj)
		case "clientStreaming":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_clientStreaming(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "serverStreaming":
			out.Values[i] = ec._GoogleProtobufMethodDescriptorProto_serverStreaming(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_inputType(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_outputType(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OutputType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.MethodOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufMethodOptions(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_clientStreaming(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientStreaming, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodDescriptorProto_serverStreaming(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerStreaming, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

var googleProtobufMethodOptionsImplementors = []string{"GoogleProtobufMethodOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufMethodOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.MethodOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufMethodOptionsImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufMethodOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufMethodOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "idempotencyLevel":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GoogleProtobufMethodOptions_idempotencyLevel(ctx, field, obj)
				wg.Done()
			}(i, field)
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufMethodOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodOptions_idempotencyLevel(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GoogleProtobufMethodOptions().IdempotencyLevel(rctx, obj)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalEnum(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufMethodOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.MethodOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufMethodOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufOneofDescriptorProtoImplementors = []string{"GoogleProtobufOneofDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufOneofDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.OneofDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufOneofDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufOneofDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufOneofDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "options":
			out.Values[i] = ec._GoogleProtobufOneofDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufOneofDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.OneofDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufOneofDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufOneofDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.OneofDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufOneofDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.OneofOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufOneofOptions(ctx, field.Selections, res)
}

var googleProtobufOneofOptionsImplementors = []string{"GoogleProtobufOneofOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufOneofOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.OneofOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufOneofOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufOneofOptions")
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufOneofOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufOneofOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.OneofOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufOneofOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufServiceDescriptorProtoImplementors = []string{"GoogleProtobufServiceDescriptorProto"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufServiceDescriptorProto(ctx context.Context, sel ast.SelectionSet, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufServiceDescriptorProtoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufServiceDescriptorProto")
		case "name":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "method":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_method(ctx, field, obj)
		case "options":
			out.Values[i] = ec._GoogleProtobufServiceDescriptorProto_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufServiceDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_method(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufServiceDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.MethodDescriptorProto)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufMethodDescriptorProto(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufServiceDescriptorProto_options(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceDescriptorProto) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufServiceDescriptorProto",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*descriptor.ServiceOptions)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._GoogleProtobufServiceOptions(ctx, field.Selections, res)
}

var googleProtobufServiceOptionsImplementors = []string{"GoogleProtobufServiceOptions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufServiceOptions(ctx context.Context, sel ast.SelectionSet, obj *descriptor.ServiceOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufServiceOptionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufServiceOptions")
		case "deprecated":
			out.Values[i] = ec._GoogleProtobufServiceOptions_deprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "uninterpretedOption":
			out.Values[i] = ec._GoogleProtobufServiceOptions_uninterpretedOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufServiceOptions_deprecated(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufServiceOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deprecated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufServiceOptions_uninterpretedOption(ctx context.Context, field graphql.CollectedField, obj *descriptor.ServiceOptions) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufServiceOptions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UninterpretedOption, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOption(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufSourceCodeInfoImplementors = []string{"GoogleProtobufSourceCodeInfo"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufSourceCodeInfo(ctx context.Context, sel ast.SelectionSet, obj *descriptor.SourceCodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufSourceCodeInfoImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufSourceCodeInfo")
		case "location":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfo_location(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfo_location(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfo",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.SourceCodeInfo_Location)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufSourceCodeInfoLocation(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var googleProtobufSourceCodeInfoLocationImplementors = []string{"GoogleProtobufSourceCodeInfoLocation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation(ctx context.Context, sel ast.SelectionSet, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufSourceCodeInfoLocationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufSourceCodeInfoLocation")
		case "path":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_path(ctx, field, obj)
		case "span":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_span(ctx, field, obj)
		case "leadingComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_leadingComments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "trailingComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_trailingComments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "leadingDetachedComments":
			out.Values[i] = ec._GoogleProtobufSourceCodeInfoLocation_leadingDetachedComments(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_path(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfoLocation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalInt32(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_span(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfoLocation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Span, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int32)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalInt32(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_leadingComments(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfoLocation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeadingComments, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_trailingComments(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfoLocation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrailingComments, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufSourceCodeInfoLocation_leadingDetachedComments(ctx context.Context, field graphql.CollectedField, obj *descriptor.SourceCodeInfo_Location) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufSourceCodeInfoLocation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeadingDetachedComments, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalString(res[idx1])
		}()
	}

	return arr1
}

var googleProtobufUninterpretedOptionImplementors = []string{"GoogleProtobufUninterpretedOption"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufUninterpretedOption(ctx context.Context, sel ast.SelectionSet, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufUninterpretedOptionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufUninterpretedOption")
		case "name":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_name(ctx, field, obj)
		case "identifierValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_identifierValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "positiveIntValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_positiveIntValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "negativeIntValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_negativeIntValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "doubleValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_doubleValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "stringValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_stringValue(ctx, field, obj)
		case "aggregateValue":
			out.Values[i] = ec._GoogleProtobufUninterpretedOption_aggregateValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_name(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*descriptor.UninterpretedOption_NamePart)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._GoogleProtobufUninterpretedOptionNamePart(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_identifierValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentifierValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_positiveIntValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PositiveIntValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*uint64)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalUint64(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_negativeIntValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NegativeIntValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*int64)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalInt64(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_doubleValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoubleValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalDouble(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_stringValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StringValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]byte)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return models.MarshalByte(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOption_aggregateValue(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOption",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AggregateValue, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

var googleProtobufUninterpretedOptionNamePartImplementors = []string{"GoogleProtobufUninterpretedOptionNamePart"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart(ctx context.Context, sel ast.SelectionSet, obj *descriptor.UninterpretedOption_NamePart) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, googleProtobufUninterpretedOptionNamePartImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GoogleProtobufUninterpretedOptionNamePart")
		case "namePart":
			out.Values[i] = ec._GoogleProtobufUninterpretedOptionNamePart_namePart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isExtension":
			out.Values[i] = ec._GoogleProtobufUninterpretedOptionNamePart_isExtension(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart_namePart(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption_NamePart) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOptionNamePart",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NamePart, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _GoogleProtobufUninterpretedOptionNamePart_isExtension(ctx context.Context, field graphql.CollectedField, obj *descriptor.UninterpretedOption_NamePart) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GoogleProtobufUninterpretedOptionNamePart",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsExtension, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return models.MarshalBool(*res)
}

var gqlNodeImplementors = []string{"GqlNode", "Node"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _GqlNode(ctx context.Context, sel ast.SelectionSet, obj *graphql1.Node) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, gqlNodeImplementors)

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GqlNode")
		case "id":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._GqlNode_id(ctx, field, obj)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _GqlNode_id(ctx context.Context, field graphql.CollectedField, obj *graphql1.Node) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "GqlNode",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GqlNode().ID(rctx, obj)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalID(res)
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "EventSeen":
			out.Values[i] = ec._Mutation_EventSeen(ctx, field)
		case "ConfigUpdate":
			out.Values[i] = ec._Mutation_ConfigUpdate(ctx, field)
		case "ContactRequest":
			out.Values[i] = ec._Mutation_ContactRequest(ctx, field)
		case "ContactAcceptRequest":
			out.Values[i] = ec._Mutation_ContactAcceptRequest(ctx, field)
		case "ContactRemove":
			out.Values[i] = ec._Mutation_ContactRemove(ctx, field)
		case "ContactUpdate":
			out.Values[i] = ec._Mutation_ContactUpdate(ctx, field)
		case "ConversationCreate":
			out.Values[i] = ec._Mutation_ConversationCreate(ctx, field)
		case "ConversationUpdate":
			out.Values[i] = ec._Mutation_ConversationUpdate(ctx, field)
		case "ConversationInvite":
			out.Values[i] = ec._Mutation_ConversationInvite(ctx, field)
		case "ConversationExclude":
			out.Values[i] = ec._Mutation_ConversationExclude(ctx, field)
		case "ConversationAddMessage":
			out.Values[i] = ec._Mutation_ConversationAddMessage(ctx, field)
		case "ConversationRead":
			out.Values[i] = ec._Mutation_ConversationRead(ctx, field)
		case "ConversationRemove":
			out.Values[i] = ec._Mutation_ConversationRemove(ctx, field)
		case "DevicePushConfigCreate":
			out.Values[i] = ec._Mutation_DevicePushConfigCreate(ctx, field)
		case "DevicePushConfigNativeRegister":
			out.Values[i] = ec._Mutation_DevicePushConfigNativeRegister(ctx, field)
		case "DevicePushConfigNativeUnregister":
			out.Values[i] = ec._Mutation_DevicePushConfigNativeUnregister(ctx, field)
		case "DevicePushConfigRemove":
			out.Values[i] = ec._Mutation_DevicePushConfigRemove(ctx, field)
		case "DevicePushConfigUpdate":
			out.Values[i] = ec._Mutation_DevicePushConfigUpdate(ctx, field)
		case "GenerateFakeData":
			out.Values[i] = ec._Mutation_GenerateFakeData(ctx, field)
		case "RunIntegrationTests":
			out.Values[i] = ec._Mutation_RunIntegrationTests(ctx, field)
		case "DebugRequeueEvent":
			out.Values[i] = ec._Mutation_DebugRequeueEvent(ctx, field)
		case "DebugRequeueAll":
			out.Values[i] = ec._Mutation_DebugRequeueAll(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_EventSeen(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_EventSeen_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EventSeen(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Event)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityEvent(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConfigUpdate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConfigUpdate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfigUpdate(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["myself"].(*entity.Contact), args["myselfId"].(string), args["currentDevice"].(*entity.Device), args["currentDeviceId"].(string), args["cryptoParams"].([]byte), args["pushRelayPubkeyApns"].(string), args["pushRelayPubkeyFcm"].(string), args["notificationsEnabled"].(bool), args["notificationsPreviews"].(bool), args["debugNotificationVerbosity"].(*int32))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Config)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConfig(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ContactRequest(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ContactRequest_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactRequest(rctx, args["contactId"].(string), args["contactOverrideDisplayName"].(string), args["introText"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ContactAcceptRequest(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ContactAcceptRequest_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactAcceptRequest(rctx, args["contactId"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ContactRemove(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ContactRemove_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactRemove(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ContactUpdate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ContactUpdate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactUpdate(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["sigchain"].([]byte), args["status"].(*int32), args["devices"].([]*entity.Device), args["displayName"].(string), args["displayStatus"].(string), args["overrideDisplayName"].(string), args["overrideDisplayStatus"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConversationCreate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConversationCreate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConversationCreate(rctx, args["contacts"].([]*entity.Contact), args["title"].(string), args["topic"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConversationUpdate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConversationUpdate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConversationUpdate(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["readAt"].(*time.Time), args["title"].(string), args["topic"].(string), args["infos"].(string), args["members"].([]*entity.ConversationMember))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConversationInvite(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConversationInvite_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConversationInvite(rctx, args["conversation"].(*entity.Conversation), args["members"].([]*entity.ConversationMember))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConversationExclude(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConversationExclude_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConversationExclude(rctx, args["conversation"].(*entity.Conversation), args["members"].([]*entity.ConversationMember))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConversationAddMessage(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConversationAddMessage_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConversationAddMessage(rctx, args["conversation"].(*entity.Conversation), args["message"].(*entity.Message))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Event)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityEvent(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConversationRead(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConversationRead_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConversationRead(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_ConversationRemove(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_ConversationRemove_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConversationRemove(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_DevicePushConfigCreate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_DevicePushConfigCreate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DevicePushConfigCreate(rctx, args["relayPubkey"].(*string), args["pushId"].([]byte), args["pushType"].(*int32))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.DevicePushConfig)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityDevicePushConfig(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_DevicePushConfigNativeRegister(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_DevicePushConfigNativeRegister_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DevicePushConfigNativeRegister(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeVoid(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_DevicePushConfigNativeUnregister(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_DevicePushConfigNativeUnregister_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DevicePushConfigNativeUnregister(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeVoid(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_DevicePushConfigRemove(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_DevicePushConfigRemove_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DevicePushConfigRemove(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.DevicePushConfig)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityDevicePushConfig(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_DevicePushConfigUpdate(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_DevicePushConfigUpdate_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DevicePushConfigUpdate(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["deviceId"].(string), args["pushType"].(*int32), args["pushId"].([]byte), args["relayPubkey"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.DevicePushConfig)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityDevicePushConfig(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_GenerateFakeData(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_GenerateFakeData_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GenerateFakeData(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeVoid(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_RunIntegrationTests(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_RunIntegrationTests_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RunIntegrationTests(rctx, args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.IntegrationTestOutput)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeIntegrationTestOutput(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_DebugRequeueEvent(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_DebugRequeueEvent_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DebugRequeueEvent(rctx, args["eventId"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Event)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityEvent(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mutation_DebugRequeueAll(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Mutation_DebugRequeueAll_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Mutation",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DebugRequeueAll(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeVoid(ctx, field.Selections, res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_node(ctx, field)
				wg.Done()
			}(i, field)
		case "ID":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_ID(ctx, field)
				wg.Done()
			}(i, field)
		case "EventList":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_EventList(ctx, field)
				wg.Done()
			}(i, field)
		case "EventUnseen":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_EventUnseen(ctx, field)
				wg.Done()
			}(i, field)
		case "GetEvent":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_GetEvent(ctx, field)
				wg.Done()
			}(i, field)
		case "ConfigPublic":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_ConfigPublic(ctx, field)
				wg.Done()
			}(i, field)
		case "ContactList":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_ContactList(ctx, field)
				wg.Done()
			}(i, field)
		case "Contact":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_Contact(ctx, field)
				wg.Done()
			}(i, field)
		case "ContactCheckPublicKey":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_ContactCheckPublicKey(ctx, field)
				wg.Done()
			}(i, field)
		case "ConversationList":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_ConversationList(ctx, field)
				wg.Done()
			}(i, field)
		case "Conversation":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_Conversation(ctx, field)
				wg.Done()
			}(i, field)
		case "ConversationMember":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_ConversationMember(ctx, field)
				wg.Done()
			}(i, field)
		case "ConversationLastEvent":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_ConversationLastEvent(ctx, field)
				wg.Done()
			}(i, field)
		case "DevicePushConfigList":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_DevicePushConfigList(ctx, field)
				wg.Done()
			}(i, field)
		case "DeviceInfos":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_DeviceInfos(ctx, field)
				wg.Done()
			}(i, field)
		case "AppVersion":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_AppVersion(ctx, field)
				wg.Done()
			}(i, field)
		case "Peers":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_Peers(ctx, field)
				wg.Done()
			}(i, field)
		case "Protocols":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_Protocols(ctx, field)
				wg.Done()
			}(i, field)
		case "LogfileList":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_LogfileList(ctx, field)
				wg.Done()
			}(i, field)
		case "TestLogBackgroundError":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_TestLogBackgroundError(ctx, field)
				wg.Done()
			}(i, field)
		case "TestLogBackgroundWarn":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_TestLogBackgroundWarn(ctx, field)
				wg.Done()
			}(i, field)
		case "TestLogBackgroundDebug":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_TestLogBackgroundDebug(ctx, field)
				wg.Done()
			}(i, field)
		case "TestPanic":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_TestPanic(ctx, field)
				wg.Done()
			}(i, field)
		case "TestError":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_TestError(ctx, field)
				wg.Done()
			}(i, field)
		case "GetListenAddrs":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_GetListenAddrs(ctx, field)
				wg.Done()
			}(i, field)
		case "GetListenInterfaceAddrs":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_GetListenInterfaceAddrs(ctx, field)
				wg.Done()
			}(i, field)
		case "Libp2PPing":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_Libp2PPing(ctx, field)
				wg.Done()
			}(i, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_node_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Node)
	rctx.Result = res

	return ec._Node(ctx, field.Selections, &res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_ID(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_ID_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ID(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*metric.Peer)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNetworkMetricPeer(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_EventList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_EventList_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EventList(rctx, args["filter"].(*entity.Event), args["onlyWithoutAckedAt"].(*int32), args["onlyWithoutSeenAt"].(*int32), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.EventListConnection)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeEventListConnection(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_EventUnseen(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_EventUnseen_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EventUnseen(rctx, args["filter"].(*entity.Event), args["onlyWithoutAckedAt"].(*int32), args["onlyWithoutSeenAt"].(*int32), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*entity.Event)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyEntityEvent(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_GetEvent(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_GetEvent_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetEvent(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Event)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityEvent(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_ConfigPublic(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_ConfigPublic_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConfigPublic(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Config)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConfig(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_ContactList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_ContactList_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ContactList(rctx, args["filter"].(*entity.Contact), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.ContactListConnection)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeContactListConnection(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_Contact(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_Contact_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Contact(rctx, args["filter"].(*entity.Contact))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Contact)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityContact(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_ContactCheckPublicKey(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_ContactCheckPublicKey_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ContactCheckPublicKey(rctx, args["filter"].(*entity.Contact))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Bool)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeBool(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_ConversationList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_ConversationList_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConversationList(rctx, args["filter"].(*entity.Conversation), args["orderBy"].(string), args["orderDesc"].(bool), args["first"].(*int32), args["after"].(*string), args["last"].(*int32), args["before"].(*string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.ConversationListConnection)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeConversationListConnection(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_Conversation(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_Conversation_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Conversation(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["readAt"].(*time.Time), args["title"].(string), args["topic"].(string), args["infos"].(string), args["members"].([]*entity.ConversationMember))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Conversation)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversation(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_ConversationMember(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_ConversationMember_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConversationMember(rctx, args["id"].(string), args["createdAt"].(*time.Time), args["updatedAt"].(*time.Time), args["status"].(*int32), args["contact"].(*entity.Contact), args["conversationId"].(string), args["contactId"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.ConversationMember)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityConversationMember(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_ConversationLastEvent(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_ConversationLastEvent_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConversationLastEvent(rctx, args["id"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.Event)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyEntityEvent(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_DevicePushConfigList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_DevicePushConfigList_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DevicePushConfigList(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.DevicePushConfigListOutput)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeDevicePushConfigListOutput(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_DeviceInfos(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_DeviceInfos_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeviceInfos(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*deviceinfo.DeviceInfos)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyPkgDeviceinfoDeviceInfos(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_AppVersion(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_AppVersion_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppVersion(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.AppVersionOutput)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeAppVersionOutput(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_Peers(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_Peers_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Peers(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*metric.Peers)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNetworkMetricPeers(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_Protocols(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_Protocols_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Protocols(rctx, args["id"].(string), args["addrs"].([]string), args["connection"].(*int32))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.ProtocolsOutput)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeProtocolsOutput(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_LogfileList(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_LogfileList_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LogfileList(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*node.LogfileEntry)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._BertyNodeLogfileEntry(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query_TestLogBackgroundError(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_TestLogBackgroundError_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TestLogBackgroundError(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeVoid(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_TestLogBackgroundWarn(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_TestLogBackgroundWarn_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TestLogBackgroundWarn(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeVoid(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_TestLogBackgroundDebug(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_TestLogBackgroundDebug_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TestLogBackgroundDebug(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeVoid(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_TestPanic(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_TestPanic_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TestPanic(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeVoid(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_TestError(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_TestError_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TestError(rctx, args["kind"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Void)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeVoid(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_GetListenAddrs(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_GetListenAddrs_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetListenAddrs(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*metric.ListAddrs)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNetworkMetricListAddrs(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_GetListenInterfaceAddrs(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_GetListenInterfaceAddrs_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetListenInterfaceAddrs(rctx, args["T"].(bool))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*metric.ListAddrs)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNetworkMetricListAddrs(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_Libp2PPing(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_Libp2PPing_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Libp2PPing(rctx, args["str"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*node.Bool)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec._BertyNodeBool(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query___type_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Schema(ctx, field.Selections, res)
}

var subscriptionImplementors = []string{"Subscription"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, subscriptionImplementors)
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "CommitLogStream":
		return ec._Subscription_CommitLogStream(ctx, fields[0])
	case "EventStream":
		return ec._Subscription_EventStream(ctx, fields[0])
	case "LogStream":
		return ec._Subscription_LogStream(ctx, fields[0])
	case "LogfileRead":
		return ec._Subscription_LogfileRead(ctx, fields[0])
	case "MonitorBandwidth":
		return ec._Subscription_MonitorBandwidth(ctx, fields[0])
	case "MonitorPeers":
		return ec._Subscription_MonitorPeers(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

func (ec *executionContext) _Subscription_CommitLogStream(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_CommitLogStream_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().CommitLogStream(rctx, args["T"].(bool))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}

			return ec._BertyNodeCommitLog(ctx, field.Selections, res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_EventStream(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_EventStream_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().EventStream(rctx, args["filter"].(*entity.Event))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}

			return ec._BertyEntityEvent(ctx, field.Selections, res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_LogStream(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_LogStream_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().LogStream(rctx, args["continues"].(bool), args["logLevel"].(string), args["namespaces"].(string), args["last"].(int32))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}

			return ec._BertyNodeLogEntry(ctx, field.Selections, res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_LogfileRead(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_LogfileRead_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().LogfileRead(rctx, args["path"].(string))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}

			return ec._BertyNodeLogEntry(ctx, field.Selections, res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_MonitorBandwidth(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_MonitorBandwidth_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().MonitorBandwidth(rctx, args["id"].(*string), args["totalIn"].(*int64), args["totalOut"].(*int64), args["rateIn"].(*float64), args["rateOut"].(*float64), args["type"].(*int32))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}

			return ec._BertyNetworkMetricBandwidthStats(ctx, field.Selections, res)
		}())
		return &out
	}
}

func (ec *executionContext) _Subscription_MonitorPeers(ctx context.Context, field graphql.CollectedField) func() graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Subscription_MonitorPeers_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Field: field,
	})
	rctx := ctx // FIXME: subscriptions are missing request middleware stack https://github.com/99designs/gqlgen/issues/259
	results, err := ec.resolvers.Subscription().MonitorPeers(rctx, args["T"].(bool))
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-results
		if !ok {
			return nil
		}
		var out graphql.OrderedMap
		out.Add(field.Alias, func() graphql.Marshaler {
			if res == nil {
				return graphql.Null
			}

			return ec._BertyNetworkMetricPeer(ctx, field.Selections, res)
		}())
		return &out
	}
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalString(*res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalString(*res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Directive(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}
	return models.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	return models.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_fields_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Field(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_enumValues_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___EnumValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj *models.Node) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case *graphql1.Node:
		return ec._GqlNode(ctx, sel, obj)
	case entity.DevicePushIdentifier:
		return ec._BertyEntityDevicePushIdentifier(ctx, sel, &obj)
	case *entity.DevicePushIdentifier:
		return ec._BertyEntityDevicePushIdentifier(ctx, sel, obj)
	case entity.Device:
		return ec._BertyEntityDevice(ctx, sel, &obj)
	case *entity.Device:
		return ec._BertyEntityDevice(ctx, sel, obj)
	case entity.Contact:
		return ec._BertyEntityContact(ctx, sel, &obj)
	case *entity.Contact:
		return ec._BertyEntityContact(ctx, sel, obj)
	case entity.Conversation:
		return ec._BertyEntityConversation(ctx, sel, &obj)
	case *entity.Conversation:
		return ec._BertyEntityConversation(ctx, sel, obj)
	case entity.ConversationMember:
		return ec._BertyEntityConversationMember(ctx, sel, &obj)
	case *entity.ConversationMember:
		return ec._BertyEntityConversationMember(ctx, sel, obj)
	case entity.Event:
		return ec._BertyEntityEvent(ctx, sel, &obj)
	case *entity.Event:
		return ec._BertyEntityEvent(ctx, sel, obj)
	case entity.DevicePushConfig:
		return ec._BertyEntityDevicePushConfig(ctx, sel, &obj)
	case *entity.DevicePushConfig:
		return ec._BertyEntityDevicePushConfig(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func UnmarshalBertyEntityContactInput(v interface{}) (entity.Contact, error) {
	var it entity.Contact
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "sigchain":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Sigchain = make([]byte, len(rawIf1))
			for idx1 := range rawIf1 {
				it.Sigchain[idx1], err = models.UnmarshalByte(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Status = entity.Contact_Status(castTmp)
			if err != nil {
				return it, err
			}
		case "devices":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Devices = make([]*entity.Device, len(rawIf1))
			for idx1 := range rawIf1 {
				var ptr2 entity.Device
				if rawIf1[idx1] != nil {
					ptr2, err = UnmarshalBertyEntityDeviceInput(rawIf1[idx1])
					it.Devices[idx1] = &ptr2
				}
			}
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error
			it.DisplayName, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "displayStatus":
			var err error
			it.DisplayStatus, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "overrideDisplayName":
			var err error
			it.OverrideDisplayName, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "overrideDisplayStatus":
			var err error
			it.OverrideDisplayStatus, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityConversationInput(v interface{}) (entity.Conversation, error) {
	var it entity.Conversation
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "readAt":
			var err error
			it.ReadAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "topic":
			var err error
			it.Topic, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "infos":
			var err error
			it.Infos, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "members":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Members = make([]*entity.ConversationMember, len(rawIf1))
			for idx1 := range rawIf1 {
				var ptr2 entity.ConversationMember
				if rawIf1[idx1] != nil {
					ptr2, err = UnmarshalBertyEntityConversationMemberInput(rawIf1[idx1])
					it.Members[idx1] = &ptr2
				}
			}
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityConversationMemberInput(v interface{}) (entity.ConversationMember, error) {
	var it entity.ConversationMember
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Status = entity.ConversationMember_Status(castTmp)
			if err != nil {
				return it, err
			}
		case "contact":
			var err error
			var ptr1 entity.Contact
			if v != nil {
				ptr1, err = UnmarshalBertyEntityContactInput(v)
				it.Contact = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "conversationId":
			var err error
			it.ConversationID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "contactId":
			var err error
			it.ContactID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityDeviceInput(v interface{}) (entity.Device, error) {
	var it entity.Device
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Status = entity.Device_Status(castTmp)
			if err != nil {
				return it, err
			}
		case "apiVersion":
			var err error
			it.ApiVersion, err = models.UnmarshalUint32(v)
			if err != nil {
				return it, err
			}
		case "contactId":
			var err error
			it.ContactID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "pushIdentifiers":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.PushIdentifiers = make([]*entity.DevicePushIdentifier, len(rawIf1))
			for idx1 := range rawIf1 {
				var ptr2 entity.DevicePushIdentifier
				if rawIf1[idx1] != nil {
					ptr2, err = UnmarshalBertyEntityDevicePushIdentifierInput(rawIf1[idx1])
					it.PushIdentifiers[idx1] = &ptr2
				}
			}
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityDevicePushIdentifierInput(v interface{}) (entity.DevicePushIdentifier, error) {
	var it entity.DevicePushIdentifier
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "pushInfo":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.PushInfo = make([]byte, len(rawIf1))
			for idx1 := range rawIf1 {
				it.PushInfo[idx1], err = models.UnmarshalByte(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "relayPubkey":
			var err error
			it.RelayPubkey, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "deviceId":
			var err error
			it.DeviceID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityErrInput(v interface{}) (entity.Err, error) {
	var it entity.Err
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "errMsg":
			var err error
			it.ErrMsg, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityEventDispatchInput(v interface{}) (entity.EventDispatch, error) {
	var it entity.EventDispatch
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eventId":
			var err error
			it.EventID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "deviceId":
			var err error
			it.DeviceID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "contactId":
			var err error
			it.ContactID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "sentAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.SentAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "ackedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.AckedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "seenAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.SeenAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "ackMedium":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.AckMedium = entity.EventDispatch_Medium(castTmp)
			if err != nil {
				return it, err
			}
		case "seenMedium":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.SeenMedium = entity.EventDispatch_Medium(castTmp)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityEventInput(v interface{}) (entity.Event, error) {
	var it entity.Event
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "sourceDeviceId":
			var err error
			it.SourceDeviceID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = models.UnmarshalTime(v)
			if err != nil {
				return it, err
			}
		case "sentAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.SentAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "receivedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.ReceivedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "ackedAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.AckedAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "direction":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Direction = entity.Event_Direction(castTmp)
			if err != nil {
				return it, err
			}
		case "apiVersion":
			var err error
			it.APIVersion, err = models.UnmarshalUint32(v)
			if err != nil {
				return it, err
			}
		case "kind":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.Kind = entity.Kind(castTmp)
			if err != nil {
				return it, err
			}
		case "attributes":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Attributes = make([]byte, len(rawIf1))
			for idx1 := range rawIf1 {
				it.Attributes[idx1], err = models.UnmarshalByte(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		case "seenAt":
			var err error
			var ptr1 time.Time
			if v != nil {
				ptr1, err = models.UnmarshalTime(v)
				it.SeenAt = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "ackStatus":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.AckStatus = entity.Event_AckStatus(castTmp)
			if err != nil {
				return it, err
			}
		case "dispatches":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Dispatches = make([]*entity.EventDispatch, len(rawIf1))
			for idx1 := range rawIf1 {
				var ptr2 entity.EventDispatch
				if rawIf1[idx1] != nil {
					ptr2, err = UnmarshalBertyEntityEventDispatchInput(rawIf1[idx1])
					it.Dispatches[idx1] = &ptr2
				}
			}
			if err != nil {
				return it, err
			}
		case "sourceContactId":
			var err error
			it.SourceContactID, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "targetType":
			var err error

			var castTmp int32
			castTmp, err = models.UnmarshalEnum(v)
			it.TargetType = entity.Event_TargetType(castTmp)
			if err != nil {
				return it, err
			}
		case "targetAddr":
			var err error
			it.TargetAddr, err = models.UnmarshalID(v)
			if err != nil {
				return it, err
			}
		case "errProxy":
			var err error
			var ptr1 entity.Err
			if v != nil {
				ptr1, err = UnmarshalBertyEntityErrInput(v)
				it.ErrProxy = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "metadata":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Metadata = make([]*entity.MetadataKeyValue, len(rawIf1))
			for idx1 := range rawIf1 {
				var ptr2 entity.MetadataKeyValue
				if rawIf1[idx1] != nil {
					ptr2, err = UnmarshalBertyEntityMetadataKeyValueInput(rawIf1[idx1])
					it.Metadata[idx1] = &ptr2
				}
			}
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityMessageInput(v interface{}) (entity.Message, error) {
	var it entity.Message
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "text":
			var err error
			it.Text, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyEntityMetadataKeyValueInput(v interface{}) (entity.MetadataKeyValue, error) {
	var it entity.MetadataKeyValue
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "key":
			var err error
			it.Key, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "values":
			var err error
			var rawIf1 []interface{}
			if v != nil {
				if tmp1, ok := v.([]interface{}); ok {
					rawIf1 = tmp1
				} else {
					rawIf1 = []interface{}{v}
				}
			}
			it.Values = make([]string, len(rawIf1))
			for idx1 := range rawIf1 {
				it.Values[idx1], err = models.UnmarshalString(rawIf1[idx1])
			}
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalBertyNodePaginationInput(v interface{}) (node.Pagination, error) {
	var it node.Pagination
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "orderBy":
			var err error
			it.OrderBy, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "orderDesc":
			var err error
			it.OrderDesc, err = models.UnmarshalBool(v)
			if err != nil {
				return it, err
			}
		case "first":
			var err error
			it.First, err = models.UnmarshalInt32(v)
			if err != nil {
				return it, err
			}
		case "after":
			var err error
			it.After, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "last":
			var err error
			it.Last, err = models.UnmarshalInt32(v)
			if err != nil {
				return it, err
			}
		case "before":
			var err error
			it.Before, err = models.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name])
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "service.gen.graphql", Input: `# GENERATED CODE -- DO NOT EDIT!

scalar Enum
scalar Double
scalar Int64
scalar Uint64
scalar Int32
scalar Byte
scalar Fixed64
scalar Fixed32
scalar Bool
scalar Uint32
scalar Sfixed64
scalar Sfixed32
scalar Sint32
scalar Sint64
scalar GoogleProtobufTimestamp
scalar GoogleProtobufTimestampInput
scalar GoogleProtobufTimestampPayload

interface Node {
  id: ID!
}

type GoogleProtobufFileDescriptorSet  {
    file: [GoogleProtobufFileDescriptorProto]
}
type GoogleProtobufFileDescriptorProto  {
    name: String!
    package: String!
    dependency: [String!]
    publicDependency: [Int32!]
    weakDependency: [Int32!]
    messageType: [GoogleProtobufDescriptorProto]
    enumType: [GoogleProtobufEnumDescriptorProto]
    service: [GoogleProtobufServiceDescriptorProto]
    extension: [GoogleProtobufFieldDescriptorProto]
    options: GoogleProtobufFileOptions
    sourceCodeInfo: GoogleProtobufSourceCodeInfo
    syntax: String!
}
    
type GoogleProtobufDescriptorProtoExtensionRange  {
    start: Int32!
    end: Int32!
    options: GoogleProtobufExtensionRangeOptions
}
type GoogleProtobufDescriptorProtoReservedRange  {
    start: Int32!
    end: Int32!
}
type GoogleProtobufDescriptorProto  {
    name: String!
    field: [GoogleProtobufFieldDescriptorProto]
    extension: [GoogleProtobufFieldDescriptorProto]
    nestedType: [GoogleProtobufDescriptorProto]
    enumType: [GoogleProtobufEnumDescriptorProto]
    extensionRange: [GoogleProtobufDescriptorProtoExtensionRange]
    oneofDecl: [GoogleProtobufOneofDescriptorProto]
    options: GoogleProtobufMessageOptions
    reservedRange: [GoogleProtobufDescriptorProtoReservedRange]
    reservedName: [String!]
}
type GoogleProtobufExtensionRangeOptions  {
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
      
      
type GoogleProtobufFieldDescriptorProto  {
    name: String!
    number: Int32!
    label: Enum
    type: Enum
    typeName: String!
    extendee: String!
    defaultValue: String!
    oneofIndex: Int32!
    jsonName: String!
    options: GoogleProtobufFieldOptions
}
type GoogleProtobufOneofDescriptorProto  {
    name: String!
    options: GoogleProtobufOneofOptions
}
    
type GoogleProtobufEnumDescriptorProtoEnumReservedRange  {
    start: Int32!
    end: Int32!
}
type GoogleProtobufEnumDescriptorProto  {
    name: String!
    value: [GoogleProtobufEnumValueDescriptorProto]
    options: GoogleProtobufEnumOptions
    reservedRange: [GoogleProtobufEnumDescriptorProtoEnumReservedRange]
    reservedName: [String!]
}
type GoogleProtobufEnumValueDescriptorProto  {
    name: String!
    number: Int32!
    options: GoogleProtobufEnumValueOptions
}
type GoogleProtobufServiceDescriptorProto  {
    name: String!
    method: [GoogleProtobufMethodDescriptorProto]
    options: GoogleProtobufServiceOptions
}
type GoogleProtobufMethodDescriptorProto  {
    name: String!
    inputType: String!
    outputType: String!
    options: GoogleProtobufMethodOptions
    clientStreaming: Bool!
    serverStreaming: Bool!
}
      
type GoogleProtobufFileOptions  {
    javaPackage: String!
    javaOuterClassname: String!
    javaMultipleFiles: Bool!
    javaGenerateEqualsAndHash: Bool!
    javaStringCheckUtf8: Bool!
    optimizeFor: Enum
    goPackage: String!
    ccGenericServices: Bool!
    javaGenericServices: Bool!
    pyGenericServices: Bool!
    phpGenericServices: Bool!
    deprecated: Bool!
    ccEnableArenas: Bool!
    objcClassPrefix: String!
    csharpNamespace: String!
    swiftPrefix: String!
    phpClassPrefix: String!
    phpNamespace: String!
    phpMetadataNamespace: String!
    rubyPackage: String!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufMessageOptions  {
    messageSetWireFormat: Bool!
    noStandardDescriptorAccessor: Bool!
    deprecated: Bool!
    mapEntry: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
      
      
type GoogleProtobufFieldOptions  {
    ctype: Enum
    packed: Bool!
    jstype: Enum
    lazy: Bool!
    deprecated: Bool!
    weak: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufOneofOptions  {
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufEnumOptions  {
    allowAlias: Bool!
    deprecated: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufEnumValueOptions  {
    deprecated: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
type GoogleProtobufServiceOptions  {
    deprecated: Bool!
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
      
type GoogleProtobufMethodOptions  {
    deprecated: Bool!
    idempotencyLevel: Enum
    uninterpretedOption: [GoogleProtobufUninterpretedOption]
}
    
type GoogleProtobufUninterpretedOptionNamePart  {
    namePart: String!
    isExtension: Bool!
}
type GoogleProtobufUninterpretedOption  {
    name: [GoogleProtobufUninterpretedOptionNamePart]
    identifierValue: String!
    positiveIntValue: Uint64!
    negativeIntValue: Int64!
    doubleValue: Double!
    stringValue: [Byte!]
    aggregateValue: String!
}
    
type GoogleProtobufSourceCodeInfoLocation  {
    path: [Int32!]
    span: [Int32!]
    leadingComments: String!
    trailingComments: String!
    leadingDetachedComments: [String!]
}
type GoogleProtobufSourceCodeInfo  {
    location: [GoogleProtobufSourceCodeInfoLocation]
}
    
type GoogleProtobufGeneratedCodeInfoAnnotation  {
    path: [Int32!]
    sourceFile: String!
    begin: Int32!
    end: Int32!
}
type GoogleProtobufGeneratedCodeInfo  {
    annotation: [GoogleProtobufGeneratedCodeInfoAnnotation]
}
  
  
  

  
  
  

type GqlNode implements Node {
    id: ID!
}
  
  
  

  
  
  

  
  
  

type BertyEntityDevicePushIdentifier implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    pushInfo: [Byte!]
    relayPubkey: String!
    deviceId: String!
}
  
  
  

      
type BertyEntityDevice implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    name: String!
    status: Enum
    apiVersion: Uint32!
    contactId: String!
    pushIdentifiers: [BertyEntityDevicePushIdentifier]
}
  
  
  

      
type BertyEntityContact implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    sigchain: [Byte!]
    status: Enum
    devices: [BertyEntityDevice]
    displayName: String!
    displayStatus: String!
    overrideDisplayName: String!
    overrideDisplayStatus: String!
}
  
  
  

type BertyEntityMessage  {
    text: String!
}
  
  
  

type BertyEntityConversation implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    readAt: GoogleProtobufTimestamp
    title: String!
    topic: String!
    infos: String!
    members: [BertyEntityConversationMember]
}
      
type BertyEntityConversationMember implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    status: Enum
    contact: BertyEntityContact
    conversationId: ID!
    contactId: ID!
}
  
  
  

      
type BertyEntitySenderAlias  {
    id: String!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    status: Enum
    originDeviceId: String!
    contactId: String!
    conversationId: String!
    aliasIdentifier: String!
    used: Bool!
}
  
  
  

  
  
type BertyPushPushDestination  {
    nonce: [Byte!]
    pushType: Enum
    pushId: [Byte!]
}
type BertyPushPushNativeIdentifier  {
    packageId: String!
    deviceToken: String!
}
type BertyPushPushData  {
    pushIdentifier: [Byte!]
    envelope: [Byte!]
    priority: Enum
}
  
  
  

  
type BertyEntitySentAttrs  {
    ids: [String!]
}
type BertyEntityAckAttrs  {
    ids: [String!]
    errMsg: String!
}
type BertyEntityPingAttrs  {
    T: Bool!
}
type BertyEntitySeenAttrs  {
    ids: [String!]
}
type BertyEntityContactRequestAttrs  {
    me: BertyEntityContact
    introText: String!
}
type BertyEntityContactRequestAcceptedAttrs  {
    T: Bool!
}
type BertyEntityContactShareMeAttrs  {
    me: BertyEntityContact
}
type BertyEntityContactShareAttrs  {
    contact: BertyEntityContact
}
type BertyEntityConversationInviteAttrs  {
    conversation: BertyEntityConversation
}
type BertyEntityConversationNewMessageAttrs  {
    message: BertyEntityMessage
}
type BertyEntityConversationReadAttrs  {
    conversation: BertyEntityConversation
}
type BertyEntityConversationUpdateAttrs  {
    conversation: BertyEntityConversation
}
type BertyEntityDevtoolsMapsetAttrs  {
    key: String!
    val: String!
}
type BertyEntitySenderAliasUpdateAttrs  {
    aliases: [BertyEntitySenderAlias]
}
type BertyEntityDeviceUpdatePushConfigAttrs  {
    device: BertyEntityDevice
}
type BertyEntityDevicePushToAttrs  {
    pushIdentifier: [Byte!]
    envelope: [Byte!]
    priority: Enum
}
type BertyEntityNodeAttrs  {
    kind: Int32!
    attributes: [Byte!]
}
  
  
  

type BertyEntityErr  {
    errMsg: String!
}
  
  
  

type GoogleProtobufAny  {
    typeUrl: String!
    value: [Byte!]
}
  
  
  

      
      
      
      
type BertyEntityEvent implements Node {
    id: ID!
    sourceDeviceId: String!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    sentAt: GoogleProtobufTimestamp
    receivedAt: GoogleProtobufTimestamp
    ackedAt: GoogleProtobufTimestamp
    direction: Enum
    apiVersion: Uint32!
    kind: Enum
    attributes: [Byte!]
    seenAt: GoogleProtobufTimestamp
    ackStatus: Enum
    dispatches: [BertyEntityEventDispatch]
    sourceContactId: String!
    targetType: Enum
    targetAddr: ID!
    errProxy: BertyEntityErr
    metadata: [BertyEntityMetadataKeyValue]
}
      
type BertyEntityEventDispatch  {
    eventId: String!
    deviceId: String!
    contactId: String!
    sentAt: GoogleProtobufTimestamp
    ackedAt: GoogleProtobufTimestamp
    seenAt: GoogleProtobufTimestamp
    ackMedium: Enum
    seenMedium: Enum
}
type BertyEntityMetadataKeyValue  {
    key: String!
    values: [String!]
}
  
  
  

  
type BertyNetworkMetricBandwidthStats  {
    id: String
    totalIn: Int64
    totalOut: Int64
    rateIn: Double
    rateOut: Double
    type: Enum
}
type BertyNetworkMetricListAddrs  {
    addrs: [String!]
}
type BertyNetworkMetricPingReq  {
    str: String!
}
  
  
  

  
type BertyNodeNodeStartedAttrs  {
    T: Bool!
}
type BertyNodeNodeStoppedAttrs  {
    errMsg: String!
}
type BertyNodeNodeIsAliveAttrs  {
    T: Bool!
}
type BertyNodeBackgroundCriticalAttrs  {
    errMsg: String!
}
type BertyNodeBackgroundErrorAttrs  {
    errMsg: String!
}
type BertyNodeBackgroundWarnAttrs  {
    errMsg: String!
}
type BertyNodeDebugAttrs  {
    msg: String!
}
type BertyNodeStatisticsAttrs  {
    errMsg: String!
    totalNetworkBandwidth: BertyNetworkMetricBandwidthStats
    peersCount: Int32!
}
  
  
  

  
type BertyNetworkMetricPeer  {
    id: String!
    addrs: [String!]
    connection: Enum
}
type BertyNetworkMetricPeers  {
    list: [BertyNetworkMetricPeer]
}
  
  
  

  
type BertyEntityConfig  {
    id: String!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    myself: BertyEntityContact
    myselfId: String!
    currentDevice: BertyEntityDevice
    currentDeviceId: String!
    cryptoParams: [Byte!]
    pushRelayPubkeyApns: String!
    pushRelayPubkeyFcm: String!
    notificationsEnabled: Bool!
    notificationsPreviews: Bool!
    debugNotificationVerbosity: Enum
}
  
  
  

type BertyEntityDevicePushConfig implements Node {
    id: ID!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
    deviceId: String!
    pushType: Enum
    pushId: [Byte!]
    relayPubkey: String!
}
  
  
  

  
type BertyPkgDeviceinfoDeviceInfos  {
    infos: [BertyPkgDeviceinfoDeviceInfo]
}
type BertyPkgDeviceinfoDeviceInfo  {
    key: String!
    value: String!
    category: String!
    link: String!
    type: Enum
    errMsg: String!
    weight: Int32!
}
  
  
  

  
type BertyNodeProtocolsOutput  {
    protocols: [String!]
}
type BertyNodeAppVersionOutput  {
    version: String!
}
type BertyNodePingDestination  {
    destination: String!
}
      
    
type BertyNodeCommitLogEntity  {
    config: BertyEntityConfig
    contact: BertyEntityContact
    device: BertyEntityDevice
    conversation: BertyEntityConversation
    conversationMember: BertyEntityConversationMember
    event: BertyEntityEvent
    devicePushConfig: BertyEntityDevicePushConfig
    devicePushIdentifier: BertyEntityDevicePushIdentifier
}
type BertyNodeCommitLog  {
    operation: Enum
    entity: BertyNodeCommitLogEntity
}
type BertyNodeEventEdge  {
    node: BertyEntityEvent
    cursor: String!
}
type BertyNodeEventListConnection  {
    edges: [BertyNodeEventEdge]
    pageInfo: BertyNodePageInfo!
}
type BertyNodeContactEdge  {
    node: BertyEntityContact
    cursor: String!
}
type BertyNodeContactListConnection  {
    edges: [BertyNodeContactEdge]
    pageInfo: BertyNodePageInfo!
}
type BertyNodeConversationEdge  {
    node: BertyEntityConversation
    cursor: String!
}
type BertyNodeConversationListConnection  {
    edges: [BertyNodeConversationEdge]
    pageInfo: BertyNodePageInfo!
}
type BertyNodeDevicePushConfigEdge  {
    node: BertyEntityDevicePushConfig
    cursor: String!
}
type BertyNodeDevicePushConfigListOutput  {
    edges: [BertyEntityDevicePushConfig]
}
type BertyNodePagination  {
    orderBy: String!
    orderDesc: Bool!
    first: Int32
    after: String
    last: Int32
    before: String
}
type BertyNodePageInfo  {
    startCursor: String!
    endCursor: String!
    hasNextPage: Bool!
    hasPreviousPage: Bool!
    count: Uint32!
}
type BertyNodeIntegrationTestOutput  {
    name: String!
    success: Bool!
    verbose: String!
    startedAt: GoogleProtobufTimestamp
    finishedAt: GoogleProtobufTimestamp
}
type BertyNodeVoid  {
    T: Bool!
}
type BertyNodeBool  {
    ret: Bool!
}
type BertyNodeLogEntry  {
    line: String!
}
type BertyNodeLogfileEntry  {
    path: String!
    filesize: Int32!
    createdAt: GoogleProtobufTimestamp
    updatedAt: GoogleProtobufTimestamp
}
type BertyNodeNodeEvent  {
    kind: Enum
    attributes: [Byte!]
}
input BertyEntityEventDispatchInput {
    eventId: String!
    deviceId: String!
    contactId: String!
    sentAt: GoogleProtobufTimestampInput
    ackedAt: GoogleProtobufTimestampInput
    seenAt: GoogleProtobufTimestampInput
    ackMedium: Enum
    seenMedium: Enum
}
input BertyEntityErrInput {
    errMsg: String!
}
input BertyEntityMetadataKeyValueInput {
    key: String!
    values: [String!]
}
input BertyEntityEventInput {
    id: ID!
    sourceDeviceId: String!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    sentAt: GoogleProtobufTimestampInput
    receivedAt: GoogleProtobufTimestampInput
    ackedAt: GoogleProtobufTimestampInput
    direction: Enum
    apiVersion: Uint32!
    kind: Enum
    attributes: [Byte!]
    seenAt: GoogleProtobufTimestampInput
    ackStatus: Enum
    dispatches: [BertyEntityEventDispatchInput]
    sourceContactId: String!
    targetType: Enum
    targetAddr: ID!
    errProxy: BertyEntityErrInput
    metadata: [BertyEntityMetadataKeyValueInput]
}
input BertyNodePaginationInput {
    orderBy: String!
    orderDesc: Bool!
    first: Int32
    after: String
    last: Int32
    before: String
}
input BertyEntityDevicePushIdentifierInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    pushInfo: [Byte!]
    relayPubkey: String!
    deviceId: String!
}
input BertyEntityDeviceInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    name: String!
    status: Enum
    apiVersion: Uint32!
    contactId: String!
    pushIdentifiers: [BertyEntityDevicePushIdentifierInput]
}
input BertyEntityContactInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    sigchain: [Byte!]
    status: Enum
    devices: [BertyEntityDeviceInput]
    displayName: String!
    displayStatus: String!
    overrideDisplayName: String!
    overrideDisplayStatus: String!
}
input BertyEntityConversationMemberInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    status: Enum
    contact: BertyEntityContactInput
    conversationId: ID!
    contactId: ID!
}
input BertyEntityConversationInput {
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    readAt: GoogleProtobufTimestampInput
    title: String!
    topic: String!
    infos: String!
    members: [BertyEntityConversationMemberInput]
}
input BertyEntityMessageInput {
    text: String!
}
  
type Query {
  node(id: ID!): Node
  ID(
    T: Bool!
  ): BertyNetworkMetricPeer
  EventList(
    filter: BertyEntityEventInput
    onlyWithoutAckedAt: Enum
    onlyWithoutSeenAt: Enum
    orderBy: String!
    orderDesc: Bool!
    first: Int32
    after: String
    last: Int32
    before: String
  ): BertyNodeEventListConnection
  EventUnseen(
    filter: BertyEntityEventInput
    onlyWithoutAckedAt: Enum
    onlyWithoutSeenAt: Enum
    orderBy: String!
    orderDesc: Bool!
    first: Int32
    after: String
    last: Int32
    before: String
  )
      : [BertyEntityEvent]
  GetEvent(
    id: ID!
  ): BertyEntityEvent
  ConfigPublic(
    T: Bool!
  ): BertyEntityConfig
  ContactList(
    filter: BertyEntityContactInput
    orderBy: String!
    orderDesc: Bool!
    first: Int32
    after: String
    last: Int32
    before: String
  ): BertyNodeContactListConnection
  Contact(
    filter: BertyEntityContactInput
  ): BertyEntityContact
  ContactCheckPublicKey(
    filter: BertyEntityContactInput
  ): BertyNodeBool
  ConversationList(
    filter: BertyEntityConversationInput
    orderBy: String!
    orderDesc: Bool!
    first: Int32
    after: String
    last: Int32
    before: String
  ): BertyNodeConversationListConnection
  Conversation(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    readAt: GoogleProtobufTimestampInput
    title: String!
    topic: String!
    infos: String!
    members: [BertyEntityConversationMemberInput]
  ): BertyEntityConversation
  ConversationMember(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    status: Enum
    contact: BertyEntityContactInput
    conversationId: ID!
    contactId: ID!
  ): BertyEntityConversationMember
  ConversationLastEvent(
    id: ID!
  ): BertyEntityEvent
  DevicePushConfigList(
    T: Bool!
  ): BertyNodeDevicePushConfigListOutput
  DeviceInfos(
    T: Bool!
  ): BertyPkgDeviceinfoDeviceInfos
  AppVersion(
    T: Bool!
  ): BertyNodeAppVersionOutput
  Peers(
    T: Bool!
  ): BertyNetworkMetricPeers
  Protocols(
    id: String!
    addrs: [String!]
    connection: Enum
  ): BertyNodeProtocolsOutput
  LogfileList(
    T: Bool!
  )
      : [BertyNodeLogfileEntry]
  TestLogBackgroundError(
    T: Bool!
  ): BertyNodeVoid
  TestLogBackgroundWarn(
    T: Bool!
  ): BertyNodeVoid
  TestLogBackgroundDebug(
    T: Bool!
  ): BertyNodeVoid
  TestPanic(
    T: Bool!
  ): BertyNodeVoid
  TestError(
    kind: String!
  ): BertyNodeVoid
  GetListenAddrs(
    T: Bool!
  ): BertyNetworkMetricListAddrs
  GetListenInterfaceAddrs(
    T: Bool!
  ): BertyNetworkMetricListAddrs
  Libp2PPing(
    str: String!
  ): BertyNodeBool
}
  
type Mutation {
  EventSeen(
    id: ID!
  ): BertyEntityEvent
  ConfigUpdate(
    id: String!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    myself: BertyEntityContactInput
    myselfId: String!
    currentDevice: BertyEntityDeviceInput
    currentDeviceId: String!
    cryptoParams: [Byte!]
    pushRelayPubkeyApns: String!
    pushRelayPubkeyFcm: String!
    notificationsEnabled: Bool!
    notificationsPreviews: Bool!
    debugNotificationVerbosity: Enum
  ): BertyEntityConfig
  ContactRequest(
    contactId: ID!
    contactOverrideDisplayName: String!
    introText: String!
  ): BertyEntityContact
  ContactAcceptRequest(
    contactId: ID!
  ): BertyEntityContact
  ContactRemove(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    sigchain: [Byte!]
    status: Enum
    devices: [BertyEntityDeviceInput]
    displayName: String!
    displayStatus: String!
    overrideDisplayName: String!
    overrideDisplayStatus: String!
  ): BertyEntityContact
  ContactUpdate(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    sigchain: [Byte!]
    status: Enum
    devices: [BertyEntityDeviceInput]
    displayName: String!
    displayStatus: String!
    overrideDisplayName: String!
    overrideDisplayStatus: String!
  ): BertyEntityContact
  ConversationCreate(
    contacts: [BertyEntityContactInput]
    title: String!
    topic: String!
  ): BertyEntityConversation
  ConversationUpdate(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    readAt: GoogleProtobufTimestampInput
    title: String!
    topic: String!
    infos: String!
    members: [BertyEntityConversationMemberInput]
  ): BertyEntityConversation
  ConversationInvite(
    conversation: BertyEntityConversationInput
    members: [BertyEntityConversationMemberInput]
  ): BertyEntityConversation
  ConversationExclude(
    conversation: BertyEntityConversationInput
    members: [BertyEntityConversationMemberInput]
  ): BertyEntityConversation
  ConversationAddMessage(
    conversation: BertyEntityConversationInput
    message: BertyEntityMessageInput
  ): BertyEntityEvent
  ConversationRead(
    id: ID!
  ): BertyEntityConversation
  ConversationRemove(
    id: ID!
  ): BertyEntityConversation
  DevicePushConfigCreate(
    relayPubkey: String
    pushId: [Byte!]
    pushType: Enum
  ): BertyEntityDevicePushConfig
  DevicePushConfigNativeRegister(
    T: Bool!
  ): BertyNodeVoid
  DevicePushConfigNativeUnregister(
    T: Bool!
  ): BertyNodeVoid
  DevicePushConfigRemove(
    id: ID!
  ): BertyEntityDevicePushConfig
  DevicePushConfigUpdate(
    id: ID!
    createdAt: GoogleProtobufTimestampInput
    updatedAt: GoogleProtobufTimestampInput
    deviceId: String!
    pushType: Enum
    pushId: [Byte!]
    relayPubkey: String!
  ): BertyEntityDevicePushConfig
  GenerateFakeData(
    T: Bool!
  ): BertyNodeVoid
  RunIntegrationTests(
    name: String!
  ): BertyNodeIntegrationTestOutput
  DebugRequeueEvent(
    eventId: ID!
  ): BertyEntityEvent
  DebugRequeueAll(
    T: Bool!
  ): BertyNodeVoid
}
  
type Subscription {
  CommitLogStream(
    T: Bool!
  ): BertyNodeCommitLog
  EventStream(
    filter: BertyEntityEventInput
  ): BertyEntityEvent
  LogStream(
    continues: Bool!
    logLevel: String!
    namespaces: String!
    last: Int32!
  ): BertyNodeLogEntry
  LogfileRead(
    path: String!
  ): BertyNodeLogEntry
  MonitorBandwidth(
    id: String
    totalIn: Int64
    totalOut: Int64
    rateIn: Double
    rateOut: Double
    type: Enum
  ): BertyNetworkMetricBandwidthStats
  MonitorPeers(
    T: Bool!
  ): BertyNetworkMetricPeer
}
`},
)
