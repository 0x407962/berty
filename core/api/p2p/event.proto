syntax = "proto3";

package berty.p2p;

option go_package = "berty.tech/core/api/p2p";

import "api/protobuf/graphql/graphql.proto";
import "api/p2p/kind.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

message Event {
  // ID is a unique ID generated by the event creator.
  // This field is required by gorm.
  string id = 1 [(gql.graphql_id) = true, (gogoproto.moretags) = "gorm:\"primary_key\"", (gogoproto.customname) = "ID"];

  // Sender is the ID of the sender.
  // this field is a member of the composite primary key to avoid id collisions.
  string sender_id = 2 [(gogoproto.moretags) = "gorm:\"primary_key\"", (gogoproto.customname) = "SenderID"];

  // CreatedAt is set to current date when initializing a new Event object.
  // This field is required by gorm.
  google.protobuf.Timestamp created_at = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

  // UpdatedAt is set to current date each time the object is updated in database.
  // This field is required by gorm.
  google.protobuf.Timestamp updated_at = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

  // SentAt is set to current date just after sending the event.
  google.protobuf.Timestamp sent_at = 6 [(gogoproto.stdtime) = true];

  // ReceivedAt is set to current date just after receiving the event.
  google.protobuf.Timestamp received_at = 7 [(gogoproto.stdtime) = true];

  // AckedAt is set to current date just after receiving a `Ack` event.
  google.protobuf.Timestamp acked_at = 8 [(gogoproto.stdtime) = true];

  // Direction is sent to Outgoing by the sender and to Incoming by the receiver.
  Direction direction = 9;

  // SenderAPIVersion is set by the sender when creating the message to be sent.
  uint32 sender_api_version = 10 [(gogoproto.customname) = "SenderAPIVersion"];

  // ReceiverAPIVersion is set by the receiver when receiving a message.
  // this field may be useful to apply local migrations when processing old events stored in db.
  uint32 receiver_api_version = 11 [(gogoproto.customname) = "ReceiverAPIVersion"];

  // Receiver is the ID of the receiver.
  string receiver_id = 12 [(gogoproto.customname) = "ReceiverID"];

  // Kind is an enum defining the event type.
  Kind kind = 13;

  // Attributes is a nested protobuf message containing per-event-type additional attributes, stored in db.
  bytes attributes = 14 [(gql.graphql_resolver) = true];

  // ConversationID needs to be set if the event belongs to a conversation.
  string conversation_id = 15 [(gql.graphql_id) = true, (gogoproto.customname) = "ConversationID"];

  // SeenAt is set to the date when the event has been displayed on the user's screen
  google.protobuf.Timestamp seen_at = 16 [(gogoproto.stdtime) = true];

  //
  // enums
  //
  enum Direction {
    UnknownDirection = 0;

    // Incoming is the value for events created by peers, should be set by the receiver when receiving an event.
    Incoming = 1;

    // Outgoing is the value for locally-created events, should be set by the sender when creating an event.
    Outgoing = 2;

    // Node is the value for local events, see ./core/api/node/kind.proto
    Node = 99;
  }
}
