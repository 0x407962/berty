// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network/metrics.proto

package network // import "berty.tech/core/network"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "berty.tech/core/api/protobuf/graphql"
import _ "github.com/gogo/protobuf/gogoproto"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MetricsType int32

const (
	// peer monitor a specific peer
	MetricsType_PEER MetricsType = 0
	// protocol monitor a specific protocol
	MetricsType_PROTOCOL MetricsType = 1
	// global monitor a metric globally
	MetricsType_GLOBAL MetricsType = 2
)

var MetricsType_name = map[int32]string{
	0: "PEER",
	1: "PROTOCOL",
	2: "GLOBAL",
}
var MetricsType_value = map[string]int32{
	"PEER":     0,
	"PROTOCOL": 1,
	"GLOBAL":   2,
}

func (x MetricsType) String() string {
	return proto.EnumName(MetricsType_name, int32(x))
}
func (MetricsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_metrics_0cf9bb0b9bb875b1, []int{0}
}

type BandwidthStats struct {
	ID                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TotalIn              int64       `protobuf:"varint,2,opt,name=total_in,json=totalIn,proto3" json:"total_in,omitempty"`
	TotalOut             int64       `protobuf:"varint,3,opt,name=total_out,json=totalOut,proto3" json:"total_out,omitempty"`
	RateIn               float64     `protobuf:"fixed64,4,opt,name=rate_in,json=rateIn,proto3" json:"rate_in,omitempty"`
	RateOut              float64     `protobuf:"fixed64,5,opt,name=rate_out,json=rateOut,proto3" json:"rate_out,omitempty"`
	Type                 MetricsType `protobuf:"varint,6,opt,name=type,proto3,enum=berty.network.MetricsType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BandwidthStats) Reset()         { *m = BandwidthStats{} }
func (m *BandwidthStats) String() string { return proto.CompactTextString(m) }
func (*BandwidthStats) ProtoMessage()    {}
func (*BandwidthStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_0cf9bb0b9bb875b1, []int{0}
}
func (m *BandwidthStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BandwidthStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BandwidthStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BandwidthStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandwidthStats.Merge(dst, src)
}
func (m *BandwidthStats) XXX_Size() int {
	return m.Size()
}
func (m *BandwidthStats) XXX_DiscardUnknown() {
	xxx_messageInfo_BandwidthStats.DiscardUnknown(m)
}

var xxx_messageInfo_BandwidthStats proto.InternalMessageInfo

func (m *BandwidthStats) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *BandwidthStats) GetTotalIn() int64 {
	if m != nil {
		return m.TotalIn
	}
	return 0
}

func (m *BandwidthStats) GetTotalOut() int64 {
	if m != nil {
		return m.TotalOut
	}
	return 0
}

func (m *BandwidthStats) GetRateIn() float64 {
	if m != nil {
		return m.RateIn
	}
	return 0
}

func (m *BandwidthStats) GetRateOut() float64 {
	if m != nil {
		return m.RateOut
	}
	return 0
}

func (m *BandwidthStats) GetType() MetricsType {
	if m != nil {
		return m.Type
	}
	return MetricsType_PEER
}

func init() {
	proto.RegisterType((*BandwidthStats)(nil), "berty.network.BandwidthStats")
	proto.RegisterEnum("berty.network.MetricsType", MetricsType_name, MetricsType_value)
}
func (m *BandwidthStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BandwidthStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.TotalIn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.TotalIn))
	}
	if m.TotalOut != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.TotalOut))
	}
	if m.RateIn != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RateIn))))
		i += 8
	}
	if m.RateOut != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RateOut))))
		i += 8
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMetrics(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BandwidthStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMetrics(uint64(l))
	}
	if m.TotalIn != 0 {
		n += 1 + sovMetrics(uint64(m.TotalIn))
	}
	if m.TotalOut != 0 {
		n += 1 + sovMetrics(uint64(m.TotalOut))
	}
	if m.RateIn != 0 {
		n += 9
	}
	if m.RateOut != 0 {
		n += 9
	}
	if m.Type != 0 {
		n += 1 + sovMetrics(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMetrics(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetrics(x uint64) (n int) {
	return sovMetrics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BandwidthStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BandwidthStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BandwidthStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalIn", wireType)
			}
			m.TotalIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalIn |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalOut", wireType)
			}
			m.TotalOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalOut |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateIn", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RateIn = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateOut", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RateOut = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MetricsType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetrics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetrics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetrics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetrics(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetrics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetrics   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("network/metrics.proto", fileDescriptor_metrics_0cf9bb0b9bb875b1) }

var fileDescriptor_metrics_0cf9bb0b9bb875b1 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4e, 0xfa, 0x40,
	0x18, 0xc5, 0x99, 0xd2, 0x7f, 0x81, 0xef, 0xaf, 0x84, 0x4c, 0x34, 0xd6, 0x26, 0x96, 0xca, 0xaa,
	0xba, 0x68, 0xa3, 0x9e, 0xc0, 0x2a, 0x31, 0x24, 0x98, 0x92, 0xca, 0xca, 0x8d, 0x29, 0x74, 0x84,
	0x46, 0xec, 0xd4, 0xe1, 0x23, 0x84, 0x9d, 0xc7, 0xf0, 0x48, 0x2e, 0x3d, 0x81, 0x21, 0xf5, 0x04,
	0xde, 0xc0, 0xcc, 0x14, 0x13, 0x5c, 0xcd, 0xe4, 0xbd, 0xdf, 0xfb, 0x5e, 0xf2, 0x60, 0x3f, 0x63,
	0xb8, 0xe4, 0xe2, 0xc9, 0x7f, 0x66, 0x28, 0xd2, 0xf1, 0xdc, 0xcb, 0x05, 0x47, 0x4e, 0x77, 0x47,
	0x4c, 0xe0, 0xca, 0xdb, 0x98, 0x56, 0x27, 0xce, 0x53, 0x5f, 0x39, 0xa3, 0xc5, 0xa3, 0x3f, 0x11,
	0x71, 0x3e, 0x7d, 0x99, 0xfd, 0xbe, 0x65, 0xc4, 0xda, 0x9b, 0xf0, 0x09, 0x57, 0x5f, 0x5f, 0xfe,
	0x4a, 0xb5, 0xb3, 0x26, 0xd0, 0x0c, 0xe2, 0x2c, 0x59, 0xa6, 0x09, 0x4e, 0xef, 0x30, 0xc6, 0x39,
	0xb5, 0x40, 0x4b, 0x13, 0x93, 0x38, 0xc4, 0x6d, 0x04, 0xf0, 0xfa, 0x7d, 0x48, 0x8a, 0xcf, 0xb6,
	0xd6, 0xbb, 0x8e, 0xb4, 0x34, 0xa1, 0x6d, 0xa8, 0x23, 0xc7, 0x78, 0xf6, 0x90, 0x66, 0xa6, 0xe6,
	0x10, 0xb7, 0x1a, 0xe8, 0x92, 0x88, 0x6a, 0x4a, 0xed, 0x65, 0xf4, 0x18, 0x1a, 0x25, 0xc0, 0x17,
	0x68, 0x56, 0xb7, 0x88, 0x32, 0x17, 0x2e, 0x90, 0x1e, 0x41, 0x4d, 0xc4, 0xc8, 0xe4, 0x09, 0xdd,
	0x21, 0x2e, 0xd9, 0x00, 0x86, 0x14, 0x7b, 0x99, 0xac, 0x50, 0xb6, 0x3c, 0xf0, 0x6f, 0xcb, 0x57,
	0x21, 0x99, 0xf7, 0x40, 0xc7, 0x55, 0xce, 0x4c, 0xc3, 0x21, 0x6e, 0xf3, 0xdc, 0xf2, 0xfe, 0x4c,
	0xe1, 0xdd, 0x96, 0x3b, 0x0d, 0x57, 0x39, 0x8b, 0x14, 0x77, 0x7a, 0x06, 0xff, 0xb7, 0x44, 0x5a,
	0x07, 0x7d, 0xd0, 0xed, 0x46, 0xad, 0x0a, 0xdd, 0x81, 0xfa, 0x20, 0x0a, 0x87, 0xe1, 0x55, 0xd8,
	0x6f, 0x11, 0x0a, 0x60, 0xdc, 0xf4, 0xc3, 0xe0, 0xb2, 0xdf, 0xd2, 0x82, 0x93, 0xf7, 0xc2, 0x26,
	0x1f, 0x85, 0x4d, 0xd6, 0x85, 0x4d, 0xde, 0xbe, 0xec, 0xca, 0xfd, 0x41, 0xd9, 0x82, 0x6c, 0x3c,
	0xf5, 0xc7, 0x5c, 0x30, 0x7f, 0xd3, 0x37, 0x32, 0xd4, 0x8e, 0x17, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xc2, 0x04, 0x3f, 0xce, 0xa9, 0x01, 0x00, 0x00,
}
