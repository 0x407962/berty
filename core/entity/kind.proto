syntax = "proto3";

package berty.entity;

import "entity/contact.proto";
import "entity/conversation.proto";
import "entity/message.proto";
import "entity/device.proto";
import "entity/sender_alias.proto";
import "push/push.proto";
import "gogoproto/gogo.proto";

option go_package = "berty.tech/core/entity";

enum Kind {
// Unknown events should never happen
  Unknown = 0;

  //
  // System events
  //

  // Sent events are used by the UI.
  Sent = 101;

  // Ack events are created and sent after receiving an event from a peer.
  Ack = 102;

  // Ping events can be use to check and measure the availability of a peer.
  Ping = 103;

  // Seen events are sent by frontend
  Seen = 104;

  //
  // Contact events
  //

  ContactRequest = 201;
  ContactRequestAccepted = 202;
  ContactShareMe = 203;
  ContactShare = 204;

  //
  // Conversation events
  //

  ConversationInvite = 301;
  ConversationNewMessage = 302;
  ConversationRead = 303;
  ConversationUpdate = 304;

  // Devtool events
  DevtoolsMapset = 401;

  //
  // SenderAlias events
  //

  SenderAliasUpdate = 501;

  //
  // Device events
  //

  DeviceUpdatePushConfig = 601;
  DevicePushTo = 602;

  //
  // Other events
  //

  // Node events aren't used in communication, and most of the time they aren't stored in DB.
  // see core/api/node/kind.proto
  Node = 99;
}

//
// System events
//

message SentAttrs { repeated string ids = 1 [(gogoproto.customname) = "IDs"]; }
message AckAttrs { repeated string ids = 1 [(gogoproto.customname) = "IDs"]; string err_msg = 2; }
message PingAttrs { bool T = 1; }
message SeenAttrs { repeated string ids = 1 [(gogoproto.customname) = "IDs"]; }

//
// Contact events
//

message ContactRequestAttrs { berty.entity.Contact me = 1; string intro_text = 2; }
message ContactRequestAcceptedAttrs { bool T = 1; }
message ContactShareMeAttrs { berty.entity.Contact me = 1; }
message ContactShareAttrs { berty.entity.Contact contact = 1; }

//
// Conversation events
//

message ConversationInviteAttrs { berty.entity.Conversation conversation = 1; }
message ConversationNewMessageAttrs { berty.entity.Message message = 1; }
message ConversationReadAttrs { berty.entity.Conversation conversation = 1; }
message ConversationUpdateAttrs { berty.entity.Conversation conversation = 1; }

//
// Devtools events
//

message DevtoolsMapsetAttrs { string key = 1; string val = 2; }

//
// SenderAlias events
//

message SenderAliasUpdateAttrs { repeated berty.entity.SenderAlias aliases = 1; }

//
// Device events
//

message DeviceUpdatePushConfigAttrs { berty.entity.Device device = 1; }
message DevicePushToAttrs { bytes push_identifier = 1; bytes envelope = 2; berty.push.Priority priority = 3; }

//
// Other events
//

// NodeAttrs is proto-compatible with api/node.NodeEvent, without enums.
// see api/node/service.proto.
message NodeAttrs {
  int32 kind = 1;
  bytes attributes = 2;
}
