// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity/device.proto

package entity // import "berty.tech/core/entity"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "berty.tech/core/api/protobuf/graphql"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DevicePushType int32

const (
	DevicePushType_UnknownDevicePushType DevicePushType = 0
	DevicePushType_APNS                  DevicePushType = 1
	DevicePushType_FCM                   DevicePushType = 2
)

var DevicePushType_name = map[int32]string{
	0: "UnknownDevicePushType",
	1: "APNS",
	2: "FCM",
}
var DevicePushType_value = map[string]int32{
	"UnknownDevicePushType": 0,
	"APNS":                  1,
	"FCM":                   2,
}

func (x DevicePushType) String() string {
	return proto.EnumName(DevicePushType_name, int32(x))
}
func (DevicePushType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_device_3ca88f3dfbb2f8f5, []int{0}
}

type Device_Status int32

const (
	Device_Unknown      Device_Status = 0
	Device_Connected    Device_Status = 1
	Device_Disconnected Device_Status = 2
	Device_Available    Device_Status = 3
	Device_Myself       Device_Status = 42
)

var Device_Status_name = map[int32]string{
	0:  "Unknown",
	1:  "Connected",
	2:  "Disconnected",
	3:  "Available",
	42: "Myself",
}
var Device_Status_value = map[string]int32{
	"Unknown":      0,
	"Connected":    1,
	"Disconnected": 2,
	"Available":    3,
	"Myself":       42,
}

func (x Device_Status) String() string {
	return proto.EnumName(Device_Status_name, int32(x))
}
func (Device_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_device_3ca88f3dfbb2f8f5, []int{2, 0}
}

type DevicePushIdentifier struct {
	ID                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt            time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	UpdatedAt            time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
	PushInfo             []byte    `protobuf:"bytes,4,opt,name=push_info,json=pushInfo,proto3" json:"push_info,omitempty"`
	PushRelayID          string    `protobuf:"bytes,5,opt,name=push_relay_id,json=pushRelayId,proto3" json:"push_relay_id,omitempty"`
	DeviceID             string    `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DevicePushIdentifier) Reset()         { *m = DevicePushIdentifier{} }
func (m *DevicePushIdentifier) String() string { return proto.CompactTextString(m) }
func (*DevicePushIdentifier) ProtoMessage()    {}
func (*DevicePushIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_3ca88f3dfbb2f8f5, []int{0}
}
func (m *DevicePushIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevicePushIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevicePushIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DevicePushIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePushIdentifier.Merge(dst, src)
}
func (m *DevicePushIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *DevicePushIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePushIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePushIdentifier proto.InternalMessageInfo

func (m *DevicePushIdentifier) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DevicePushIdentifier) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *DevicePushIdentifier) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *DevicePushIdentifier) GetPushInfo() []byte {
	if m != nil {
		return m.PushInfo
	}
	return nil
}

func (m *DevicePushIdentifier) GetPushRelayID() string {
	if m != nil {
		return m.PushRelayID
	}
	return ""
}

func (m *DevicePushIdentifier) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

// Local unencrypted push configuration
type DevicePushConfig struct {
	ID                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt            time.Time      `protobuf:"bytes,2,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	UpdatedAt            time.Time      `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
	DeviceID             string         `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	PushType             DevicePushType `protobuf:"varint,5,opt,name=push_type,json=pushType,proto3,enum=berty.entity.DevicePushType" json:"push_type,omitempty"`
	PushID               []byte         `protobuf:"bytes,6,opt,name=push_id,json=pushId,proto3" json:"push_id,omitempty"`
	RelayID              []byte         `protobuf:"bytes,7,opt,name=relay_id,json=relayId,proto3" json:"relay_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DevicePushConfig) Reset()         { *m = DevicePushConfig{} }
func (m *DevicePushConfig) String() string { return proto.CompactTextString(m) }
func (*DevicePushConfig) ProtoMessage()    {}
func (*DevicePushConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_3ca88f3dfbb2f8f5, []int{1}
}
func (m *DevicePushConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevicePushConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevicePushConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DevicePushConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePushConfig.Merge(dst, src)
}
func (m *DevicePushConfig) XXX_Size() int {
	return m.Size()
}
func (m *DevicePushConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePushConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePushConfig proto.InternalMessageInfo

func (m *DevicePushConfig) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DevicePushConfig) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *DevicePushConfig) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *DevicePushConfig) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *DevicePushConfig) GetPushType() DevicePushType {
	if m != nil {
		return m.PushType
	}
	return DevicePushType_UnknownDevicePushType
}

func (m *DevicePushConfig) GetPushID() []byte {
	if m != nil {
		return m.PushID
	}
	return nil
}

func (m *DevicePushConfig) GetRelayID() []byte {
	if m != nil {
		return m.RelayID
	}
	return nil
}

type Device struct {
	ID                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt            time.Time               `protobuf:"bytes,2,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	UpdatedAt            time.Time               `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
	Name                 string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Status               Device_Status           `protobuf:"varint,10,opt,name=status,proto3,enum=berty.entity.Device_Status" json:"status,omitempty"`
	ApiVersion           uint32                  `protobuf:"varint,11,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	ContactID            string                  `protobuf:"bytes,12,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	PushIdentifiers      []*DevicePushIdentifier `protobuf:"bytes,13,rep,name=push_identifiers,json=pushIdentifiers" json:"push_identifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_3ca88f3dfbb2f8f5, []int{2}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Device.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(dst, src)
}
func (m *Device) XXX_Size() int {
	return m.Size()
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Device) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Device) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetStatus() Device_Status {
	if m != nil {
		return m.Status
	}
	return Device_Unknown
}

func (m *Device) GetApiVersion() uint32 {
	if m != nil {
		return m.ApiVersion
	}
	return 0
}

func (m *Device) GetContactID() string {
	if m != nil {
		return m.ContactID
	}
	return ""
}

func (m *Device) GetPushIdentifiers() []*DevicePushIdentifier {
	if m != nil {
		return m.PushIdentifiers
	}
	return nil
}

func init() {
	proto.RegisterType((*DevicePushIdentifier)(nil), "berty.entity.DevicePushIdentifier")
	proto.RegisterType((*DevicePushConfig)(nil), "berty.entity.DevicePushConfig")
	proto.RegisterType((*Device)(nil), "berty.entity.Device")
	proto.RegisterEnum("berty.entity.DevicePushType", DevicePushType_name, DevicePushType_value)
	proto.RegisterEnum("berty.entity.Device_Status", Device_Status_name, Device_Status_value)
}
func (m *DevicePushIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicePushIdentifier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.PushInfo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.PushInfo)))
		i += copy(dAtA[i:], m.PushInfo)
	}
	if len(m.PushRelayID) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.PushRelayID)))
		i += copy(dAtA[i:], m.PushRelayID)
	}
	if len(m.DeviceID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DeviceID)))
		i += copy(dAtA[i:], m.DeviceID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DevicePushConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicePushConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.DeviceID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.DeviceID)))
		i += copy(dAtA[i:], m.DeviceID)
	}
	if m.PushType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.PushType))
	}
	if len(m.PushID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.PushID)))
		i += copy(dAtA[i:], m.PushID)
	}
	if len(m.RelayID) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.RelayID)))
		i += copy(dAtA[i:], m.RelayID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDevice(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.Status))
	}
	if m.ApiVersion != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintDevice(dAtA, i, uint64(m.ApiVersion))
	}
	if len(m.ContactID) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDevice(dAtA, i, uint64(len(m.ContactID)))
		i += copy(dAtA[i:], m.ContactID)
	}
	if len(m.PushIdentifiers) > 0 {
		for _, msg := range m.PushIdentifiers {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintDevice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDevice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DevicePushIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovDevice(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovDevice(uint64(l))
	l = len(m.PushInfo)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.PushRelayID)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DevicePushConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovDevice(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovDevice(uint64(l))
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.PushType != 0 {
		n += 1 + sovDevice(uint64(m.PushType))
	}
	l = len(m.PushID)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = len(m.RelayID)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Device) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovDevice(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovDevice(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDevice(uint64(m.Status))
	}
	if m.ApiVersion != 0 {
		n += 1 + sovDevice(uint64(m.ApiVersion))
	}
	l = len(m.ContactID)
	if l > 0 {
		n += 1 + l + sovDevice(uint64(l))
	}
	if len(m.PushIdentifiers) > 0 {
		for _, e := range m.PushIdentifiers {
			l = e.Size()
			n += 1 + l + sovDevice(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDevice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDevice(x uint64) (n int) {
	return sovDevice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DevicePushIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicePushIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicePushIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushInfo = append(m.PushInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.PushInfo == nil {
				m.PushInfo = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushRelayID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushRelayID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevicePushConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicePushConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicePushConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushType", wireType)
			}
			m.PushType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushType |= (DevicePushType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushID = append(m.PushID[:0], dAtA[iNdEx:postIndex]...)
			if m.PushID == nil {
				m.PushID = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayID = append(m.RelayID[:0], dAtA[iNdEx:postIndex]...)
			if m.RelayID == nil {
				m.RelayID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Device_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVersion", wireType)
			}
			m.ApiVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushIdentifiers = append(m.PushIdentifiers, &DevicePushIdentifier{})
			if err := m.PushIdentifiers[len(m.PushIdentifiers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDevice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDevice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDevice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDevice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevice   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("entity/device.proto", fileDescriptor_device_3ca88f3dfbb2f8f5) }

var fileDescriptor_device_3ca88f3dfbb2f8f5 = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x94, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xc7, 0xe3, 0x24, 0xd7, 0x49, 0x8e, 0x93, 0xd6, 0x9a, 0xdb, 0x7b, 0x95, 0xb6, 0x57, 0x71,
	0xe4, 0x2b, 0xa1, 0x50, 0x21, 0x07, 0xb5, 0x2b, 0x58, 0x20, 0xe5, 0x43, 0x48, 0x5e, 0x14, 0x15,
	0xb7, 0xb0, 0x60, 0x13, 0x4d, 0xec, 0x89, 0x33, 0x6a, 0xe2, 0x31, 0xf6, 0xa4, 0xc8, 0x4b, 0xde,
	0x80, 0x25, 0x8f, 0xd4, 0x1d, 0x3c, 0x81, 0xa9, 0xcc, 0x0b, 0x20, 0x1e, 0x00, 0x21, 0xcf, 0x38,
	0x0d, 0x91, 0x00, 0x89, 0x65, 0x57, 0x1e, 0x9f, 0xef, 0xf3, 0xfb, 0x8f, 0x06, 0xfe, 0x26, 0x01,
	0xa7, 0x3c, 0xe9, 0x7b, 0xe4, 0x8a, 0xba, 0xc4, 0x0a, 0x23, 0xc6, 0x19, 0x6a, 0x4e, 0x49, 0xc4,
	0x13, 0x4b, 0xba, 0x0e, 0x4c, 0x1c, 0xd2, 0xbe, 0x70, 0x4c, 0x57, 0xb3, 0xbe, 0x1f, 0xe1, 0x70,
	0xfe, 0x7a, 0xb1, 0xfe, 0xca, 0x8c, 0x83, 0x3d, 0x9f, 0xf9, 0x4c, 0x1c, 0xfb, 0xf9, 0xa9, 0xb0,
	0x1a, 0x3e, 0x63, 0xfe, 0x82, 0x6c, 0x92, 0x39, 0x5d, 0x92, 0x98, 0xe3, 0x65, 0x28, 0x03, 0xcc,
	0x0f, 0x65, 0xd8, 0x1b, 0x8b, 0xce, 0x67, 0xab, 0x78, 0x6e, 0x7b, 0x79, 0xc7, 0x19, 0x25, 0x11,
	0x7a, 0x08, 0x65, 0xea, 0xb5, 0x95, 0xae, 0xd2, 0x6b, 0x0c, 0xbb, 0x37, 0x5f, 0xf6, 0x95, 0x2c,
	0x35, 0xca, 0xf6, 0xf8, 0x6b, 0x6a, 0x20, 0x9f, 0x45, 0xcb, 0xc7, 0x66, 0x18, 0xd1, 0x25, 0x8e,
	0x92, 0xc9, 0x25, 0x49, 0x4c, 0xa7, 0x4c, 0x3d, 0x34, 0x02, 0x70, 0x23, 0x82, 0x39, 0xf1, 0x26,
	0x98, 0xb7, 0xcb, 0x5d, 0xa5, 0xa7, 0x1d, 0x1f, 0x58, 0x72, 0x00, 0x6b, 0x3d, 0x80, 0x75, 0xb1,
	0x1e, 0x60, 0x58, 0xbf, 0x4e, 0x8d, 0xd2, 0xbb, 0x4f, 0x86, 0xe2, 0x34, 0x8a, 0xbc, 0x01, 0xcf,
	0x8b, 0xac, 0x42, 0x6f, 0x5d, 0xa4, 0xf2, 0x27, 0x45, 0x8a, 0xbc, 0x01, 0x47, 0x87, 0xd0, 0x08,
	0x57, 0xf1, 0x7c, 0x42, 0x83, 0x19, 0x6b, 0x57, 0xbb, 0x4a, 0xaf, 0xe9, 0xd4, 0x73, 0x83, 0x1d,
	0xcc, 0x18, 0x3a, 0x81, 0x96, 0x70, 0x46, 0x64, 0x81, 0x93, 0x09, 0xf5, 0xda, 0x7f, 0x89, 0x1d,
	0x77, 0xb3, 0xd4, 0xd0, 0x72, 0x06, 0x4e, 0x6e, 0xb7, 0xc7, 0x8e, 0x16, 0xde, 0xfe, 0x78, 0xe8,
	0x3e, 0x34, 0xa4, 0x3e, 0x79, 0x82, 0x2a, 0x12, 0x9a, 0x59, 0x6a, 0xd4, 0x25, 0x3a, 0x7b, 0xec,
	0xd4, 0xa5, 0xdb, 0xf6, 0xcc, 0xb7, 0x15, 0xd0, 0x37, 0x44, 0x47, 0x2c, 0x98, 0x51, 0xff, 0x4e,
	0xd3, 0xdc, 0xda, 0xbd, 0xfa, 0xbb, 0xdd, 0xd1, 0xa3, 0x02, 0x3c, 0x4f, 0x42, 0x22, 0xb8, 0xee,
	0x1c, 0xff, 0x67, 0xfd, 0x78, 0x95, 0xad, 0x0d, 0x99, 0x8b, 0x24, 0x24, 0x52, 0x96, 0xfc, 0x84,
	0xfe, 0x87, 0x9a, 0xd4, 0x4c, 0xf2, 0x6d, 0x0e, 0x21, 0x4b, 0x0d, 0x55, 0x5c, 0xca, 0xb1, 0xa3,
	0x0a, 0xf5, 0x3c, 0x74, 0x0f, 0xea, 0xb7, 0xb2, 0xd5, 0x44, 0x94, 0x96, 0xa5, 0x46, 0x6d, 0x2d,
	0x59, 0x2d, 0x92, 0x72, 0x99, 0xdf, 0x2a, 0xa0, 0xca, 0x4e, 0x77, 0x9a, 0x3c, 0x82, 0x6a, 0x80,
	0x97, 0x92, 0x64, 0xc3, 0x11, 0x67, 0x74, 0x02, 0x6a, 0xcc, 0x31, 0x5f, 0xc5, 0x6d, 0x10, 0x7c,
	0x0f, 0x7f, 0xc6, 0xd7, 0x3a, 0x17, 0x21, 0x4e, 0x11, 0x8a, 0x0c, 0xd0, 0x70, 0x48, 0x27, 0x57,
	0x24, 0x8a, 0x29, 0x0b, 0xda, 0x5a, 0x57, 0xe9, 0xb5, 0x1c, 0xc0, 0x21, 0x7d, 0x29, 0x2d, 0xe8,
	0x01, 0x80, 0xcb, 0x02, 0x8e, 0x5d, 0x9e, 0xa3, 0x6d, 0x0a, 0x5a, 0xad, 0x2c, 0x35, 0x1a, 0x23,
	0x69, 0xb5, 0xc7, 0x4e, 0xa3, 0x08, 0xb0, 0x3d, 0x74, 0x0a, 0x7a, 0xa1, 0xd5, 0xfa, 0xb9, 0x88,
	0xdb, 0xad, 0x6e, 0xa5, 0xa7, 0x1d, 0x9b, 0xbf, 0x52, 0x7b, 0xf3, 0xb2, 0x38, 0xbb, 0xe1, 0xd6,
	0x7f, 0x6c, 0x3e, 0x07, 0x55, 0xce, 0x8b, 0x34, 0xa8, 0xbd, 0x08, 0x2e, 0x03, 0xf6, 0x26, 0xd0,
	0x4b, 0xa8, 0x05, 0x79, 0xf7, 0x80, 0xb8, 0x9c, 0x78, 0xba, 0x82, 0x74, 0x68, 0x8e, 0x69, 0xec,
	0xde, 0x5a, 0xca, 0x79, 0xc0, 0xe0, 0x0a, 0xd3, 0x05, 0x9e, 0x2e, 0x88, 0x5e, 0x41, 0x00, 0xea,
	0x69, 0x12, 0x93, 0xc5, 0x4c, 0x3f, 0x3a, 0x7a, 0x02, 0x3b, 0xdb, 0x37, 0x0d, 0xed, 0xc3, 0x3f,
	0x45, 0xe9, 0x6d, 0x87, 0x5e, 0x42, 0x75, 0xa8, 0x0e, 0xce, 0x9e, 0x9d, 0xeb, 0x0a, 0xaa, 0x41,
	0xe5, 0xe9, 0xe8, 0x54, 0x2f, 0x0f, 0x7b, 0xd7, 0x59, 0x47, 0xf9, 0x98, 0x75, 0x94, 0x9b, 0xac,
	0xa3, 0xbc, 0xff, 0xdc, 0x29, 0xbd, 0xfa, 0x57, 0x2e, 0xc6, 0x89, 0x3b, 0xef, 0xbb, 0x2c, 0x22,
	0x7d, 0xb9, 0xe2, 0x54, 0x15, 0x62, 0x9e, 0x7c, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x59, 0x36, 0x14,
	0x8f, 0xc7, 0x05, 0x00, 0x00,
}
