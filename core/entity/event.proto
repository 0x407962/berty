syntax = "proto3";

package berty.entity;

option go_package = "berty.tech/core/entity";

import "api/protobuf/graphql/graphql.proto";
import "entity/kind.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "pkg/validate/validate.proto";

message Event {
  // ID is a unique ID generated by the event creator.
  // This field is required by gorm.
  string id = 1 [(gql.graphql_id) = true, (gogoproto.moretags) = "gorm:\"primary_key\"", (gogoproto.customname) = "ID"];

  // SourceDeviceID is the ID of the source's device.
  // this field is a member of the composite primary key to avoid id collisions.
  string source_device_id = 2 [(gogoproto.moretags) = "gorm:\"primary_key\"", (gogoproto.customname) = "SourceDeviceID"];

  // CreatedAt is set to current date when initializing a new Event object.
  // This field is required by gorm.
  google.protobuf.Timestamp created_at = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

  // UpdatedAt is set to current date each time the object is updated in database.
  // This field is required by gorm.
  google.protobuf.Timestamp updated_at = 4 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

  // SentAt is set to current date just after sending the event.
  google.protobuf.Timestamp sent_at = 6 [(gogoproto.stdtime) = true];

  // ReceivedAt is set to current date just after receiving the event.
  google.protobuf.Timestamp received_at = 7 [(gogoproto.stdtime) = true];

  // AckedAt is set to current date just after receiving an `Ack` event.
  google.protobuf.Timestamp acked_at = 8 [(gogoproto.stdtime) = true];

  // Direction is set to Outgoing by the source and to Incoming by the destination.
  Direction direction = 9 [(validate.int_gt) = 0];

  // SourceAPIVersion is set by the source when creating the message to be sent.
  // this field can be used;
  //   - by the destination to check for compatibility issues
  //   - by everyone when fetching an old event in database to apply local migrations
  uint32 api_version = 10 [(gogoproto.customname) = "APIVersion"];

  // // DestinationAPIVersion is set by the destination when receiving a message.
  // // this field may be useful to apply local migrations when processing old events stored in db.
  // uint32 destination_api_version = 11 [(gogoproto.customname) = "DestinationAPIVersion"];
  reserved 11; // FIXME: remove completely this paragraph soon

  // // DestinationDeviceID is the ID of the destination.
  //string destination_device_id = 12 [(gogoproto.customname) = "DestinationDeviceID"];
  reserved 12; // FIXME: remove completely this paragraph soon

  // Kind is an enum defining the event type.
  entity.Kind kind = 13 [(validate.int_gt) = 0];

  // Attributes is a nested protobuf message containing per-event-type additional attributes, stored in db.
  bytes attributes = 14 [(gql.graphql_resolver) = true];

  // // ConversationID needs to be set if the event belongs to a conversation.
  // string conversation_id = 15 [(gql.graphql_id) = true, (gogoproto.customname) = "ConversationID"];
  reserved 15; // FIXME: remove completely this paragraph soon

  // SeenAt is set to the date when the event has been displayed on the user's screen.
  google.protobuf.Timestamp seen_at = 16 [(gogoproto.stdtime) = true];

  // AckStatus is aggregated from the different Dispatch events.
  AckStatus ack_status = 17 [(validate.int_gt) = 0];

  // Dispatches represent each target's dispatch/sending state.
  // this field should only be set for outgoing events.
  repeated EventDispatch dispatches = 18;

  // SourceContactID is the ID of the source.
  string source_contact_id = 19 [(gogoproto.customname) = "SourceContactID"];

  // TargetType defines the scope of the destination
  TargetType target_type = 20;

  // TragetAddr can be a contact ID, a conversation ID, a device ID
  string target_addr = 21 [(gql.graphql_id) = true];

  // Metadata represents additional metadata and is not stored in database
  repeated MetadataKeyValue metadata = 99 [(gogoproto.moretags) = "gorm:\"-\""];

  //
  // enums
  //
  enum AckStatus {
    UnknownAckStatus = 0;

    // NotAcked is set default status that should be set directly at event creation.
    NotAcked = 1;

    // AckedAtLeastOnce is set on first received Ack event.
    AckedAtLeastOnce = 2;

    // AckedByAllContact is set when at least one device of each contact sent an Ack event.
    AckedByAllContacts = 3;

    // AckedByAllDevices is set when every device of every contact sent an Ack event.
    AckedByAllDevices = 4;
  }

  enum SeenStatus {
    UnknownSeenStatus = 0;

    // NotSeen is set at event creation.
    NotSeen = 1;

    // SeenAtLeastOnce is set on first received Seen event.
    SeenAtLeastOnce = 2;

    // SeenByAllContact is set when at least one device of each contact sent a Seen event.
    SeenByAllContacts = 3;
  }

  enum TargetType {
    UnknownTargetType = 0;

    ToSpecificDevice = 1;

    ToSpecificContact = 2;

    ToAllContacts = 3;

    ToSpecificConversation = 4;

    // ToSelf is for another of our devices
    ToSelf = 5;
  }

  enum Direction {
    UnknownDirection = 0;

    // Incoming is the value for events created by peers, should be set by the destination when receiving an event.
    Incoming = 1;

    // Outgoing is the value for locally-created events, should be set by the source when creating an event.
    Outgoing = 2;

    // Node is the value for local events, see ./core/api/node/kind.proto.
    Node = 99;
  }
}

// EventDispatch represents one sending of an Event to a specific Device
// The primary key is a composite key of EventID+DeviceID
message EventDispatch {
  // EventID is the ID of the event
  string event_id = 1 [(gogoproto.moretags) = "gorm:\"primary_key\"", (gogoproto.customname) = "EventID"];

  // DeviceID is the ID of the destination device
  string device_id = 2 [(gogoproto.moretags) = "gorm:\"primary_key\"", (gogoproto.customname) = "DeviceID"];

  // ContactID is the ID of the destination contact
  string contact_id = 3 [(gogoproto.customname) = "ContactID"];

  // SentAt is set to current date when sending the Dispatch.
  google.protobuf.Timestamp sent_at = 4 [(gogoproto.stdtime) = true];

  // AckedAt is set to current date just after receiving a `Ack` event.
  google.protobuf.Timestamp acked_at = 5 [(gogoproto.stdtime) = true];

  // SeenAt is set to the date when the event has been displayed on the user's screen
  google.protobuf.Timestamp seen_at = 6 [(gogoproto.stdtime) = true];

  // AckMedium is the communication medium used when receiving an Ack event
  Medium ack_medium = 7;

  // SeenMedium is the communication medium used when receiving a Seen event
  Medium seen_medium = 8;

  enum Medium {
    UnknownMedium = 0;
    LocalNetwork = 1;
    BLE = 2;
    Relay = 3;
    // to be completed
  }
}

message MetadataKeyValue {
  string key = 1 [(validate.min_len) = 1];
  repeated string values = 2 [(validate.min_items) = 1];
}
