// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity/device_push_identifier.proto

package entity // import "berty.tech/core/entity"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "berty.tech/core/api/protobuf/graphql"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DevicePushIdentifier struct {
	ID                   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	CreatedAt            time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,stdtime" json:"created_at"`
	UpdatedAt            time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at"`
	PushInfo             []byte    `protobuf:"bytes,4,opt,name=push_info,json=pushInfo,proto3" json:"push_info,omitempty"`
	RelayPubkey          string    `protobuf:"bytes,5,opt,name=relay_pubkey,json=relayPubkey,proto3" json:"relay_pubkey,omitempty"`
	DeviceID             string    `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DevicePushIdentifier) Reset()         { *m = DevicePushIdentifier{} }
func (m *DevicePushIdentifier) String() string { return proto.CompactTextString(m) }
func (*DevicePushIdentifier) ProtoMessage()    {}
func (*DevicePushIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_push_identifier_e4564723ae11f700, []int{0}
}
func (m *DevicePushIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevicePushIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevicePushIdentifier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DevicePushIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePushIdentifier.Merge(dst, src)
}
func (m *DevicePushIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *DevicePushIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePushIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePushIdentifier proto.InternalMessageInfo

func (m *DevicePushIdentifier) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DevicePushIdentifier) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *DevicePushIdentifier) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *DevicePushIdentifier) GetPushInfo() []byte {
	if m != nil {
		return m.PushInfo
	}
	return nil
}

func (m *DevicePushIdentifier) GetRelayPubkey() string {
	if m != nil {
		return m.RelayPubkey
	}
	return ""
}

func (m *DevicePushIdentifier) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func init() {
	proto.RegisterType((*DevicePushIdentifier)(nil), "berty.entity.DevicePushIdentifier")
}
func (m *DevicePushIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicePushIdentifier) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevicePushIdentifier(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintDevicePushIdentifier(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDevicePushIdentifier(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.PushInfo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDevicePushIdentifier(dAtA, i, uint64(len(m.PushInfo)))
		i += copy(dAtA[i:], m.PushInfo)
	}
	if len(m.RelayPubkey) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDevicePushIdentifier(dAtA, i, uint64(len(m.RelayPubkey)))
		i += copy(dAtA[i:], m.RelayPubkey)
	}
	if len(m.DeviceID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDevicePushIdentifier(dAtA, i, uint64(len(m.DeviceID)))
		i += copy(dAtA[i:], m.DeviceID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDevicePushIdentifier(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DevicePushIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovDevicePushIdentifier(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovDevicePushIdentifier(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovDevicePushIdentifier(uint64(l))
	l = len(m.PushInfo)
	if l > 0 {
		n += 1 + l + sovDevicePushIdentifier(uint64(l))
	}
	l = len(m.RelayPubkey)
	if l > 0 {
		n += 1 + l + sovDevicePushIdentifier(uint64(l))
	}
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovDevicePushIdentifier(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDevicePushIdentifier(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDevicePushIdentifier(x uint64) (n int) {
	return sovDevicePushIdentifier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DevicePushIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevicePushIdentifier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicePushIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicePushIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicePushIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicePushIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicePushIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicePushIdentifier
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicePushIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevicePushIdentifier
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicePushIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevicePushIdentifier
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PushInfo = append(m.PushInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.PushInfo == nil {
				m.PushInfo = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicePushIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicePushIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevicePushIdentifier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevicePushIdentifier
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevicePushIdentifier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevicePushIdentifier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevicePushIdentifier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevicePushIdentifier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevicePushIdentifier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevicePushIdentifier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDevicePushIdentifier
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDevicePushIdentifier
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDevicePushIdentifier(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDevicePushIdentifier = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevicePushIdentifier   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("entity/device_push_identifier.proto", fileDescriptor_device_push_identifier_e4564723ae11f700)
}

var fileDescriptor_device_push_identifier_e4564723ae11f700 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0x31, 0x8e, 0x9b, 0x40,
	0x14, 0xf5, 0x90, 0xc4, 0x82, 0x31, 0x52, 0x24, 0x64, 0x45, 0xc4, 0x91, 0x00, 0x91, 0x86, 0x34,
	0x10, 0x39, 0x5d, 0x3a, 0x3b, 0x6e, 0xe8, 0x2c, 0x94, 0x2a, 0x0d, 0x02, 0x66, 0x80, 0x91, 0x8d,
	0x67, 0x32, 0x1e, 0x22, 0x71, 0x8b, 0x94, 0x39, 0x92, 0xab, 0x68, 0x4f, 0xc0, 0x5a, 0xec, 0x05,
	0x56, 0x7b, 0x82, 0x15, 0x0c, 0xac, 0xeb, 0xad, 0xe6, 0xcf, 0xfb, 0xff, 0x3d, 0xbd, 0xff, 0x1f,
	0xfc, 0x8c, 0x4f, 0x82, 0x88, 0x26, 0x40, 0xf8, 0x0f, 0xc9, 0x70, 0xcc, 0xea, 0x73, 0x19, 0x13,
	0xd4, 0x83, 0x39, 0xc1, 0xdc, 0x67, 0x9c, 0x0a, 0x6a, 0xe8, 0x29, 0xe6, 0xa2, 0xf1, 0xe5, 0xe8,
	0xca, 0x4d, 0x18, 0x09, 0x86, 0x46, 0x5a, 0xe7, 0x41, 0xc1, 0x13, 0x56, 0xfe, 0x3e, 0x4e, 0xaf,
	0x64, 0xac, 0x96, 0x05, 0x2d, 0xe8, 0x50, 0x06, 0x7d, 0x35, 0xa2, 0x76, 0x41, 0x69, 0x71, 0xc4,
	0x37, 0xb2, 0x20, 0x15, 0x3e, 0x8b, 0xa4, 0x62, 0x72, 0xc0, 0xfd, 0xaf, 0xc0, 0xe5, 0x6e, 0x70,
	0xb2, 0xaf, 0xcf, 0x65, 0xf8, 0xe2, 0xc3, 0xf8, 0x0a, 0x15, 0x82, 0x4c, 0xe0, 0x00, 0x4f, 0xdb,
	0x3a, 0xd7, 0xc7, 0x8f, 0xa0, 0x6b, 0x6d, 0x25, 0xdc, 0x3d, 0xb5, 0xb6, 0x51, 0x50, 0x5e, 0x7d,
	0x77, 0x19, 0x27, 0x55, 0xc2, 0x9b, 0xf8, 0x80, 0x1b, 0x37, 0x52, 0x08, 0x32, 0x7e, 0x40, 0x98,
	0x71, 0x9c, 0x08, 0x8c, 0xe2, 0x44, 0x98, 0x8a, 0x03, 0xbc, 0xc5, 0x7a, 0xe5, 0x4b, 0x03, 0xfe,
	0x64, 0xc0, 0xff, 0x39, 0x19, 0xd8, 0xaa, 0x97, 0xd6, 0x9e, 0xfd, 0xbd, 0xb7, 0x41, 0xa4, 0x8d,
	0xbc, 0x8d, 0xe8, 0x45, 0x6a, 0x86, 0x26, 0x91, 0x37, 0xaf, 0x11, 0x19, 0x79, 0x1b, 0x61, 0x7c,
	0x82, 0x9a, 0x3c, 0xeb, 0x29, 0xa7, 0xe6, 0x5b, 0x07, 0x78, 0x7a, 0xa4, 0xf6, 0x40, 0x78, 0xca,
	0xa9, 0xb1, 0x86, 0x3a, 0xc7, 0xc7, 0xa4, 0x89, 0x59, 0x9d, 0x1e, 0x70, 0x63, 0xbe, 0x1b, 0x56,
	0x7c, 0xdf, 0xb5, 0xf6, 0x22, 0xea, 0xf1, 0xfd, 0x00, 0x47, 0x0b, 0x7e, 0xfb, 0x18, 0x5f, 0xa0,
	0x36, 0xc6, 0x45, 0x90, 0x39, 0x1f, 0x08, 0x7a, 0xd7, 0xda, 0xaa, 0xbc, 0x5c, 0xb8, 0x8b, 0x54,
	0xd9, 0x0e, 0xd1, 0xd6, 0xbb, 0x74, 0x16, 0xb8, 0xeb, 0x2c, 0x70, 0xed, 0x2c, 0xf0, 0xef, 0xc1,
	0x9a, 0xfd, 0xfa, 0x20, 0xb3, 0x14, 0x38, 0x2b, 0x83, 0x8c, 0x72, 0x1c, 0xc8, 0x54, 0xd3, 0xf9,
	0xb0, 0xce, 0xb7, 0xe7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x8a, 0xdb, 0x65, 0x11, 0x02, 0x00,
	0x00,
}
