// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity/event.proto

package entity

import (
	fmt "fmt"
	io "io"
	math "math"
	time "time"

	_ "berty.tech/core/api/protobuf/graphql"
	_ "berty.tech/core/pkg/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// enums
//
type Event_AckStatus int32

const (
	Event_UnknownAckStatus Event_AckStatus = 0
	// NotAcked is set default status that should be set directly at event creation.
	Event_NotAcked Event_AckStatus = 1
	// AckedAtLeastOnce is set on first received Ack event.
	Event_AckedAtLeastOnce Event_AckStatus = 2
	// AckedByAllContact is set when at least one device of each contact sent an Ack event.
	Event_AckedByAllContacts Event_AckStatus = 3
	// AckedByAllDevices is set when every device of every contact sent an Ack event.
	Event_AckedByAllDevices Event_AckStatus = 4
)

var Event_AckStatus_name = map[int32]string{
	0: "UnknownAckStatus",
	1: "NotAcked",
	2: "AckedAtLeastOnce",
	3: "AckedByAllContacts",
	4: "AckedByAllDevices",
}

var Event_AckStatus_value = map[string]int32{
	"UnknownAckStatus":   0,
	"NotAcked":           1,
	"AckedAtLeastOnce":   2,
	"AckedByAllContacts": 3,
	"AckedByAllDevices":  4,
}

func (x Event_AckStatus) String() string {
	return proto.EnumName(Event_AckStatus_name, int32(x))
}

func (Event_AckStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0737e212f090f50, []int{0, 0}
}

type Event_SeenStatus int32

const (
	Event_UnknownSeenStatus Event_SeenStatus = 0
	// NotSeen is set at event creation.
	Event_NotSeen Event_SeenStatus = 1
	// SeenAtLeastOnce is set on first received Seen event.
	Event_SeenAtLeastOnce Event_SeenStatus = 2
	// SeenByAllContact is set when at least one device of each contact sent a Seen event.
	Event_SeenByAllContacts Event_SeenStatus = 3
)

var Event_SeenStatus_name = map[int32]string{
	0: "UnknownSeenStatus",
	1: "NotSeen",
	2: "SeenAtLeastOnce",
	3: "SeenByAllContacts",
}

var Event_SeenStatus_value = map[string]int32{
	"UnknownSeenStatus": 0,
	"NotSeen":           1,
	"SeenAtLeastOnce":   2,
	"SeenByAllContacts": 3,
}

func (x Event_SeenStatus) String() string {
	return proto.EnumName(Event_SeenStatus_name, int32(x))
}

func (Event_SeenStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0737e212f090f50, []int{0, 1}
}

type Event_Direction int32

const (
	Event_UnknownDirection Event_Direction = 0
	// Incoming is the value for events created by peers, should be set by the destination when receiving an event.
	Event_Incoming Event_Direction = 1
	// Outgoing is the value for locally-created events, should be set by the source when creating an event.
	Event_Outgoing Event_Direction = 2
	// Node is the value for local events, see ./core/api/node/kind.proto.
	Event_Node Event_Direction = 99
)

var Event_Direction_name = map[int32]string{
	0:  "UnknownDirection",
	1:  "Incoming",
	2:  "Outgoing",
	99: "Node",
}

var Event_Direction_value = map[string]int32{
	"UnknownDirection": 0,
	"Incoming":         1,
	"Outgoing":         2,
	"Node":             99,
}

func (x Event_Direction) String() string {
	return proto.EnumName(Event_Direction_name, int32(x))
}

func (Event_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0737e212f090f50, []int{0, 2}
}

type EventDispatch_Medium int32

const (
	EventDispatch_UnknownMedium EventDispatch_Medium = 0
	EventDispatch_LocalNetwork  EventDispatch_Medium = 1
	EventDispatch_BLE           EventDispatch_Medium = 2
	EventDispatch_Relay         EventDispatch_Medium = 3
)

var EventDispatch_Medium_name = map[int32]string{
	0: "UnknownMedium",
	1: "LocalNetwork",
	2: "BLE",
	3: "Relay",
}

var EventDispatch_Medium_value = map[string]int32{
	"UnknownMedium": 0,
	"LocalNetwork":  1,
	"BLE":           2,
	"Relay":         3,
}

func (x EventDispatch_Medium) String() string {
	return proto.EnumName(EventDispatch_Medium_name, int32(x))
}

func (EventDispatch_Medium) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0737e212f090f50, []int{1, 0}
}

type Event struct {
	// ID is a unique ID generated by the event creator.
	// This field is required by gorm.
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primary_key"`
	// SourceDeviceID is the ID of the source's device.
	// this field is a member of the composite primary key to avoid id collisions.
	SourceDeviceID string `protobuf:"bytes,2,opt,name=source_device_id,json=sourceDeviceId,proto3" json:"source_device_id,omitempty" gorm:"primary_key"`
	// CreatedAt is set to current date when initializing a new Event object.
	// This field is required by gorm.
	CreatedAt time.Time `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	// UpdatedAt is set to current date each time the object is updated in database.
	// This field is required by gorm.
	UpdatedAt time.Time `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	// SentAt is set to current date just after sending the event.
	SentAt *time.Time `protobuf:"bytes,6,opt,name=sent_at,json=sentAt,proto3,stdtime" json:"sent_at,omitempty"`
	// ReceivedAt is set to current date just after receiving the event.
	ReceivedAt *time.Time `protobuf:"bytes,7,opt,name=received_at,json=receivedAt,proto3,stdtime" json:"received_at,omitempty"`
	// AckedAt is set to current date just after receiving an `Ack` event.
	AckedAt *time.Time `protobuf:"bytes,8,opt,name=acked_at,json=ackedAt,proto3,stdtime" json:"acked_at,omitempty"`
	// Direction is set to Outgoing by the source and to Incoming by the destination.
	Direction Event_Direction `protobuf:"varint,9,opt,name=direction,proto3,enum=berty.entity.Event_Direction" json:"direction,omitempty"`
	// SourceAPIVersion is set by the source when creating the message to be sent.
	// this field can be used;
	//   - by the destination to check for compatibility issues
	//   - by everyone when fetching an old event in database to apply local migrations
	APIVersion uint32 `protobuf:"varint,10,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// DestinationDeviceID is the ID of the destination.
	DestinationDeviceID string `protobuf:"bytes,12,opt,name=destination_device_id,json=destinationDeviceId,proto3" json:"destination_device_id,omitempty"`
	// Kind is an enum defining the event type.
	Kind Kind `protobuf:"varint,13,opt,name=kind,proto3,enum=berty.entity.Kind" json:"kind,omitempty"`
	// Attributes is a nested protobuf message containing per-event-type additional attributes, stored in db.
	Attributes []byte `protobuf:"bytes,14,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// ConversationID needs to be set if the event belongs to a conversation.
	ConversationID string `protobuf:"bytes,15,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// SeenAt is set to the date when the event has been displayed on the user's screen.
	SeenAt *time.Time `protobuf:"bytes,16,opt,name=seen_at,json=seenAt,proto3,stdtime" json:"seen_at,omitempty"`
	// AckStatus is aggregated from the different Dispatch events.
	AckStatus Event_AckStatus `protobuf:"varint,17,opt,name=ack_status,json=ackStatus,proto3,enum=berty.entity.Event_AckStatus" json:"ack_status,omitempty"`
	// Dispatches represent each target's dispatch/sending state.
	// this field should only be set for outgoing events.
	Dispatches []*EventDispatch `protobuf:"bytes,18,rep,name=dispatches,proto3" json:"dispatches,omitempty"`
	// SourceContactID is the ID of the source.
	SourceContactID string `protobuf:"bytes,19,opt,name=source_contact_id,json=sourceContactId,proto3" json:"source_contact_id,omitempty"`
	// Metadata represents additional metadata and is not stored in database
	Metadata             []*MetadataKeyValue `protobuf:"bytes,99,rep,name=metadata,proto3" json:"metadata,omitempty" gorm:"-"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0737e212f090f50, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Event) GetSourceDeviceID() string {
	if m != nil {
		return m.SourceDeviceID
	}
	return ""
}

func (m *Event) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Event) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Event) GetSentAt() *time.Time {
	if m != nil {
		return m.SentAt
	}
	return nil
}

func (m *Event) GetReceivedAt() *time.Time {
	if m != nil {
		return m.ReceivedAt
	}
	return nil
}

func (m *Event) GetAckedAt() *time.Time {
	if m != nil {
		return m.AckedAt
	}
	return nil
}

func (m *Event) GetDirection() Event_Direction {
	if m != nil {
		return m.Direction
	}
	return Event_UnknownDirection
}

func (m *Event) GetAPIVersion() uint32 {
	if m != nil {
		return m.APIVersion
	}
	return 0
}

func (m *Event) GetDestinationDeviceID() string {
	if m != nil {
		return m.DestinationDeviceID
	}
	return ""
}

func (m *Event) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_Unknown
}

func (m *Event) GetAttributes() []byte {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Event) GetConversationID() string {
	if m != nil {
		return m.ConversationID
	}
	return ""
}

func (m *Event) GetSeenAt() *time.Time {
	if m != nil {
		return m.SeenAt
	}
	return nil
}

func (m *Event) GetAckStatus() Event_AckStatus {
	if m != nil {
		return m.AckStatus
	}
	return Event_UnknownAckStatus
}

func (m *Event) GetDispatches() []*EventDispatch {
	if m != nil {
		return m.Dispatches
	}
	return nil
}

func (m *Event) GetSourceContactID() string {
	if m != nil {
		return m.SourceContactID
	}
	return ""
}

func (m *Event) GetMetadata() []*MetadataKeyValue {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// EventDispatch represents one sending of an Event to a specific Device
// The primary key is a composite key of EventID+DeviceID
type EventDispatch struct {
	// EventID is the ID of the event
	EventID string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty" gorm:"primary_key"`
	// DeviceID is the ID of the destination device
	DeviceID string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty" gorm:"primary_key"`
	// ContactID is the ID of the destination contact
	ContactID string `protobuf:"bytes,3,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// SentAt is set to current date when sending the Dispatch.
	SentAt *time.Time `protobuf:"bytes,4,opt,name=sent_at,json=sentAt,proto3,stdtime" json:"sent_at,omitempty"`
	// AckedAt is set to current date just after receiving a `Ack` event.
	AckedAt *time.Time `protobuf:"bytes,5,opt,name=acked_at,json=ackedAt,proto3,stdtime" json:"acked_at,omitempty"`
	// SeenAt is set to the date when the event has been displayed on the user's screen
	SeenAt *time.Time `protobuf:"bytes,6,opt,name=seen_at,json=seenAt,proto3,stdtime" json:"seen_at,omitempty"`
	// AckMedium is the communication medium used when receiving an Ack event
	AckMedium EventDispatch_Medium `protobuf:"varint,7,opt,name=ack_medium,json=ackMedium,proto3,enum=berty.entity.EventDispatch_Medium" json:"ack_medium,omitempty"`
	// SeenMedium is the communication medium used when receiving a Seen event
	SeenMedium           EventDispatch_Medium `protobuf:"varint,8,opt,name=seen_medium,json=seenMedium,proto3,enum=berty.entity.EventDispatch_Medium" json:"seen_medium,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventDispatch) Reset()         { *m = EventDispatch{} }
func (m *EventDispatch) String() string { return proto.CompactTextString(m) }
func (*EventDispatch) ProtoMessage()    {}
func (*EventDispatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0737e212f090f50, []int{1}
}
func (m *EventDispatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDispatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDispatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDispatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDispatch.Merge(m, src)
}
func (m *EventDispatch) XXX_Size() int {
	return m.Size()
}
func (m *EventDispatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDispatch.DiscardUnknown(m)
}

var xxx_messageInfo_EventDispatch proto.InternalMessageInfo

func (m *EventDispatch) GetEventID() string {
	if m != nil {
		return m.EventID
	}
	return ""
}

func (m *EventDispatch) GetDeviceID() string {
	if m != nil {
		return m.DeviceID
	}
	return ""
}

func (m *EventDispatch) GetContactID() string {
	if m != nil {
		return m.ContactID
	}
	return ""
}

func (m *EventDispatch) GetSentAt() *time.Time {
	if m != nil {
		return m.SentAt
	}
	return nil
}

func (m *EventDispatch) GetAckedAt() *time.Time {
	if m != nil {
		return m.AckedAt
	}
	return nil
}

func (m *EventDispatch) GetSeenAt() *time.Time {
	if m != nil {
		return m.SeenAt
	}
	return nil
}

func (m *EventDispatch) GetAckMedium() EventDispatch_Medium {
	if m != nil {
		return m.AckMedium
	}
	return EventDispatch_UnknownMedium
}

func (m *EventDispatch) GetSeenMedium() EventDispatch_Medium {
	if m != nil {
		return m.SeenMedium
	}
	return EventDispatch_UnknownMedium
}

type MetadataKeyValue struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values               []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetadataKeyValue) Reset()         { *m = MetadataKeyValue{} }
func (m *MetadataKeyValue) String() string { return proto.CompactTextString(m) }
func (*MetadataKeyValue) ProtoMessage()    {}
func (*MetadataKeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0737e212f090f50, []int{2}
}
func (m *MetadataKeyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetadataKeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetadataKeyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetadataKeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetadataKeyValue.Merge(m, src)
}
func (m *MetadataKeyValue) XXX_Size() int {
	return m.Size()
}
func (m *MetadataKeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MetadataKeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_MetadataKeyValue proto.InternalMessageInfo

func (m *MetadataKeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MetadataKeyValue) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterEnum("berty.entity.Event_AckStatus", Event_AckStatus_name, Event_AckStatus_value)
	proto.RegisterEnum("berty.entity.Event_SeenStatus", Event_SeenStatus_name, Event_SeenStatus_value)
	proto.RegisterEnum("berty.entity.Event_Direction", Event_Direction_name, Event_Direction_value)
	proto.RegisterEnum("berty.entity.EventDispatch_Medium", EventDispatch_Medium_name, EventDispatch_Medium_value)
	proto.RegisterType((*Event)(nil), "berty.entity.Event")
	proto.RegisterType((*EventDispatch)(nil), "berty.entity.EventDispatch")
	proto.RegisterType((*MetadataKeyValue)(nil), "berty.entity.MetadataKeyValue")
}

func init() { proto.RegisterFile("entity/event.proto", fileDescriptor_a0737e212f090f50) }

var fileDescriptor_a0737e212f090f50 = []byte{
	// 1039 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xc1, 0x6e, 0xdb, 0x46,
	0x13, 0x16, 0x25, 0x46, 0xa2, 0x46, 0xb2, 0x4c, 0xad, 0x63, 0xff, 0x8c, 0xf3, 0xd7, 0x54, 0x89,
	0x1e, 0x74, 0x68, 0xa5, 0xc2, 0x3d, 0xb5, 0x29, 0x10, 0x50, 0x56, 0xd0, 0xa8, 0x76, 0x9c, 0x82,
	0x6e, 0x73, 0x28, 0x0a, 0x08, 0x6b, 0xee, 0x56, 0x5e, 0x48, 0x22, 0x55, 0x72, 0xa5, 0x40, 0xe7,
	0xbc, 0x40, 0xd1, 0x53, 0x1f, 0xa5, 0xe8, 0x13, 0xf8, 0xd8, 0x63, 0x4f, 0x6c, 0xc0, 0x5e, 0x7a,
	0x0c, 0xf2, 0x04, 0xc5, 0xee, 0x52, 0x12, 0xed, 0xd6, 0x8d, 0x7d, 0xf2, 0xf2, 0x9b, 0xf9, 0xbe,
	0x9d, 0xf1, 0x7e, 0x33, 0x02, 0x44, 0x03, 0xce, 0xf8, 0xb2, 0x4b, 0x17, 0x34, 0xe0, 0x9d, 0x59,
	0x14, 0xf2, 0x10, 0xd5, 0xcf, 0x69, 0xc4, 0x97, 0x1d, 0x15, 0xd9, 0x77, 0xf0, 0x8c, 0x75, 0x65,
	0xe0, 0x7c, 0xfe, 0x7d, 0x77, 0x14, 0xe1, 0xd9, 0xc5, 0x0f, 0x93, 0xd5, 0x5f, 0xc5, 0xd8, 0x6f,
	0x66, 0x2a, 0x63, 0x16, 0x90, 0x0c, 0xba, 0x3f, 0x0a, 0x47, 0xa1, 0x3c, 0x76, 0xc5, 0x29, 0x43,
	0xed, 0x51, 0x18, 0x8e, 0x26, 0x74, 0xa3, 0xc7, 0xd9, 0x94, 0xc6, 0x1c, 0x4f, 0x67, 0x59, 0xc2,
	0xc3, 0xd9, 0x78, 0xd4, 0x5d, 0xe0, 0x09, 0x23, 0x98, 0xd3, 0xf5, 0x41, 0x05, 0x9d, 0x9f, 0x6a,
	0x70, 0xef, 0x89, 0x28, 0x14, 0x7d, 0x0c, 0x45, 0x46, 0x2c, 0xad, 0xa5, 0xb5, 0xab, 0xbd, 0xd6,
	0xeb, 0x37, 0x0f, 0xb4, 0x34, 0xb1, 0x8b, 0x83, 0xfe, 0xdb, 0xc4, 0x46, 0xa3, 0x30, 0x9a, 0x7e,
	0xe6, 0xcc, 0x22, 0x36, 0xc5, 0xd1, 0x72, 0x38, 0xa6, 0x4b, 0xc7, 0x2b, 0x32, 0x82, 0x3c, 0x30,
	0xe3, 0x70, 0x1e, 0xf9, 0x74, 0x48, 0xe8, 0x82, 0xf9, 0x74, 0xc8, 0x88, 0x55, 0x94, 0xfc, 0x76,
	0x9a, 0xd8, 0x8d, 0x33, 0x19, 0xeb, 0xcb, 0xd0, 0x8d, 0x3a, 0x8d, 0x38, 0x9f, 0x45, 0xd0, 0x11,
	0x80, 0x1f, 0x51, 0xcc, 0x29, 0x19, 0x62, 0x6e, 0x95, 0x5a, 0x5a, 0xbb, 0x76, 0xb8, 0xdf, 0x51,
	0x2d, 0x76, 0x56, 0x2d, 0x76, 0xbe, 0x5e, 0xb5, 0xd8, 0x33, 0x2e, 0x13, 0xbb, 0xf0, 0xe3, 0x1f,
	0xb6, 0xe6, 0x55, 0x33, 0x9e, 0xcb, 0x85, 0xc8, 0x7c, 0x46, 0x56, 0x22, 0xfa, 0x5d, 0x44, 0x32,
	0x9e, 0xcb, 0xd1, 0xa7, 0x50, 0x89, 0x69, 0xc0, 0x85, 0x42, 0xf9, 0x9d, 0x0a, 0xba, 0x64, 0x97,
	0x05, 0xc1, 0xe5, 0xc8, 0x85, 0x5a, 0x44, 0x7d, 0xca, 0x16, 0xaa, 0x80, 0xca, 0x2d, 0xe9, 0xb0,
	0x22, 0xb9, 0x1c, 0x3d, 0x02, 0x03, 0xfb, 0x63, 0xc5, 0x37, 0x6e, 0xc9, 0xaf, 0x48, 0x86, 0xbc,
	0xbf, 0x4a, 0x58, 0x44, 0x7d, 0xce, 0xc2, 0xc0, 0xaa, 0xb6, 0xb4, 0x76, 0xe3, 0xf0, 0xbd, 0x4e,
	0xde, 0x81, 0x1d, 0xf9, 0xe4, 0x9d, 0xfe, 0x2a, 0xa9, 0xa7, 0xff, 0xfe, 0x6a, 0xbf, 0xe0, 0x6d,
	0x58, 0xa8, 0x0b, 0x35, 0x3c, 0x63, 0xc3, 0x05, 0x8d, 0x62, 0x21, 0x02, 0x2d, 0xad, 0xbd, 0xd5,
	0x6b, 0xa4, 0x89, 0x0d, 0xee, 0x57, 0x83, 0x17, 0x0a, 0xf5, 0x00, 0xcf, 0x58, 0x76, 0x46, 0xc7,
	0xb0, 0x4b, 0x68, 0xcc, 0x59, 0x80, 0x05, 0x3f, 0xe7, 0x88, 0xba, 0x74, 0xc4, 0xff, 0xd2, 0xc4,
	0xde, 0xe9, 0x6f, 0x12, 0x56, 0xb6, 0xf0, 0x76, 0xc8, 0x3f, 0x40, 0x82, 0x3e, 0x04, 0x5d, 0xf8,
	0xde, 0xda, 0x92, 0xb5, 0xa3, 0xab, 0xb5, 0x1f, 0xb3, 0x80, 0x64, 0x05, 0xcb, 0x2c, 0xf4, 0x01,
	0x00, 0xe6, 0x3c, 0x62, 0xe7, 0x73, 0x4e, 0x63, 0xab, 0xd1, 0xd2, 0xda, 0xf5, 0x9e, 0xfe, 0xd7,
	0x9b, 0x07, 0x9a, 0x97, 0xc3, 0xd1, 0x63, 0xd8, 0xf6, 0xc3, 0x40, 0x34, 0xa4, 0x2a, 0x64, 0xc4,
	0xda, 0x96, 0xa5, 0xed, 0x65, 0x66, 0x6f, 0x1c, 0xe5, 0xc2, 0x83, 0xbe, 0xd7, 0xc8, 0xa7, 0x0f,
	0x88, 0x32, 0x04, 0x0d, 0xc4, 0x8b, 0x98, 0xb7, 0x37, 0x04, 0x0d, 0x5c, 0x8e, 0x7a, 0x00, 0xd8,
	0x1f, 0x0f, 0x63, 0x8e, 0xf9, 0x3c, 0xb6, 0x9a, 0x37, 0xbf, 0x88, 0xeb, 0x8f, 0xcf, 0x64, 0xd2,
	0xea, 0x45, 0xf0, 0x0a, 0x40, 0x8f, 0x00, 0x08, 0x8b, 0x67, 0x98, 0xfb, 0x17, 0x34, 0xb6, 0x50,
	0xab, 0xd4, 0xae, 0x1d, 0x3e, 0xfc, 0x17, 0x8d, 0x7e, 0x96, 0xe4, 0xe5, 0xd2, 0xd1, 0x63, 0x68,
	0x66, 0xa3, 0xea, 0x87, 0x01, 0xc7, 0x3e, 0x17, 0xed, 0xef, 0xc8, 0xf6, 0x77, 0xd2, 0xc4, 0xde,
	0x56, 0xb3, 0x7a, 0xa4, 0x62, 0x83, 0xbe, 0xb7, 0x1d, 0x5f, 0x01, 0x08, 0x7a, 0x0a, 0xc6, 0x94,
	0x72, 0x4c, 0x30, 0xc7, 0x96, 0x2f, 0xef, 0x3e, 0xb8, 0x7a, 0xf7, 0xb3, 0x2c, 0x7a, 0x4c, 0x97,
	0x2f, 0xf0, 0x64, 0x4e, 0x7b, 0xf5, 0xb7, 0x89, 0x6d, 0xa8, 0x89, 0xff, 0xc8, 0xf1, 0xd6, 0x6c,
	0x87, 0x43, 0x75, 0xdd, 0x25, 0xba, 0x0f, 0xe6, 0x37, 0xc1, 0x38, 0x08, 0x5f, 0x06, 0x6b, 0xcc,
	0x2c, 0xa0, 0x3a, 0x18, 0xa7, 0x21, 0x77, 0x85, 0x9b, 0x4d, 0x4d, 0xe4, 0xb8, 0xca, 0xd8, 0x27,
	0x14, 0xc7, 0xfc, 0x79, 0xe0, 0x53, 0xb3, 0x88, 0xf6, 0x00, 0x49, 0xb4, 0xb7, 0x74, 0x27, 0x93,
	0xac, 0xce, 0xd8, 0x2c, 0xa1, 0x5d, 0x68, 0x6e, 0x70, 0x65, 0xa8, 0xd8, 0xd4, 0x9d, 0xef, 0x00,
	0xce, 0x28, 0x0d, 0xb2, 0x6b, 0x77, 0xa1, 0x99, 0x5d, 0xbb, 0x01, 0xcd, 0x02, 0xaa, 0x41, 0xe5,
	0x34, 0xe4, 0x02, 0x32, 0x35, 0xb4, 0x03, 0xdb, 0x67, 0xf2, 0xf5, 0xf2, 0xb7, 0xee, 0x42, 0x53,
	0x80, 0xd7, 0x2e, 0x75, 0xbe, 0x80, 0xea, 0x7a, 0x96, 0x72, 0x3d, 0xad, 0x31, 0xd5, 0xd3, 0x20,
	0xf0, 0xc3, 0x29, 0x0b, 0x46, 0xa6, 0x26, 0xbe, 0x9e, 0xcf, 0xf9, 0x28, 0x14, 0x5f, 0x45, 0x64,
	0x80, 0x7e, 0x1a, 0x12, 0x6a, 0xfa, 0x5f, 0xea, 0x46, 0xcd, 0xac, 0x3b, 0xbf, 0xea, 0xb0, 0x75,
	0xe5, 0x2d, 0xd1, 0xe7, 0x60, 0xc8, 0x9f, 0x93, 0xe1, 0x7a, 0x45, 0xbf, 0x9f, 0x26, 0x76, 0x45,
	0x26, 0xdd, 0xb8, 0x5b, 0x2b, 0x92, 0x32, 0x20, 0xe8, 0x31, 0x54, 0xaf, 0x6f, 0x68, 0x27, 0x4d,
	0x6c, 0xe3, 0x1d, 0xbb, 0xd9, 0x20, 0x9b, 0x79, 0x84, 0x9c, 0x6f, 0x4a, 0x52, 0x61, 0x2b, 0x4d,
	0xec, 0xea, 0xc6, 0x31, 0x55, 0x7f, 0xed, 0x95, 0xdc, 0xe6, 0xd4, 0xef, 0xb8, 0x39, 0xf3, 0x6b,
	0xef, 0xde, 0x5d, 0xd7, 0x5e, 0x6e, 0x40, 0xcb, 0x77, 0x1c, 0x50, 0x57, 0x0d, 0xe8, 0x94, 0x12,
	0x36, 0x9f, 0xca, 0x85, 0xdd, 0x38, 0x74, 0xfe, 0x63, 0xb8, 0x3a, 0xcf, 0x64, 0xa6, 0x9c, 0x4f,
	0x75, 0x44, 0x47, 0x50, 0x93, 0xb7, 0x67, 0x1a, 0xc6, 0xad, 0x35, 0x40, 0xd0, 0xd4, 0xd9, 0x71,
	0xa1, 0x9c, 0xc9, 0x35, 0x61, 0x2b, 0x73, 0x91, 0x02, 0xcc, 0x02, 0x32, 0xa1, 0x7e, 0x12, 0xfa,
	0x78, 0x72, 0x4a, 0xf9, 0xcb, 0x30, 0x1a, 0x9b, 0x1a, 0xaa, 0x40, 0xa9, 0x77, 0xf2, 0xc4, 0x2c,
	0xa2, 0x2a, 0xdc, 0xf3, 0xe8, 0x04, 0x2f, 0xcd, 0x92, 0xf3, 0x14, 0xcc, 0xeb, 0xb3, 0x88, 0xf6,
	0xa0, 0x34, 0xa6, 0xcb, 0xcc, 0x39, 0xfa, 0x2f, 0xaf, 0xf6, 0x35, 0x4f, 0x00, 0xe8, 0xff, 0x50,
	0x5e, 0x88, 0x84, 0xd8, 0x2a, 0xb6, 0x4a, 0x22, 0x74, 0x29, 0x42, 0x19, 0xd6, 0x6b, 0x5f, 0xa6,
	0x07, 0xda, 0x6f, 0xe9, 0x81, 0xf6, 0x3a, 0x3d, 0xd0, 0x7e, 0xfe, 0xf3, 0xa0, 0xf0, 0xed, 0x9e,
	0xea, 0x86, 0x53, 0xff, 0xa2, 0xeb, 0x87, 0x11, 0xed, 0xaa, 0xbe, 0xce, 0xcb, 0xf2, 0x1f, 0xfc,
	0xc9, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x59, 0xd4, 0xad, 0xfb, 0x08, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.SourceDeviceID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SourceDeviceID)))
		i += copy(dAtA[i:], m.SourceDeviceID)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.SentAt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.SentAt)))
		n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.SentAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ReceivedAt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReceivedAt)))
		n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ReceivedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.AckedAt != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.AckedAt)))
		n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.AckedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Direction != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Direction))
	}
	if m.APIVersion != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.APIVersion))
	}
	if len(m.DestinationDeviceID) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DestinationDeviceID)))
		i += copy(dAtA[i:], m.DestinationDeviceID)
	}
	if m.Kind != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Kind))
	}
	if len(m.Attributes) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Attributes)))
		i += copy(dAtA[i:], m.Attributes)
	}
	if len(m.ConversationID) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ConversationID)))
		i += copy(dAtA[i:], m.ConversationID)
	}
	if m.SeenAt != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.SeenAt)))
		n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.SeenAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.AckStatus != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.AckStatus))
	}
	if len(m.Dispatches) > 0 {
		for _, msg := range m.Dispatches {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SourceContactID) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.SourceContactID)))
		i += copy(dAtA[i:], m.SourceContactID)
	}
	if len(m.Metadata) > 0 {
		for _, msg := range m.Metadata {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x6
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EventDispatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDispatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EventID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.EventID)))
		i += copy(dAtA[i:], m.EventID)
	}
	if len(m.DeviceID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.DeviceID)))
		i += copy(dAtA[i:], m.DeviceID)
	}
	if len(m.ContactID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ContactID)))
		i += copy(dAtA[i:], m.ContactID)
	}
	if m.SentAt != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.SentAt)))
		n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.SentAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.AckedAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.AckedAt)))
		n8, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.AckedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.SeenAt != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.SeenAt)))
		n9, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.SeenAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.AckMedium != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.AckMedium))
	}
	if m.SeenMedium != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.SeenMedium))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MetadataKeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetadataKeyValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.SourceDeviceID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovEvent(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovEvent(uint64(l))
	if m.SentAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.SentAt)
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ReceivedAt)
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.AckedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.AckedAt)
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovEvent(uint64(m.Direction))
	}
	if m.APIVersion != 0 {
		n += 1 + sovEvent(uint64(m.APIVersion))
	}
	l = len(m.DestinationDeviceID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovEvent(uint64(m.Kind))
	}
	l = len(m.Attributes)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ConversationID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.SeenAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.SeenAt)
		n += 2 + l + sovEvent(uint64(l))
	}
	if m.AckStatus != 0 {
		n += 2 + sovEvent(uint64(m.AckStatus))
	}
	if len(m.Dispatches) > 0 {
		for _, e := range m.Dispatches {
			l = e.Size()
			n += 2 + l + sovEvent(uint64(l))
		}
	}
	l = len(m.SourceContactID)
	if l > 0 {
		n += 2 + l + sovEvent(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 2 + l + sovEvent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventDispatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.DeviceID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ContactID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.SentAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.SentAt)
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.AckedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.AckedAt)
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.SeenAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.SeenAt)
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.AckMedium != 0 {
		n += 1 + sovEvent(uint64(m.AckMedium))
	}
	if m.SeenMedium != 0 {
		n += 1 + sovEvent(uint64(m.SeenMedium))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MetadataKeyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SentAt == nil {
				m.SentAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.SentAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReceivedAt == nil {
				m.ReceivedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ReceivedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AckedAt == nil {
				m.AckedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.AckedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= (Event_Direction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIVersion", wireType)
			}
			m.APIVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.APIVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationDeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (Kind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes[:0], dAtA[iNdEx:postIndex]...)
			if m.Attributes == nil {
				m.Attributes = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeenAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeenAt == nil {
				m.SeenAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.SeenAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckStatus", wireType)
			}
			m.AckStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckStatus |= (Event_AckStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dispatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dispatches = append(m.Dispatches, &EventDispatch{})
			if err := m.Dispatches[len(m.Dispatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceContactID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceContactID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &MetadataKeyValue{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDispatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDispatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDispatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SentAt == nil {
				m.SentAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.SentAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AckedAt == nil {
				m.AckedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.AckedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeenAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeenAt == nil {
				m.SeenAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.SeenAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckMedium", wireType)
			}
			m.AckMedium = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckMedium |= (EventDispatch_Medium(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeenMedium", wireType)
			}
			m.SeenMedium = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeenMedium |= (EventDispatch_Medium(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetadataKeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetadataKeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetadataKeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent   = fmt.Errorf("proto: integer overflow")
)
