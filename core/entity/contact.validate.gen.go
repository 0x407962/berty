// this file was generated by protoc-gen-gotemplate

package entity

import (
	"github.com/pkg/errors"

	"berty.tech/core/pkg/errorcodes"
	"berty.tech/core/pkg/validate/validator"
)

var (
	_ = errors.New
	_ = validator.IsContactKey
	_ = errorcodes.IsSubCode
)

func (m *Contact) Validate() error {
	if m == nil {
		return nil
	}

	// handling field: ID - name:"id" number:1 label:LABEL_OPTIONAL type:TYPE_STRING json_name:"id" options:<53004:1 []:true []:"ID" 65006:"gorm:\"primary_key\"" >  (is_contact_key=true, defined_only=false, min_len=0, max_len=0, skip=false, required=false, min_items=0, max_items=0)
	if err := validator.IsContactKey(m.GetID()); err != nil {
		return err
	}

	// handling field: CreatedAt - name:"created_at" number:2 label:LABEL_OPTIONAL type:TYPE_MESSAGE type_name:".google.protobuf.Timestamp" json_name:"createdAt" options:<[]:true 65001:0 65010:1 >  (is_contact_key=false, defined_only=false, min_len=0, max_len=0, skip=true, required=false, min_items=0, max_items=0)

	// handling field: UpdatedAt - name:"updated_at" number:3 label:LABEL_OPTIONAL type:TYPE_MESSAGE type_name:".google.protobuf.Timestamp" json_name:"updatedAt" options:<[]:true 65001:0 65010:1 >  (is_contact_key=false, defined_only=false, min_len=0, max_len=0, skip=true, required=false, min_items=0, max_items=0)

	// handling field: Sigchain - name:"sigchain" number:10 label:LABEL_OPTIONAL type:TYPE_BYTES json_name:"sigchain"  (is_contact_key=false, defined_only=false, min_len=0, max_len=0, skip=false, required=false, min_items=0, max_items=0)

	// handling field: Status - name:"status" number:11 label:LABEL_OPTIONAL type:TYPE_ENUM type_name:".berty.entity.Contact.Status" json_name:"status"  (is_contact_key=false, defined_only=false, min_len=0, max_len=0, skip=false, required=false, min_items=0, max_items=0)

	// handling field: Devices - name:"devices" number:12 label:LABEL_REPEATED type:TYPE_MESSAGE type_name:".berty.entity.Device" json_name:"devices" options:<[]:1 >  (is_contact_key=false, defined_only=false, min_len=0, max_len=0, skip=false, required=false, min_items=1, max_items=0)

	if v, ok := interface{}(m.GetDevices()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return errors.Wrap(err, "embedded message verification failed: Devices")
		}
	}

	if len(m.GetDevices()) < 1 {
		return errors.New("Devices must contain at least 1 item(s)")
	}

	// handling field: DisplayName - name:"display_name" number:13 label:LABEL_OPTIONAL type:TYPE_STRING json_name:"displayName"  (is_contact_key=false, defined_only=false, min_len=0, max_len=0, skip=false, required=false, min_items=0, max_items=0)

	// handling field: DisplayStatus - name:"display_status" number:14 label:LABEL_OPTIONAL type:TYPE_STRING json_name:"displayStatus"  (is_contact_key=false, defined_only=false, min_len=0, max_len=0, skip=false, required=false, min_items=0, max_items=0)

	// handling field: OverrideDisplayName - name:"override_display_name" number:15 label:LABEL_OPTIONAL type:TYPE_STRING json_name:"overrideDisplayName"  (is_contact_key=false, defined_only=false, min_len=0, max_len=0, skip=false, required=false, min_items=0, max_items=0)

	// handling field: OverrideDisplayStatus - name:"override_display_status" number:16 label:LABEL_OPTIONAL type:TYPE_STRING json_name:"overrideDisplayStatus"  (is_contact_key=false, defined_only=false, min_len=0, max_len=0, skip=false, required=false, min_items=0, max_items=0)
	return nil
}
