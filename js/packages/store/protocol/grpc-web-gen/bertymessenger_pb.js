// source: bertymessenger.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
goog.exportSymbol('proto.berty.messenger.BertyID', null, global);
goog.exportSymbol('proto.berty.messenger.DevShareInstanceBertyID', null, global);
goog.exportSymbol('proto.berty.messenger.DevShareInstanceBertyID.Reply', null, global);
goog.exportSymbol('proto.berty.messenger.DevShareInstanceBertyID.Request', null, global);
goog.exportSymbol('proto.berty.messenger.InstanceShareableBertyID', null, global);
goog.exportSymbol('proto.berty.messenger.InstanceShareableBertyID.Reply', null, global);
goog.exportSymbol('proto.berty.messenger.InstanceShareableBertyID.Request', null, global);
goog.exportSymbol('proto.berty.messenger.ParseDeepLink', null, global);
goog.exportSymbol('proto.berty.messenger.ParseDeepLink.Kind', null, global);
goog.exportSymbol('proto.berty.messenger.ParseDeepLink.Reply', null, global);
goog.exportSymbol('proto.berty.messenger.ParseDeepLink.Request', null, global);
goog.exportSymbol('proto.berty.messenger.SendContactRequest', null, global);
goog.exportSymbol('proto.berty.messenger.SendContactRequest.Reply', null, global);
goog.exportSymbol('proto.berty.messenger.SendContactRequest.Request', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.InstanceShareableBertyID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.InstanceShareableBertyID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.InstanceShareableBertyID.displayName = 'proto.berty.messenger.InstanceShareableBertyID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.InstanceShareableBertyID.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.InstanceShareableBertyID.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.InstanceShareableBertyID.Request.displayName = 'proto.berty.messenger.InstanceShareableBertyID.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.InstanceShareableBertyID.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.InstanceShareableBertyID.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.InstanceShareableBertyID.Reply.displayName = 'proto.berty.messenger.InstanceShareableBertyID.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.DevShareInstanceBertyID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.DevShareInstanceBertyID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.DevShareInstanceBertyID.displayName = 'proto.berty.messenger.DevShareInstanceBertyID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.DevShareInstanceBertyID.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.DevShareInstanceBertyID.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.DevShareInstanceBertyID.Request.displayName = 'proto.berty.messenger.DevShareInstanceBertyID.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.DevShareInstanceBertyID.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.DevShareInstanceBertyID.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.DevShareInstanceBertyID.Reply.displayName = 'proto.berty.messenger.DevShareInstanceBertyID.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.ParseDeepLink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.ParseDeepLink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.ParseDeepLink.displayName = 'proto.berty.messenger.ParseDeepLink';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.ParseDeepLink.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.ParseDeepLink.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.ParseDeepLink.Request.displayName = 'proto.berty.messenger.ParseDeepLink.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.ParseDeepLink.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.ParseDeepLink.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.ParseDeepLink.Reply.displayName = 'proto.berty.messenger.ParseDeepLink.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.SendContactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.SendContactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.SendContactRequest.displayName = 'proto.berty.messenger.SendContactRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.SendContactRequest.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.SendContactRequest.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.SendContactRequest.Request.displayName = 'proto.berty.messenger.SendContactRequest.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.SendContactRequest.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.SendContactRequest.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.SendContactRequest.Reply.displayName = 'proto.berty.messenger.SendContactRequest.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.berty.messenger.BertyID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.berty.messenger.BertyID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.berty.messenger.BertyID.displayName = 'proto.berty.messenger.BertyID';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.InstanceShareableBertyID.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.InstanceShareableBertyID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.InstanceShareableBertyID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.InstanceShareableBertyID.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.InstanceShareableBertyID}
 */
proto.berty.messenger.InstanceShareableBertyID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.InstanceShareableBertyID;
  return proto.berty.messenger.InstanceShareableBertyID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.InstanceShareableBertyID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.InstanceShareableBertyID}
 */
proto.berty.messenger.InstanceShareableBertyID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.InstanceShareableBertyID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.InstanceShareableBertyID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.InstanceShareableBertyID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.InstanceShareableBertyID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.InstanceShareableBertyID.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.InstanceShareableBertyID.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.InstanceShareableBertyID.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.InstanceShareableBertyID.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    reset: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    displayName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.InstanceShareableBertyID.Request}
 */
proto.berty.messenger.InstanceShareableBertyID.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.InstanceShareableBertyID.Request;
  return proto.berty.messenger.InstanceShareableBertyID.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.InstanceShareableBertyID.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.InstanceShareableBertyID.Request}
 */
proto.berty.messenger.InstanceShareableBertyID.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.InstanceShareableBertyID.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.InstanceShareableBertyID.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.InstanceShareableBertyID.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.InstanceShareableBertyID.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReset();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool reset = 1;
 * @return {boolean}
 */
proto.berty.messenger.InstanceShareableBertyID.Request.prototype.getReset = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.berty.messenger.InstanceShareableBertyID.Request} returns this
 */
proto.berty.messenger.InstanceShareableBertyID.Request.prototype.setReset = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.berty.messenger.InstanceShareableBertyID.Request.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.berty.messenger.InstanceShareableBertyID.Request} returns this
 */
proto.berty.messenger.InstanceShareableBertyID.Request.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.InstanceShareableBertyID.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.InstanceShareableBertyID.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    bertyId: (f = msg.getBertyId()) && proto.berty.messenger.BertyID.toObject(includeInstance, f),
    bertyIdPayload: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deepLink: jspb.Message.getFieldWithDefault(msg, 3, ""),
    htmlUrl: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.InstanceShareableBertyID.Reply}
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.InstanceShareableBertyID.Reply;
  return proto.berty.messenger.InstanceShareableBertyID.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.InstanceShareableBertyID.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.InstanceShareableBertyID.Reply}
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.berty.messenger.BertyID;
      reader.readMessage(value,proto.berty.messenger.BertyID.deserializeBinaryFromReader);
      msg.setBertyId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBertyIdPayload(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeepLink(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtmlUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.InstanceShareableBertyID.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.InstanceShareableBertyID.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBertyId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.berty.messenger.BertyID.serializeBinaryToWriter
    );
  }
  f = message.getBertyIdPayload();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeepLink();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHtmlUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional BertyID berty_id = 1;
 * @return {?proto.berty.messenger.BertyID}
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.getBertyId = function() {
  return /** @type{?proto.berty.messenger.BertyID} */ (
    jspb.Message.getWrapperField(this, proto.berty.messenger.BertyID, 1));
};


/**
 * @param {?proto.berty.messenger.BertyID|undefined} value
 * @return {!proto.berty.messenger.InstanceShareableBertyID.Reply} returns this
*/
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.setBertyId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.berty.messenger.InstanceShareableBertyID.Reply} returns this
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.clearBertyId = function() {
  return this.setBertyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.hasBertyId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string berty_id_payload = 2;
 * @return {string}
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.getBertyIdPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.berty.messenger.InstanceShareableBertyID.Reply} returns this
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.setBertyIdPayload = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string deep_link = 3;
 * @return {string}
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.getDeepLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.berty.messenger.InstanceShareableBertyID.Reply} returns this
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.setDeepLink = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string html_url = 4;
 * @return {string}
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.getHtmlUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.berty.messenger.InstanceShareableBertyID.Reply} returns this
 */
proto.berty.messenger.InstanceShareableBertyID.Reply.prototype.setHtmlUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.DevShareInstanceBertyID.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.DevShareInstanceBertyID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.DevShareInstanceBertyID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.DevShareInstanceBertyID.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.DevShareInstanceBertyID}
 */
proto.berty.messenger.DevShareInstanceBertyID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.DevShareInstanceBertyID;
  return proto.berty.messenger.DevShareInstanceBertyID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.DevShareInstanceBertyID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.DevShareInstanceBertyID}
 */
proto.berty.messenger.DevShareInstanceBertyID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.DevShareInstanceBertyID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.DevShareInstanceBertyID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.DevShareInstanceBertyID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.DevShareInstanceBertyID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.DevShareInstanceBertyID.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.DevShareInstanceBertyID.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.DevShareInstanceBertyID.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.DevShareInstanceBertyID.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    reset: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    displayName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.DevShareInstanceBertyID.Request}
 */
proto.berty.messenger.DevShareInstanceBertyID.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.DevShareInstanceBertyID.Request;
  return proto.berty.messenger.DevShareInstanceBertyID.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.DevShareInstanceBertyID.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.DevShareInstanceBertyID.Request}
 */
proto.berty.messenger.DevShareInstanceBertyID.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.DevShareInstanceBertyID.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.DevShareInstanceBertyID.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.DevShareInstanceBertyID.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.DevShareInstanceBertyID.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReset();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool reset = 1;
 * @return {boolean}
 */
proto.berty.messenger.DevShareInstanceBertyID.Request.prototype.getReset = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.berty.messenger.DevShareInstanceBertyID.Request} returns this
 */
proto.berty.messenger.DevShareInstanceBertyID.Request.prototype.setReset = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.berty.messenger.DevShareInstanceBertyID.Request.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.berty.messenger.DevShareInstanceBertyID.Request} returns this
 */
proto.berty.messenger.DevShareInstanceBertyID.Request.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.DevShareInstanceBertyID.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.DevShareInstanceBertyID.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.DevShareInstanceBertyID.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.DevShareInstanceBertyID.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.DevShareInstanceBertyID.Reply}
 */
proto.berty.messenger.DevShareInstanceBertyID.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.DevShareInstanceBertyID.Reply;
  return proto.berty.messenger.DevShareInstanceBertyID.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.DevShareInstanceBertyID.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.DevShareInstanceBertyID.Reply}
 */
proto.berty.messenger.DevShareInstanceBertyID.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.DevShareInstanceBertyID.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.DevShareInstanceBertyID.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.DevShareInstanceBertyID.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.DevShareInstanceBertyID.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.ParseDeepLink.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.ParseDeepLink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.ParseDeepLink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.ParseDeepLink.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.ParseDeepLink}
 */
proto.berty.messenger.ParseDeepLink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.ParseDeepLink;
  return proto.berty.messenger.ParseDeepLink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.ParseDeepLink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.ParseDeepLink}
 */
proto.berty.messenger.ParseDeepLink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.ParseDeepLink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.ParseDeepLink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.ParseDeepLink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.ParseDeepLink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.berty.messenger.ParseDeepLink.Kind = {
  UNKNOWNKIND: 0,
  BERTYID: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.ParseDeepLink.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.ParseDeepLink.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.ParseDeepLink.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.ParseDeepLink.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    link: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.ParseDeepLink.Request}
 */
proto.berty.messenger.ParseDeepLink.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.ParseDeepLink.Request;
  return proto.berty.messenger.ParseDeepLink.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.ParseDeepLink.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.ParseDeepLink.Request}
 */
proto.berty.messenger.ParseDeepLink.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.ParseDeepLink.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.ParseDeepLink.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.ParseDeepLink.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.ParseDeepLink.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLink();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string link = 1;
 * @return {string}
 */
proto.berty.messenger.ParseDeepLink.Request.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.berty.messenger.ParseDeepLink.Request} returns this
 */
proto.berty.messenger.ParseDeepLink.Request.prototype.setLink = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.ParseDeepLink.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.ParseDeepLink.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.ParseDeepLink.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.ParseDeepLink.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bertyId: (f = msg.getBertyId()) && proto.berty.messenger.BertyID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.ParseDeepLink.Reply}
 */
proto.berty.messenger.ParseDeepLink.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.ParseDeepLink.Reply;
  return proto.berty.messenger.ParseDeepLink.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.ParseDeepLink.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.ParseDeepLink.Reply}
 */
proto.berty.messenger.ParseDeepLink.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.berty.messenger.ParseDeepLink.Kind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 3:
      var value = new proto.berty.messenger.BertyID;
      reader.readMessage(value,proto.berty.messenger.BertyID.deserializeBinaryFromReader);
      msg.setBertyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.ParseDeepLink.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.ParseDeepLink.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.ParseDeepLink.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.ParseDeepLink.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBertyId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.berty.messenger.BertyID.serializeBinaryToWriter
    );
  }
};


/**
 * optional Kind kind = 1;
 * @return {!proto.berty.messenger.ParseDeepLink.Kind}
 */
proto.berty.messenger.ParseDeepLink.Reply.prototype.getKind = function() {
  return /** @type {!proto.berty.messenger.ParseDeepLink.Kind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.berty.messenger.ParseDeepLink.Kind} value
 * @return {!proto.berty.messenger.ParseDeepLink.Reply} returns this
 */
proto.berty.messenger.ParseDeepLink.Reply.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional BertyID berty_id = 3;
 * @return {?proto.berty.messenger.BertyID}
 */
proto.berty.messenger.ParseDeepLink.Reply.prototype.getBertyId = function() {
  return /** @type{?proto.berty.messenger.BertyID} */ (
    jspb.Message.getWrapperField(this, proto.berty.messenger.BertyID, 3));
};


/**
 * @param {?proto.berty.messenger.BertyID|undefined} value
 * @return {!proto.berty.messenger.ParseDeepLink.Reply} returns this
*/
proto.berty.messenger.ParseDeepLink.Reply.prototype.setBertyId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.berty.messenger.ParseDeepLink.Reply} returns this
 */
proto.berty.messenger.ParseDeepLink.Reply.prototype.clearBertyId = function() {
  return this.setBertyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.berty.messenger.ParseDeepLink.Reply.prototype.hasBertyId = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.SendContactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.SendContactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.SendContactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.SendContactRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.SendContactRequest}
 */
proto.berty.messenger.SendContactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.SendContactRequest;
  return proto.berty.messenger.SendContactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.SendContactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.SendContactRequest}
 */
proto.berty.messenger.SendContactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.SendContactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.SendContactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.SendContactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.SendContactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.SendContactRequest.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.SendContactRequest.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.SendContactRequest.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.SendContactRequest.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    bertyId: (f = msg.getBertyId()) && proto.berty.messenger.BertyID.toObject(includeInstance, f),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.SendContactRequest.Request}
 */
proto.berty.messenger.SendContactRequest.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.SendContactRequest.Request;
  return proto.berty.messenger.SendContactRequest.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.SendContactRequest.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.SendContactRequest.Request}
 */
proto.berty.messenger.SendContactRequest.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.berty.messenger.BertyID;
      reader.readMessage(value,proto.berty.messenger.BertyID.deserializeBinaryFromReader);
      msg.setBertyId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.SendContactRequest.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.SendContactRequest.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.SendContactRequest.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.SendContactRequest.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBertyId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.berty.messenger.BertyID.serializeBinaryToWriter
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional BertyID berty_id = 1;
 * @return {?proto.berty.messenger.BertyID}
 */
proto.berty.messenger.SendContactRequest.Request.prototype.getBertyId = function() {
  return /** @type{?proto.berty.messenger.BertyID} */ (
    jspb.Message.getWrapperField(this, proto.berty.messenger.BertyID, 1));
};


/**
 * @param {?proto.berty.messenger.BertyID|undefined} value
 * @return {!proto.berty.messenger.SendContactRequest.Request} returns this
*/
proto.berty.messenger.SendContactRequest.Request.prototype.setBertyId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.berty.messenger.SendContactRequest.Request} returns this
 */
proto.berty.messenger.SendContactRequest.Request.prototype.clearBertyId = function() {
  return this.setBertyId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.berty.messenger.SendContactRequest.Request.prototype.hasBertyId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes Metadata = 2;
 * @return {!(string|Uint8Array)}
 */
proto.berty.messenger.SendContactRequest.Request.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Metadata = 2;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.berty.messenger.SendContactRequest.Request.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes Metadata = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.berty.messenger.SendContactRequest.Request.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.berty.messenger.SendContactRequest.Request} returns this
 */
proto.berty.messenger.SendContactRequest.Request.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.SendContactRequest.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.SendContactRequest.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.SendContactRequest.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.SendContactRequest.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.SendContactRequest.Reply}
 */
proto.berty.messenger.SendContactRequest.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.SendContactRequest.Reply;
  return proto.berty.messenger.SendContactRequest.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.SendContactRequest.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.SendContactRequest.Reply}
 */
proto.berty.messenger.SendContactRequest.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.SendContactRequest.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.SendContactRequest.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.SendContactRequest.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.SendContactRequest.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.berty.messenger.BertyID.prototype.toObject = function(opt_includeInstance) {
  return proto.berty.messenger.BertyID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.berty.messenger.BertyID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.BertyID.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicRendezvousSeed: msg.getPublicRendezvousSeed_asB64(),
    accountPk: msg.getAccountPk_asB64(),
    displayName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.berty.messenger.BertyID}
 */
proto.berty.messenger.BertyID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.berty.messenger.BertyID;
  return proto.berty.messenger.BertyID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.berty.messenger.BertyID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.berty.messenger.BertyID}
 */
proto.berty.messenger.BertyID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicRendezvousSeed(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountPk(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.berty.messenger.BertyID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.berty.messenger.BertyID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.berty.messenger.BertyID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.berty.messenger.BertyID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicRendezvousSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAccountPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * @return {!(string|Uint8Array)}
 */
proto.berty.messenger.BertyID.prototype.getPublicRendezvousSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {string}
 */
proto.berty.messenger.BertyID.prototype.getPublicRendezvousSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicRendezvousSeed()));
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {!Uint8Array}
 */
proto.berty.messenger.BertyID.prototype.getPublicRendezvousSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicRendezvousSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.berty.messenger.BertyID} returns this
 */
proto.berty.messenger.BertyID.prototype.setPublicRendezvousSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes account_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.berty.messenger.BertyID.prototype.getAccountPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes account_pk = 2;
 * This is a type-conversion wrapper around `getAccountPk()`
 * @return {string}
 */
proto.berty.messenger.BertyID.prototype.getAccountPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountPk()));
};


/**
 * optional bytes account_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountPk()`
 * @return {!Uint8Array}
 */
proto.berty.messenger.BertyID.prototype.getAccountPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.berty.messenger.BertyID} returns this
 */
proto.berty.messenger.BertyID.prototype.setAccountPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string display_name = 3;
 * @return {string}
 */
proto.berty.messenger.BertyID.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.berty.messenger.BertyID} returns this
 */
proto.berty.messenger.BertyID.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.berty.messenger);
