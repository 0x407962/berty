// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/sigchain.proto

package crypto

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SigChainEntry_SigChainEntryType int32

const (
	SigChainEntry_SigChainEntryTypeUndefined SigChainEntry_SigChainEntryType = 0
	SigChainEntry_SigChainEntryTypeInitChain SigChainEntry_SigChainEntryType = 1
	SigChainEntry_SigChainEntryTypeAddKey    SigChainEntry_SigChainEntryType = 2
	SigChainEntry_SigChainEntryTypeRemoveKey SigChainEntry_SigChainEntryType = 3
)

var SigChainEntry_SigChainEntryType_name = map[int32]string{
	0: "SigChainEntryTypeUndefined",
	1: "SigChainEntryTypeInitChain",
	2: "SigChainEntryTypeAddKey",
	3: "SigChainEntryTypeRemoveKey",
}

var SigChainEntry_SigChainEntryType_value = map[string]int32{
	"SigChainEntryTypeUndefined": 0,
	"SigChainEntryTypeInitChain": 1,
	"SigChainEntryTypeAddKey":    2,
	"SigChainEntryTypeRemoveKey": 3,
}

func (x SigChainEntry_SigChainEntryType) String() string {
	return proto.EnumName(SigChainEntry_SigChainEntryType_name, int32(x))
}

func (SigChainEntry_SigChainEntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_12c99d9ae164abf9, []int{0, 0}
}

type SigChainEntry struct {
	EntryHash             []byte                          `protobuf:"bytes,1,opt,name=entry_hash,json=entryHash,proto3" json:"entry_hash,omitempty"`
	EntryTypeCode         SigChainEntry_SigChainEntryType `protobuf:"varint,2,opt,name=entry_type_code,json=entryTypeCode,proto3,enum=SigChainEntry_SigChainEntryType" json:"entry_type_code,omitempty"`
	ParentEntryHash       []byte                          `protobuf:"bytes,3,opt,name=parent_entry_hash,json=parentEntryHash,proto3" json:"parent_entry_hash,omitempty"`
	CreatedAt             time.Time                       `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	ExpiringAt            time.Time                       `protobuf:"bytes,5,opt,name=expiring_at,json=expiringAt,proto3,stdtime" json:"expiring_at"`
	SignerPublicKeyBytes  []byte                          `protobuf:"bytes,6,opt,name=signer_public_key_bytes,json=signerPublicKeyBytes,proto3" json:"signer_public_key_bytes,omitempty"`
	SubjectPublicKeyBytes []byte                          `protobuf:"bytes,7,opt,name=subject_public_key_bytes,json=subjectPublicKeyBytes,proto3" json:"subject_public_key_bytes,omitempty"`
	Signature             []byte                          `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SigChainEntry) Reset()         { *m = SigChainEntry{} }
func (m *SigChainEntry) String() string { return proto.CompactTextString(m) }
func (*SigChainEntry) ProtoMessage()    {}
func (*SigChainEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_12c99d9ae164abf9, []int{0}
}
func (m *SigChainEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigChainEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigChainEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigChainEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigChainEntry.Merge(m, src)
}
func (m *SigChainEntry) XXX_Size() int {
	return m.Size()
}
func (m *SigChainEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_SigChainEntry.DiscardUnknown(m)
}

var xxx_messageInfo_SigChainEntry proto.InternalMessageInfo

func (m *SigChainEntry) GetEntryHash() []byte {
	if m != nil {
		return m.EntryHash
	}
	return nil
}

func (m *SigChainEntry) GetEntryTypeCode() SigChainEntry_SigChainEntryType {
	if m != nil {
		return m.EntryTypeCode
	}
	return SigChainEntry_SigChainEntryTypeUndefined
}

func (m *SigChainEntry) GetParentEntryHash() []byte {
	if m != nil {
		return m.ParentEntryHash
	}
	return nil
}

func (m *SigChainEntry) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *SigChainEntry) GetExpiringAt() time.Time {
	if m != nil {
		return m.ExpiringAt
	}
	return time.Time{}
}

func (m *SigChainEntry) GetSignerPublicKeyBytes() []byte {
	if m != nil {
		return m.SignerPublicKeyBytes
	}
	return nil
}

func (m *SigChainEntry) GetSubjectPublicKeyBytes() []byte {
	if m != nil {
		return m.SubjectPublicKeyBytes
	}
	return nil
}

func (m *SigChainEntry) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SigChain struct {
	ID      []byte           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Entries []*SigChainEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *SigChain) Reset()         { *m = SigChain{} }
func (m *SigChain) String() string { return proto.CompactTextString(m) }
func (*SigChain) ProtoMessage()    {}
func (*SigChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_12c99d9ae164abf9, []int{1}
}
func (m *SigChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigChain.Merge(m, src)
}
func (m *SigChain) XXX_Size() int {
	return m.Size()
}
func (m *SigChain) XXX_DiscardUnknown() {
	xxx_messageInfo_SigChain.DiscardUnknown(m)
}

var xxx_messageInfo_SigChain proto.InternalMessageInfo

func (m *SigChain) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *SigChain) GetEntries() []*SigChainEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterEnum("SigChainEntry_SigChainEntryType", SigChainEntry_SigChainEntryType_name, SigChainEntry_SigChainEntryType_value)
	proto.RegisterType((*SigChainEntry)(nil), "SigChainEntry")
	proto.RegisterType((*SigChain)(nil), "SigChain")
}

func init() { proto.RegisterFile("internal/sigchain.proto", fileDescriptor_12c99d9ae164abf9) }

var fileDescriptor_12c99d9ae164abf9 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xb3, 0x4e, 0x49, 0x93, 0x0d, 0x6d, 0xd3, 0x15, 0x10, 0x2b, 0x50, 0x27, 0xca, 0x29,
	0x42, 0xc2, 0x96, 0x82, 0x50, 0xcf, 0x49, 0x88, 0xd4, 0xaa, 0x1c, 0x90, 0x29, 0x17, 0x2e, 0x96,
	0x3f, 0xa6, 0xeb, 0x85, 0x64, 0xd7, 0x5a, 0x6f, 0x10, 0x7e, 0x8b, 0x3c, 0x56, 0x8f, 0xe5, 0xc6,
	0xa9, 0xa0, 0xe4, 0x45, 0x90, 0xd7, 0x71, 0x20, 0xa4, 0x17, 0x6e, 0x33, 0xf3, 0x9b, 0xff, 0x8c,
	0x3d, 0x33, 0x8b, 0xdb, 0x8c, 0x2b, 0x90, 0xdc, 0x9f, 0x39, 0x29, 0xa3, 0x61, 0xec, 0x33, 0x6e,
	0x27, 0x52, 0x28, 0xd1, 0xe9, 0x52, 0x21, 0xe8, 0x0c, 0x1c, 0xed, 0x05, 0x8b, 0x1b, 0x47, 0xb1,
	0x39, 0xa4, 0xca, 0x9f, 0x27, 0x9b, 0x84, 0x57, 0x94, 0xa9, 0x78, 0x11, 0xd8, 0xa1, 0x98, 0x3b,
	0x54, 0x50, 0xf1, 0x27, 0x33, 0xf7, 0xb4, 0xa3, 0xad, 0x22, 0xbd, 0xff, 0xfd, 0x00, 0x1f, 0x7d,
	0x60, 0x74, 0x92, 0xb7, 0x98, 0x72, 0x25, 0x33, 0x72, 0x86, 0x31, 0xe4, 0x86, 0x17, 0xfb, 0x69,
	0x6c, 0xa2, 0x1e, 0x1a, 0x3c, 0x76, 0x1b, 0x3a, 0x72, 0xe1, 0xa7, 0x31, 0xb9, 0xc0, 0x27, 0x05,
	0x56, 0x59, 0x02, 0x5e, 0x28, 0x22, 0x30, 0x8d, 0x1e, 0x1a, 0x1c, 0x0f, 0x7b, 0xf6, 0x4e, 0x9d,
	0x5d, 0xef, 0x3a, 0x4b, 0xc0, 0x3d, 0x82, 0xd2, 0x9c, 0x88, 0x08, 0xc8, 0x4b, 0x7c, 0x9a, 0xf8,
	0x12, 0xb8, 0xf2, 0xfe, 0xea, 0x57, 0xd5, 0xfd, 0x4e, 0x0a, 0x30, 0xdd, 0x76, 0x9d, 0x60, 0x1c,
	0x4a, 0xf0, 0x15, 0x44, 0x9e, 0xaf, 0xcc, 0x83, 0x1e, 0x1a, 0x34, 0x87, 0x1d, 0xbb, 0x98, 0x85,
	0x5d, 0xfe, 0xa1, 0x7d, 0x5d, 0xce, 0x62, 0x5c, 0xbf, 0xbd, 0xef, 0x56, 0x96, 0x3f, 0xbb, 0xc8,
	0x6d, 0x6c, 0x74, 0x23, 0x45, 0xa6, 0xb8, 0x09, 0xdf, 0x12, 0x26, 0x19, 0xa7, 0x79, 0x95, 0x47,
	0xff, 0x51, 0x05, 0x97, 0xc2, 0x91, 0x22, 0x6f, 0x70, 0x3b, 0x65, 0x94, 0x83, 0xf4, 0x92, 0x45,
	0x30, 0x63, 0xa1, 0xf7, 0x05, 0x32, 0x2f, 0xc8, 0x14, 0xa4, 0x66, 0x4d, 0x7f, 0xfd, 0x93, 0x02,
	0xbf, 0xd7, 0xf4, 0x0a, 0xb2, 0x71, 0xce, 0xc8, 0x39, 0x36, 0xd3, 0x45, 0xf0, 0x19, 0x42, 0xb5,
	0xaf, 0x3b, 0xd4, 0xba, 0xa7, 0x1b, 0xfe, 0x8f, 0xf0, 0x05, 0x6e, 0xe4, 0x05, 0x7d, 0xb5, 0x90,
	0x60, 0xd6, 0x8b, 0x7d, 0x6c, 0x03, 0xfd, 0x25, 0xc2, 0xa7, 0x7b, 0xa3, 0x26, 0x16, 0xee, 0xec,
	0x05, 0x3f, 0xf2, 0x08, 0x6e, 0x18, 0x87, 0xa8, 0x55, 0x79, 0x90, 0x5f, 0x72, 0xa6, 0x74, 0xa4,
	0x85, 0xc8, 0x73, 0xdc, 0xde, 0xe3, 0xa3, 0x28, 0xba, 0x82, 0xac, 0x65, 0x3c, 0x28, 0x76, 0x61,
	0x2e, 0xbe, 0x42, 0xce, 0xab, 0xfd, 0x77, 0xb8, 0x5e, 0x72, 0xf2, 0x0c, 0x1b, 0x2c, 0x2a, 0xae,
	0x68, 0x5c, 0x5b, 0xdd, 0x77, 0x8d, 0xcb, 0xb7, 0xae, 0xc1, 0x22, 0x32, 0xc0, 0x87, 0xf9, 0xd6,
	0x19, 0xa4, 0xa6, 0xd1, 0xab, 0x0e, 0x9a, 0xc3, 0xe3, 0xdd, 0x83, 0x71, 0x4b, 0x3c, 0x3e, 0xbf,
	0x5d, 0x59, 0xe8, 0x6e, 0x65, 0xa1, 0x5f, 0x2b, 0x0b, 0x2d, 0xd7, 0x56, 0xe5, 0x6e, 0x6d, 0x55,
	0x7e, 0xac, 0xad, 0xca, 0xa7, 0xb3, 0x00, 0xa4, 0xca, 0x6c, 0x05, 0x61, 0xec, 0x50, 0xe1, 0x6c,
	0x9f, 0x4c, 0x28, 0xb3, 0x44, 0x89, 0xa0, 0xa6, 0x37, 0xfa, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x8e, 0xc3, 0x84, 0xae, 0x4c, 0x03, 0x00, 0x00,
}

func (m *SigChainEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigChainEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigChainEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SubjectPublicKeyBytes) > 0 {
		i -= len(m.SubjectPublicKeyBytes)
		copy(dAtA[i:], m.SubjectPublicKeyBytes)
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.SubjectPublicKeyBytes)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SignerPublicKeyBytes) > 0 {
		i -= len(m.SignerPublicKeyBytes)
		copy(dAtA[i:], m.SignerPublicKeyBytes)
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.SignerPublicKeyBytes)))
		i--
		dAtA[i] = 0x32
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpiringAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpiringAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSigchain(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintSigchain(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.ParentEntryHash) > 0 {
		i -= len(m.ParentEntryHash)
		copy(dAtA[i:], m.ParentEntryHash)
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.ParentEntryHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EntryTypeCode != 0 {
		i = encodeVarintSigchain(dAtA, i, uint64(m.EntryTypeCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EntryHash) > 0 {
		i -= len(m.EntryHash)
		copy(dAtA[i:], m.EntryHash)
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.EntryHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSigchain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintSigchain(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSigchain(dAtA []byte, offset int, v uint64) int {
	offset -= sovSigchain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SigChainEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntryHash)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	if m.EntryTypeCode != 0 {
		n += 1 + sovSigchain(uint64(m.EntryTypeCode))
	}
	l = len(m.ParentEntryHash)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovSigchain(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpiringAt)
	n += 1 + l + sovSigchain(uint64(l))
	l = len(m.SignerPublicKeyBytes)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	l = len(m.SubjectPublicKeyBytes)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	return n
}

func (m *SigChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSigchain(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovSigchain(uint64(l))
		}
	}
	return n
}

func sovSigchain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSigchain(x uint64) (n int) {
	return sovSigchain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SigChainEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigChainEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigChainEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryHash = append(m.EntryHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EntryHash == nil {
				m.EntryHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryTypeCode", wireType)
			}
			m.EntryTypeCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryTypeCode |= SigChainEntry_SigChainEntryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentEntryHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentEntryHash = append(m.ParentEntryHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentEntryHash == nil {
				m.ParentEntryHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiringAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpiringAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerPublicKeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerPublicKeyBytes = append(m.SignerPublicKeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SignerPublicKeyBytes == nil {
				m.SignerPublicKeyBytes = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectPublicKeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectPublicKeyBytes = append(m.SubjectPublicKeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.SubjectPublicKeyBytes == nil {
				m.SubjectPublicKeyBytes = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigchain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSigchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSigchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSigchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSigchain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSigchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &SigChainEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSigchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSigchain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSigchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSigchain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSigchain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSigchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSigchain
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSigchain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSigchain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSigchain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSigchain
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSigchain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSigchain   = fmt.Errorf("proto: integer overflow")
)
