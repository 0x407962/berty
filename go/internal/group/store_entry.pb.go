// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: go-internal/store_entry.proto

package group

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageEntryPayload_PayloadType int32

const (
	MessageEntryPayload_PayloadTypeUnknown    MessageEntryPayload_PayloadType = 0
	MessageEntryPayload_PayloadTypeMessage    MessageEntryPayload_PayloadType = 1
	MessageEntryPayload_PayloadTypeInvitation MessageEntryPayload_PayloadType = 2
)

var MessageEntryPayload_PayloadType_name = map[int32]string{
	0: "PayloadTypeUnknown",
	1: "PayloadTypeMessage",
	2: "PayloadTypeInvitation",
}

var MessageEntryPayload_PayloadType_value = map[string]int32{
	"PayloadTypeUnknown":    0,
	"PayloadTypeMessage":    1,
	"PayloadTypeInvitation": 2,
}

func (x MessageEntryPayload_PayloadType) String() string {
	return proto.EnumName(MessageEntryPayload_PayloadType_name, int32(x))
}

func (MessageEntryPayload_PayloadType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_588070fb2e1cba7f, []int{3, 0}
}

type SettingsEntryPayload_PayloadType int32

const (
	SettingsEntryPayload_PayloadTypeUnknown       SettingsEntryPayload_PayloadType = 0
	SettingsEntryPayload_PayloadTypeGroupSetting  SettingsEntryPayload_PayloadType = 1
	SettingsEntryPayload_PayloadTypeMemberSetting SettingsEntryPayload_PayloadType = 2
)

var SettingsEntryPayload_PayloadType_name = map[int32]string{
	0: "PayloadTypeUnknown",
	1: "PayloadTypeGroupSetting",
	2: "PayloadTypeMemberSetting",
}

var SettingsEntryPayload_PayloadType_value = map[string]int32{
	"PayloadTypeUnknown":       0,
	"PayloadTypeGroupSetting":  1,
	"PayloadTypeMemberSetting": 2,
}

func (x SettingsEntryPayload_PayloadType) String() string {
	return proto.EnumName(SettingsEntryPayload_PayloadType_name, int32(x))
}

func (SettingsEntryPayload_PayloadType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_588070fb2e1cba7f, []int{7, 0}
}

type StoreEncryptedEntry struct {
	EncryptedPayload     []byte   `protobuf:"bytes,1,opt,name=encrypted_payload,json=encryptedPayload,proto3" json:"encrypted_payload,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreEncryptedEntry) Reset()         { *m = StoreEncryptedEntry{} }
func (m *StoreEncryptedEntry) String() string { return proto.CompactTextString(m) }
func (*StoreEncryptedEntry) ProtoMessage()    {}
func (*StoreEncryptedEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_588070fb2e1cba7f, []int{0}
}
func (m *StoreEncryptedEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreEncryptedEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreEncryptedEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreEncryptedEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreEncryptedEntry.Merge(m, src)
}
func (m *StoreEncryptedEntry) XXX_Size() int {
	return m.Size()
}
func (m *StoreEncryptedEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreEncryptedEntry.DiscardUnknown(m)
}

var xxx_messageInfo_StoreEncryptedEntry proto.InternalMessageInfo

func (m *StoreEncryptedEntry) GetEncryptedPayload() []byte {
	if m != nil {
		return m.EncryptedPayload
	}
	return nil
}

func (m *StoreEncryptedEntry) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type MemberEntryPayload struct {
	MemberPubKey                []byte   `protobuf:"bytes,1,opt,name=member_pub_key,json=memberPubKey,proto3" json:"member_pub_key,omitempty"`
	MemberPubKeySignature       []byte   `protobuf:"bytes,2,opt,name=member_pub_key_signature,json=memberPubKeySignature,proto3" json:"member_pub_key_signature,omitempty"`
	MemberDevicePubKey          []byte   `protobuf:"bytes,3,opt,name=member_device_pub_key,json=memberDevicePubKey,proto3" json:"member_device_pub_key,omitempty"`
	MemberDevicePubKeySignature []byte   `protobuf:"bytes,4,opt,name=member_device_pub_key_signature,json=memberDevicePubKeySignature,proto3" json:"member_device_pub_key_signature,omitempty"`
	InviterDevicePubKey         []byte   `protobuf:"bytes,5,opt,name=inviter_device_pub_key,json=inviterDevicePubKey,proto3" json:"inviter_device_pub_key,omitempty"`
	InvitationPubKey            []byte   `protobuf:"bytes,6,opt,name=invitation_pub_key,json=invitationPubKey,proto3" json:"invitation_pub_key,omitempty"`
	InvitationPubKeySignature   []byte   `protobuf:"bytes,7,opt,name=invitation_pub_key_signature,json=invitationPubKeySignature,proto3" json:"invitation_pub_key_signature,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *MemberEntryPayload) Reset()         { *m = MemberEntryPayload{} }
func (m *MemberEntryPayload) String() string { return proto.CompactTextString(m) }
func (*MemberEntryPayload) ProtoMessage()    {}
func (*MemberEntryPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_588070fb2e1cba7f, []int{1}
}
func (m *MemberEntryPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemberEntryPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemberEntryPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemberEntryPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberEntryPayload.Merge(m, src)
}
func (m *MemberEntryPayload) XXX_Size() int {
	return m.Size()
}
func (m *MemberEntryPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberEntryPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MemberEntryPayload proto.InternalMessageInfo

func (m *MemberEntryPayload) GetMemberPubKey() []byte {
	if m != nil {
		return m.MemberPubKey
	}
	return nil
}

func (m *MemberEntryPayload) GetMemberPubKeySignature() []byte {
	if m != nil {
		return m.MemberPubKeySignature
	}
	return nil
}

func (m *MemberEntryPayload) GetMemberDevicePubKey() []byte {
	if m != nil {
		return m.MemberDevicePubKey
	}
	return nil
}

func (m *MemberEntryPayload) GetMemberDevicePubKeySignature() []byte {
	if m != nil {
		return m.MemberDevicePubKeySignature
	}
	return nil
}

func (m *MemberEntryPayload) GetInviterDevicePubKey() []byte {
	if m != nil {
		return m.InviterDevicePubKey
	}
	return nil
}

func (m *MemberEntryPayload) GetInvitationPubKey() []byte {
	if m != nil {
		return m.InvitationPubKey
	}
	return nil
}

func (m *MemberEntryPayload) GetInvitationPubKeySignature() []byte {
	if m != nil {
		return m.InvitationPubKeySignature
	}
	return nil
}

type MessageEntryEnvelope struct {
	Counter              uint64   `protobuf:"varint,1,opt,name=counter,proto3" json:"counter,omitempty"`
	EncryptedPayload     []byte   `protobuf:"bytes,2,opt,name=encrypted_payload,json=encryptedPayload,proto3" json:"encrypted_payload,omitempty"`
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageEntryEnvelope) Reset()         { *m = MessageEntryEnvelope{} }
func (m *MessageEntryEnvelope) String() string { return proto.CompactTextString(m) }
func (*MessageEntryEnvelope) ProtoMessage()    {}
func (*MessageEntryEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_588070fb2e1cba7f, []int{2}
}
func (m *MessageEntryEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageEntryEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageEntryEnvelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageEntryEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageEntryEnvelope.Merge(m, src)
}
func (m *MessageEntryEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *MessageEntryEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageEntryEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_MessageEntryEnvelope proto.InternalMessageInfo

func (m *MessageEntryEnvelope) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *MessageEntryEnvelope) GetEncryptedPayload() []byte {
	if m != nil {
		return m.EncryptedPayload
	}
	return nil
}

func (m *MessageEntryEnvelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type MessageEntryPayload struct {
	Type                 MessageEntryPayload_PayloadType `protobuf:"varint,1,opt,name=type,proto3,enum=berty.group.MessageEntryPayload_PayloadType" json:"type,omitempty"`
	MessageBody          []byte                          `protobuf:"bytes,2,opt,name=message_body,json=messageBody,proto3" json:"message_body,omitempty"`
	Invitation           *Invitation                     `protobuf:"bytes,3,opt,name=invitation,proto3" json:"invitation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *MessageEntryPayload) Reset()         { *m = MessageEntryPayload{} }
func (m *MessageEntryPayload) String() string { return proto.CompactTextString(m) }
func (*MessageEntryPayload) ProtoMessage()    {}
func (*MessageEntryPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_588070fb2e1cba7f, []int{3}
}
func (m *MessageEntryPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageEntryPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageEntryPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageEntryPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageEntryPayload.Merge(m, src)
}
func (m *MessageEntryPayload) XXX_Size() int {
	return m.Size()
}
func (m *MessageEntryPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageEntryPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MessageEntryPayload proto.InternalMessageInfo

func (m *MessageEntryPayload) GetType() MessageEntryPayload_PayloadType {
	if m != nil {
		return m.Type
	}
	return MessageEntryPayload_PayloadTypeUnknown
}

func (m *MessageEntryPayload) GetMessageBody() []byte {
	if m != nil {
		return m.MessageBody
	}
	return nil
}

func (m *MessageEntryPayload) GetInvitation() *Invitation {
	if m != nil {
		return m.Invitation
	}
	return nil
}

type Invitation struct {
	InviterDevicePubKey       []byte   `protobuf:"bytes,1,opt,name=inviter_device_pub_key,json=inviterDevicePubKey,proto3" json:"inviter_device_pub_key,omitempty"`
	InvitationPrivKey         []byte   `protobuf:"bytes,2,opt,name=invitation_priv_key,json=invitationPrivKey,proto3" json:"invitation_priv_key,omitempty"`
	InvitationPubKeySignature []byte   `protobuf:"bytes,3,opt,name=invitation_pub_key_signature,json=invitationPubKeySignature,proto3" json:"invitation_pub_key_signature,omitempty"`
	GroupVersion              uint32   `protobuf:"varint,4,opt,name=group_version,json=groupVersion,proto3" json:"group_version,omitempty"`
	GroupPubKey               []byte   `protobuf:"bytes,5,opt,name=group_pub_key,json=groupPubKey,proto3" json:"group_pub_key,omitempty"`
	GroupSigningKey           []byte   `protobuf:"bytes,6,opt,name=group_signing_key,json=groupSigningKey,proto3" json:"group_signing_key,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *Invitation) Reset()         { *m = Invitation{} }
func (m *Invitation) String() string { return proto.CompactTextString(m) }
func (*Invitation) ProtoMessage()    {}
func (*Invitation) Descriptor() ([]byte, []int) {
	return fileDescriptor_588070fb2e1cba7f, []int{4}
}
func (m *Invitation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Invitation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Invitation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Invitation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invitation.Merge(m, src)
}
func (m *Invitation) XXX_Size() int {
	return m.Size()
}
func (m *Invitation) XXX_DiscardUnknown() {
	xxx_messageInfo_Invitation.DiscardUnknown(m)
}

var xxx_messageInfo_Invitation proto.InternalMessageInfo

func (m *Invitation) GetInviterDevicePubKey() []byte {
	if m != nil {
		return m.InviterDevicePubKey
	}
	return nil
}

func (m *Invitation) GetInvitationPrivKey() []byte {
	if m != nil {
		return m.InvitationPrivKey
	}
	return nil
}

func (m *Invitation) GetInvitationPubKeySignature() []byte {
	if m != nil {
		return m.InvitationPubKeySignature
	}
	return nil
}

func (m *Invitation) GetGroupVersion() uint32 {
	if m != nil {
		return m.GroupVersion
	}
	return 0
}

func (m *Invitation) GetGroupPubKey() []byte {
	if m != nil {
		return m.GroupPubKey
	}
	return nil
}

func (m *Invitation) GetGroupSigningKey() []byte {
	if m != nil {
		return m.GroupSigningKey
	}
	return nil
}

type SecretEntryPayload struct {
	DestMemberPubKey      []byte   `protobuf:"bytes,1,opt,name=dest_member_pub_key,json=destMemberPubKey,proto3" json:"dest_member_pub_key,omitempty"`
	SenderDevicePubKey    []byte   `protobuf:"bytes,2,opt,name=sender_device_pub_key,json=senderDevicePubKey,proto3" json:"sender_device_pub_key,omitempty"`
	EncryptedDeviceSecret []byte   `protobuf:"bytes,3,opt,name=encrypted_device_secret,json=encryptedDeviceSecret,proto3" json:"encrypted_device_secret,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *SecretEntryPayload) Reset()         { *m = SecretEntryPayload{} }
func (m *SecretEntryPayload) String() string { return proto.CompactTextString(m) }
func (*SecretEntryPayload) ProtoMessage()    {}
func (*SecretEntryPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_588070fb2e1cba7f, []int{5}
}
func (m *SecretEntryPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecretEntryPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecretEntryPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecretEntryPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecretEntryPayload.Merge(m, src)
}
func (m *SecretEntryPayload) XXX_Size() int {
	return m.Size()
}
func (m *SecretEntryPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SecretEntryPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SecretEntryPayload proto.InternalMessageInfo

func (m *SecretEntryPayload) GetDestMemberPubKey() []byte {
	if m != nil {
		return m.DestMemberPubKey
	}
	return nil
}

func (m *SecretEntryPayload) GetSenderDevicePubKey() []byte {
	if m != nil {
		return m.SenderDevicePubKey
	}
	return nil
}

func (m *SecretEntryPayload) GetEncryptedDeviceSecret() []byte {
	if m != nil {
		return m.EncryptedDeviceSecret
	}
	return nil
}

type DeviceSecret struct {
	DerivationState      []byte   `protobuf:"bytes,1,opt,name=derivation_state,json=derivationState,proto3" json:"derivation_state,omitempty"`
	Counter              uint64   `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceSecret) Reset()         { *m = DeviceSecret{} }
func (m *DeviceSecret) String() string { return proto.CompactTextString(m) }
func (*DeviceSecret) ProtoMessage()    {}
func (*DeviceSecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_588070fb2e1cba7f, []int{6}
}
func (m *DeviceSecret) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceSecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceSecret.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceSecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceSecret.Merge(m, src)
}
func (m *DeviceSecret) XXX_Size() int {
	return m.Size()
}
func (m *DeviceSecret) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceSecret.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceSecret proto.InternalMessageInfo

func (m *DeviceSecret) GetDerivationState() []byte {
	if m != nil {
		return m.DerivationState
	}
	return nil
}

func (m *DeviceSecret) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type SettingsEntryPayload struct {
	Type                 SettingsEntryPayload_PayloadType `protobuf:"varint,1,opt,name=type,proto3,enum=berty.group.SettingsEntryPayload_PayloadType" json:"type,omitempty"`
	MemberPubKey         []byte                           `protobuf:"bytes,2,opt,name=member_pub_key,json=memberPubKey,proto3" json:"member_pub_key,omitempty"`
	Key                  []byte                           `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte                           `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *SettingsEntryPayload) Reset()         { *m = SettingsEntryPayload{} }
func (m *SettingsEntryPayload) String() string { return proto.CompactTextString(m) }
func (*SettingsEntryPayload) ProtoMessage()    {}
func (*SettingsEntryPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_588070fb2e1cba7f, []int{7}
}
func (m *SettingsEntryPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettingsEntryPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettingsEntryPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettingsEntryPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsEntryPayload.Merge(m, src)
}
func (m *SettingsEntryPayload) XXX_Size() int {
	return m.Size()
}
func (m *SettingsEntryPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsEntryPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsEntryPayload proto.InternalMessageInfo

func (m *SettingsEntryPayload) GetType() SettingsEntryPayload_PayloadType {
	if m != nil {
		return m.Type
	}
	return SettingsEntryPayload_PayloadTypeUnknown
}

func (m *SettingsEntryPayload) GetMemberPubKey() []byte {
	if m != nil {
		return m.MemberPubKey
	}
	return nil
}

func (m *SettingsEntryPayload) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SettingsEntryPayload) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("berty.group.MessageEntryPayload_PayloadType", MessageEntryPayload_PayloadType_name, MessageEntryPayload_PayloadType_value)
	proto.RegisterEnum("berty.group.SettingsEntryPayload_PayloadType", SettingsEntryPayload_PayloadType_name, SettingsEntryPayload_PayloadType_value)
	proto.RegisterType((*StoreEncryptedEntry)(nil), "berty.group.StoreEncryptedEntry")
	proto.RegisterType((*MemberEntryPayload)(nil), "berty.group.MemberEntryPayload")
	proto.RegisterType((*MessageEntryEnvelope)(nil), "berty.group.MessageEntryEnvelope")
	proto.RegisterType((*MessageEntryPayload)(nil), "berty.group.MessageEntryPayload")
	proto.RegisterType((*Invitation)(nil), "berty.group.Invitation")
	proto.RegisterType((*SecretEntryPayload)(nil), "berty.group.SecretEntryPayload")
	proto.RegisterType((*DeviceSecret)(nil), "berty.group.DeviceSecret")
	proto.RegisterType((*SettingsEntryPayload)(nil), "berty.group.SettingsEntryPayload")
}

func init() { proto.RegisterFile("go-internal/store_entry.proto", fileDescriptor_588070fb2e1cba7f) }

var fileDescriptor_588070fb2e1cba7f = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0xd3, 0x4a,
	0x10, 0x3e, 0x76, 0xfa, 0xa3, 0x33, 0x49, 0x5b, 0x77, 0xd3, 0xb4, 0xe9, 0x69, 0x4e, 0xcf, 0xc1,
	0x70, 0x01, 0xa5, 0x49, 0xd4, 0x56, 0x82, 0x4b, 0xa0, 0x6a, 0x85, 0x50, 0x55, 0xa9, 0x4a, 0x00,
	0x21, 0x6e, 0x5c, 0x3b, 0x1e, 0x5c, 0xab, 0x89, 0xd7, 0xb2, 0xd7, 0x46, 0x16, 0x4f, 0xc0, 0x05,
	0x12, 0x6f, 0xc1, 0x1d, 0xcf, 0xc1, 0x25, 0x8f, 0x80, 0xfa, 0x24, 0xc8, 0xbb, 0x76, 0xbc, 0x4e,
	0x0c, 0xf4, 0x2a, 0xde, 0x6f, 0xe6, 0xdb, 0x6f, 0x32, 0xfe, 0x66, 0x0c, 0xff, 0x3a, 0xb4, 0xeb,
	0x7a, 0x0c, 0x03, 0xcf, 0x1c, 0xf7, 0x43, 0x46, 0x03, 0x34, 0xd0, 0x63, 0x41, 0xd2, 0xf3, 0x03,
	0xca, 0x28, 0xa9, 0x5b, 0x18, 0xb0, 0xa4, 0xe7, 0x04, 0x34, 0xf2, 0xff, 0xe9, 0x3a, 0x2e, 0xbb,
	0x8a, 0xac, 0xde, 0x88, 0x4e, 0xfa, 0x0e, 0x75, 0x68, 0x9f, 0xe7, 0x58, 0xd1, 0x3b, 0x7e, 0xe2,
	0x07, 0xfe, 0x24, 0xb8, 0xfa, 0x25, 0x34, 0x87, 0xe9, 0x85, 0xa7, 0xde, 0x28, 0x48, 0x7c, 0x86,
	0xf6, 0x69, 0x7a, 0x31, 0x79, 0x08, 0xeb, 0x98, 0x23, 0x86, 0x6f, 0x26, 0x63, 0x6a, 0xda, 0x6d,
	0xe5, 0x7f, 0xe5, 0x7e, 0x63, 0xa0, 0x4d, 0x03, 0x17, 0x02, 0x27, 0x1d, 0xf8, 0x3b, 0x74, 0x1d,
	0xcf, 0x64, 0x51, 0x80, 0x6d, 0x95, 0x27, 0x15, 0x80, 0xfe, 0xb9, 0x06, 0xe4, 0x1c, 0x27, 0x16,
	0x06, 0xfc, 0xea, 0x9c, 0x74, 0x0f, 0x56, 0x27, 0x1c, 0x35, 0xfc, 0xc8, 0x32, 0xae, 0x31, 0xc9,
	0xae, 0x6f, 0x08, 0xf4, 0x22, 0xb2, 0xce, 0x30, 0x21, 0x8f, 0xa1, 0x5d, 0xce, 0x32, 0x66, 0x95,
	0x5a, 0x72, 0xfe, 0x30, 0x0f, 0x92, 0x03, 0xc8, 0x02, 0x86, 0x8d, 0xb1, 0x3b, 0xc2, 0xa9, 0x4a,
	0x8d, 0xb3, 0x88, 0x08, 0x9e, 0xf0, 0x58, 0xa6, 0x75, 0x02, 0xff, 0x55, 0x52, 0x24, 0xc9, 0x05,
	0x4e, 0xde, 0x99, 0x27, 0x17, 0xc2, 0x47, 0xb0, 0xe9, 0x7a, 0xb1, 0xcb, 0xe6, 0x95, 0x17, 0x39,
	0xb9, 0x99, 0x45, 0x4b, 0xd2, 0xfb, 0x40, 0x38, 0x6c, 0x32, 0x97, 0x7a, 0x53, 0xc2, 0x92, 0xe8,
	0x77, 0x11, 0xc9, 0xb2, 0x9f, 0x40, 0x67, 0x3e, 0x5b, 0xaa, 0x72, 0x99, 0xf3, 0xb6, 0x67, 0x79,
	0xd3, 0x1a, 0xf5, 0x0f, 0xb0, 0x71, 0x8e, 0x61, 0x68, 0x3a, 0xc8, 0x5f, 0xc9, 0xa9, 0x17, 0xe3,
	0x98, 0xfa, 0x48, 0xda, 0xb0, 0x3c, 0xa2, 0x51, 0x6a, 0x34, 0xfe, 0x32, 0x16, 0x06, 0xf9, 0xb1,
	0xda, 0x0f, 0xea, 0x6d, 0xfc, 0x50, 0x9b, 0xf5, 0xc3, 0x27, 0x15, 0x9a, 0xb2, 0x7a, 0xce, 0x7a,
	0x0a, 0x0b, 0x2c, 0xf1, 0x91, 0x2b, 0xaf, 0x1e, 0xee, 0xf7, 0x24, 0x53, 0xf7, 0x2a, 0xf2, 0x7b,
	0xd9, 0xef, 0xcb, 0xc4, 0xc7, 0x01, 0x67, 0x92, 0x3b, 0xd0, 0x98, 0x88, 0x44, 0xc3, 0xa2, 0x76,
	0x92, 0xd5, 0x57, 0xcf, 0xb0, 0x63, 0x6a, 0xa7, 0x7e, 0x82, 0xa2, 0x2d, 0xbc, 0xb6, 0xfa, 0xe1,
	0x56, 0x49, 0xea, 0xc5, 0x34, 0x3c, 0x90, 0x52, 0xf5, 0x37, 0x50, 0x97, 0x04, 0xc9, 0x26, 0x10,
	0xe9, 0xf8, 0xca, 0xbb, 0xf6, 0xe8, 0x7b, 0x4f, 0xfb, 0x6b, 0x06, 0xcf, 0xca, 0xd6, 0x14, 0xb2,
	0x0d, 0x2d, 0x09, 0x2f, 0x34, 0x34, 0x55, 0xff, 0xa2, 0x02, 0x14, 0xc0, 0x6f, 0xfc, 0xa3, 0xfc,
	0xda, 0x3f, 0x3d, 0x68, 0xca, 0x8e, 0x08, 0xdc, 0x98, 0x33, 0x44, 0x03, 0xd6, 0x25, 0x23, 0x04,
	0x6e, 0x7c, 0x1b, 0x07, 0xd5, 0xfe, 0xe0, 0x20, 0x72, 0x17, 0x56, 0x78, 0xbb, 0x8c, 0x18, 0x83,
	0x30, 0x6d, 0x65, 0x3a, 0x19, 0x2b, 0x83, 0x06, 0x07, 0x5f, 0x0b, 0x8c, 0xe8, 0x79, 0x52, 0x79,
	0x02, 0xea, 0x1c, 0xcc, 0x2a, 0xdf, 0x83, 0x75, 0x91, 0x93, 0x8a, 0xbb, 0x9e, 0x23, 0x19, 0x7f,
	0x8d, 0x07, 0x86, 0x02, 0x3f, 0xc3, 0x44, 0xff, 0xaa, 0x00, 0x19, 0xe2, 0x28, 0x40, 0x56, 0x32,
	0x4e, 0x17, 0x9a, 0x36, 0x86, 0xcc, 0xa8, 0x5c, 0x27, 0x5a, 0x1a, 0x3a, 0x97, 0x57, 0xca, 0x01,
	0xb4, 0x42, 0xf4, 0xec, 0xf9, 0xfe, 0x8a, 0x6e, 0x11, 0x11, 0x2c, 0xb5, 0xf7, 0x11, 0x6c, 0x15,
	0xee, 0xcf, 0x58, 0x21, 0x2f, 0x24, 0xeb, 0x54, 0x6b, 0x1a, 0x16, 0x3c, 0x51, 0xa5, 0x3e, 0x84,
	0x86, 0x7c, 0x26, 0x0f, 0x40, 0xb3, 0x31, 0x70, 0x63, 0xd1, 0xf6, 0x90, 0x99, 0x0c, 0xb3, 0x32,
	0xd7, 0x0a, 0x7c, 0x98, 0xc2, 0xf2, 0x28, 0xaa, 0xa5, 0x51, 0xd4, 0x3f, 0xaa, 0xb0, 0x31, 0x44,
	0xc6, 0x5c, 0xcf, 0x09, 0x4b, 0x7d, 0x78, 0x56, 0x1a, 0xa0, 0x6e, 0xc9, 0xd5, 0x55, 0x84, 0x8a,
	0x09, 0x9a, 0x5f, 0xca, 0x6a, 0xc5, 0x52, 0xd6, 0xa0, 0x56, 0x6c, 0xd2, 0xf4, 0x91, 0x6c, 0xc0,
	0x62, 0x6c, 0x8e, 0xa3, 0x7c, 0x41, 0x8a, 0x83, 0x7e, 0x79, 0xbb, 0x99, 0xd9, 0x81, 0x2d, 0x09,
	0x7f, 0xce, 0x5f, 0xba, 0x28, 0x57, 0x53, 0x48, 0x07, 0xda, 0xa5, 0x81, 0x4a, 0xcb, 0xc8, 0xa3,
	0xea, 0xf1, 0xde, 0xb7, 0x9b, 0x5d, 0xe5, 0xfb, 0xcd, 0xae, 0xf2, 0xe3, 0x66, 0x57, 0x79, 0xdb,
	0x11, 0xff, 0x98, 0xe1, 0xe8, 0xaa, 0xef, 0xd0, 0xfe, 0xf4, 0x8b, 0xc9, 0x5b, 0x60, 0x2d, 0xf1,
	0x0f, 0xde, 0xd1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0xc6, 0x11, 0x60, 0x4d, 0x07, 0x00,
	0x00,
}

func (m *StoreEncryptedEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreEncryptedEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreEncryptedEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EncryptedPayload) > 0 {
		i -= len(m.EncryptedPayload)
		copy(dAtA[i:], m.EncryptedPayload)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.EncryptedPayload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MemberEntryPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberEntryPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemberEntryPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InvitationPubKeySignature) > 0 {
		i -= len(m.InvitationPubKeySignature)
		copy(dAtA[i:], m.InvitationPubKeySignature)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.InvitationPubKeySignature)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InvitationPubKey) > 0 {
		i -= len(m.InvitationPubKey)
		copy(dAtA[i:], m.InvitationPubKey)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.InvitationPubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InviterDevicePubKey) > 0 {
		i -= len(m.InviterDevicePubKey)
		copy(dAtA[i:], m.InviterDevicePubKey)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.InviterDevicePubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MemberDevicePubKeySignature) > 0 {
		i -= len(m.MemberDevicePubKeySignature)
		copy(dAtA[i:], m.MemberDevicePubKeySignature)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.MemberDevicePubKeySignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MemberDevicePubKey) > 0 {
		i -= len(m.MemberDevicePubKey)
		copy(dAtA[i:], m.MemberDevicePubKey)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.MemberDevicePubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MemberPubKeySignature) > 0 {
		i -= len(m.MemberPubKeySignature)
		copy(dAtA[i:], m.MemberPubKeySignature)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.MemberPubKeySignature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MemberPubKey) > 0 {
		i -= len(m.MemberPubKey)
		copy(dAtA[i:], m.MemberPubKey)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.MemberPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageEntryEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageEntryEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageEntryEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EncryptedPayload) > 0 {
		i -= len(m.EncryptedPayload)
		copy(dAtA[i:], m.EncryptedPayload)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.EncryptedPayload)))
		i--
		dAtA[i] = 0x12
	}
	if m.Counter != 0 {
		i = encodeVarintStoreEntry(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MessageEntryPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageEntryPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageEntryPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Invitation != nil {
		{
			size, err := m.Invitation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStoreEntry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MessageBody) > 0 {
		i -= len(m.MessageBody)
		copy(dAtA[i:], m.MessageBody)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.MessageBody)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintStoreEntry(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Invitation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invitation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Invitation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupSigningKey) > 0 {
		i -= len(m.GroupSigningKey)
		copy(dAtA[i:], m.GroupSigningKey)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.GroupSigningKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GroupPubKey) > 0 {
		i -= len(m.GroupPubKey)
		copy(dAtA[i:], m.GroupPubKey)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.GroupPubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GroupVersion != 0 {
		i = encodeVarintStoreEntry(dAtA, i, uint64(m.GroupVersion))
		i--
		dAtA[i] = 0x20
	}
	if len(m.InvitationPubKeySignature) > 0 {
		i -= len(m.InvitationPubKeySignature)
		copy(dAtA[i:], m.InvitationPubKeySignature)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.InvitationPubKeySignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.InvitationPrivKey) > 0 {
		i -= len(m.InvitationPrivKey)
		copy(dAtA[i:], m.InvitationPrivKey)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.InvitationPrivKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InviterDevicePubKey) > 0 {
		i -= len(m.InviterDevicePubKey)
		copy(dAtA[i:], m.InviterDevicePubKey)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.InviterDevicePubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecretEntryPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecretEntryPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecretEntryPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EncryptedDeviceSecret) > 0 {
		i -= len(m.EncryptedDeviceSecret)
		copy(dAtA[i:], m.EncryptedDeviceSecret)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.EncryptedDeviceSecret)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderDevicePubKey) > 0 {
		i -= len(m.SenderDevicePubKey)
		copy(dAtA[i:], m.SenderDevicePubKey)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.SenderDevicePubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DestMemberPubKey) > 0 {
		i -= len(m.DestMemberPubKey)
		copy(dAtA[i:], m.DestMemberPubKey)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.DestMemberPubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceSecret) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceSecret) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceSecret) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Counter != 0 {
		i = encodeVarintStoreEntry(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DerivationState) > 0 {
		i -= len(m.DerivationState)
		copy(dAtA[i:], m.DerivationState)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.DerivationState)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SettingsEntryPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettingsEntryPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettingsEntryPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MemberPubKey) > 0 {
		i -= len(m.MemberPubKey)
		copy(dAtA[i:], m.MemberPubKey)
		i = encodeVarintStoreEntry(dAtA, i, uint64(len(m.MemberPubKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintStoreEntry(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStoreEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovStoreEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoreEncryptedEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncryptedPayload)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemberEntryPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MemberPubKey)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.MemberPubKeySignature)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.MemberDevicePubKey)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.MemberDevicePubKeySignature)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.InviterDevicePubKey)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.InvitationPubKey)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.InvitationPubKeySignature)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageEntryEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Counter != 0 {
		n += 1 + sovStoreEntry(uint64(m.Counter))
	}
	l = len(m.EncryptedPayload)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageEntryPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovStoreEntry(uint64(m.Type))
	}
	l = len(m.MessageBody)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	if m.Invitation != nil {
		l = m.Invitation.Size()
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Invitation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InviterDevicePubKey)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.InvitationPrivKey)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.InvitationPubKeySignature)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	if m.GroupVersion != 0 {
		n += 1 + sovStoreEntry(uint64(m.GroupVersion))
	}
	l = len(m.GroupPubKey)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.GroupSigningKey)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SecretEntryPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestMemberPubKey)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.SenderDevicePubKey)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.EncryptedDeviceSecret)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeviceSecret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DerivationState)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovStoreEntry(uint64(m.Counter))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SettingsEntryPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovStoreEntry(uint64(m.Type))
	}
	l = len(m.MemberPubKey)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovStoreEntry(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStoreEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoreEntry(x uint64) (n int) {
	return sovStoreEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreEncryptedEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoreEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreEncryptedEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreEncryptedEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedPayload = append(m.EncryptedPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedPayload == nil {
				m.EncryptedPayload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoreEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberEntryPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoreEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberEntryPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberEntryPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPubKey = append(m.MemberPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberPubKey == nil {
				m.MemberPubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPubKeySignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPubKeySignature = append(m.MemberPubKeySignature[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberPubKeySignature == nil {
				m.MemberPubKeySignature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberDevicePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberDevicePubKey = append(m.MemberDevicePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberDevicePubKey == nil {
				m.MemberDevicePubKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberDevicePubKeySignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberDevicePubKeySignature = append(m.MemberDevicePubKeySignature[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberDevicePubKeySignature == nil {
				m.MemberDevicePubKeySignature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterDevicePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviterDevicePubKey = append(m.InviterDevicePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.InviterDevicePubKey == nil {
				m.InviterDevicePubKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitationPubKey = append(m.InvitationPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.InvitationPubKey == nil {
				m.InvitationPubKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationPubKeySignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitationPubKeySignature = append(m.InvitationPubKeySignature[:0], dAtA[iNdEx:postIndex]...)
			if m.InvitationPubKeySignature == nil {
				m.InvitationPubKeySignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoreEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageEntryEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoreEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageEntryEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageEntryEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedPayload = append(m.EncryptedPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedPayload == nil {
				m.EncryptedPayload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoreEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageEntryPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoreEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageEntryPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageEntryPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageEntryPayload_PayloadType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageBody = append(m.MessageBody[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageBody == nil {
				m.MessageBody = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invitation == nil {
				m.Invitation = &Invitation{}
			}
			if err := m.Invitation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoreEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Invitation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoreEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invitation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invitation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterDevicePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviterDevicePubKey = append(m.InviterDevicePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.InviterDevicePubKey == nil {
				m.InviterDevicePubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationPrivKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitationPrivKey = append(m.InvitationPrivKey[:0], dAtA[iNdEx:postIndex]...)
			if m.InvitationPrivKey == nil {
				m.InvitationPrivKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitationPubKeySignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvitationPubKeySignature = append(m.InvitationPubKeySignature[:0], dAtA[iNdEx:postIndex]...)
			if m.InvitationPubKeySignature == nil {
				m.InvitationPubKeySignature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupVersion", wireType)
			}
			m.GroupVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPubKey = append(m.GroupPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupPubKey == nil {
				m.GroupPubKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSigningKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupSigningKey = append(m.GroupSigningKey[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupSigningKey == nil {
				m.GroupSigningKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoreEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecretEntryPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoreEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecretEntryPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecretEntryPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestMemberPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestMemberPubKey = append(m.DestMemberPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.DestMemberPubKey == nil {
				m.DestMemberPubKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderDevicePubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderDevicePubKey = append(m.SenderDevicePubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderDevicePubKey == nil {
				m.SenderDevicePubKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedDeviceSecret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedDeviceSecret = append(m.EncryptedDeviceSecret[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedDeviceSecret == nil {
				m.EncryptedDeviceSecret = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoreEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceSecret) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoreEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceSecret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceSecret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivationState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DerivationState = append(m.DerivationState[:0], dAtA[iNdEx:postIndex]...)
			if m.DerivationState == nil {
				m.DerivationState = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStoreEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettingsEntryPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoreEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettingsEntryPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettingsEntryPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SettingsEntryPayload_PayloadType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberPubKey = append(m.MemberPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberPubKey == nil {
				m.MemberPubKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStoreEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoreEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStoreEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoreEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoreEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoreEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoreEntry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStoreEntry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStoreEntry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStoreEntry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoreEntry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStoreEntry = fmt.Errorf("proto: unexpected end of group")
)
